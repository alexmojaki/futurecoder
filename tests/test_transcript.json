[
    {
        "page": "Introducing The Shell",
        "program": [
            "'literally anything'"
        ],
        "response": {
            "message": "<p>Awesome, you're trying out your own experiments!\nThat's a great sign. Keep it up.\nJust letting you know that you do need to eventually type <code>1+2</code> for the book to move forward.</p>",
            "passed": false,
            "result": [
                {
                    "text": "'literally anything'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_expression"
    },
    {
        "page": "Introducing The Shell",
        "program": [
            "1+2"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "3\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_expression"
    },
    {
        "page": "Introducing The Shell",
        "program": [
            "5 - 6"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "-1\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "more_calculation"
    },
    {
        "page": "Introducing Strings",
        "program": [
            "'hello'"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "'hello'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "hello_string"
    },
    {
        "page": "Adding Strings",
        "program": [
            "'hello' + 'world'"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "'helloworld'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "hello_world_concat"
    },
    {
        "page": "Adding Strings",
        "program": [
            "'hello world'"
        ],
        "response": {
            "message": "<p>You must still add two or more strings together.</p>",
            "passed": false,
            "result": [
                {
                    "text": "'hello world'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "hello_world_space"
    },
    {
        "get_solution": [
            "'hello ' + 'world'"
        ],
        "page": "Adding Strings",
        "program": [
            "'hello ' + 'world'"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "'hello world'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "hello_world_space"
    },
    {
        "page": "Introducing Variables",
        "program": [
            "word = 'Hello'"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "word_assign"
    },
    {
        "page": "Introducing Variables",
        "program": [
            "word"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "'Hello'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "word_check"
    },
    {
        "page": "Introducing Variables",
        "program": [
            "'word'"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "'word'",
                "choices": [
                    "word",
                    "'word'",
                    "Hello",
                    "'Hello'",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "'word'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "word_string_check"
    },
    {
        "page": "Introducing Variables",
        "program": [
            "sunshine"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Error",
                "choices": [
                    "sunshine",
                    "'sunshine'",
                    "Hello",
                    "'Hello'",
                    "Error"
                ]
            },
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "name 'sunshine' is not defined",
                                "type": "NameError"
                            },
                            "frames": [
                                {
                                    "lines": [
                                        {
                                            "content": "<span class=\"n n-ExecutingNode\">sunshine</span>",
                                            "is_current": true,
                                            "lineno": 1,
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": []
                                }
                            ],
                            "friendly": "<p>A <code>NameError</code> exception indicates that a variable or\nfunction name is not known to Python.\nMost often, this is because there is a spelling mistake.\nHowever, sometimes it is because the name is used\nbefore being defined or given a value.</p>\n<p>In your program, no object with the name <code>sunshine</code> exists.\nI have no additional information for you.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"my_program.py\", line 1, in <module>",
                        "-->    1 | sunshine",
                        "           ^^^^^^^^",
                        "",
                        "NameError: name 'sunshine' is not defined"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "sunshine_undefined_check"
    },
    {
        "page": "Using Variables and <code>print()</code>",
        "program": [
            "foo = 3"
        ],
        "response": {
            "message": "<p>Put <code>your_name</code> before the <code>=</code> to create a variable called <code>your_name</code>.</p>",
            "passed": false,
            "result": []
        },
        "step": "name_assign"
    },
    {
        "page": "Using Variables and <code>print()</code>",
        "program": [
            "your_name = ''"
        ],
        "response": {
            "message": "<p>For this exercise, choose a non-empty string</p>",
            "passed": false,
            "result": []
        },
        "step": "name_assign"
    },
    {
        "page": "Using Variables and <code>print()</code>",
        "program": [
            "your_name = 3"
        ],
        "response": {
            "message": "<p>You've got the <code>your_name =</code> part right, now put a string (use quotes) on the right of the <code>=</code>.</p>",
            "passed": false,
            "result": []
        },
        "step": "name_assign"
    },
    {
        "page": "Using Variables and <code>print()</code>",
        "program": [
            "your_name = ' Alex'"
        ],
        "response": {
            "message": "<p>For this exercise, choose a name that doesn't start with a space.</p>",
            "passed": false,
            "result": []
        },
        "step": "name_assign"
    },
    {
        "page": "Using Variables and <code>print()</code>",
        "program": [
            "your_name = 'Alex'"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "name_assign"
    },
    {
        "page": "Using Variables and <code>print()</code>",
        "program": [
            "'Hello ' + your_name"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "'Hello Alex'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "hello_plus_name"
    },
    {
        "page": "Using Variables and <code>print()</code>",
        "program": [
            "word + your_name"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "'HelloAlex'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "word_plus_name"
    },
    {
        "get_solution": [
            "word + ' ' + your_name"
        ],
        "page": "Using Variables and <code>print()</code>",
        "program": [
            "word + ' ' + your_name"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "'Hello Alex'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "word_plus_name_with_space"
    },
    {
        "page": "Using Variables and <code>print()</code>",
        "program": [
            "word = 'Goodbye'"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "word_assign_goodbye"
    },
    {
        "page": "Using Variables and <code>print()</code>",
        "program": [
            "word + ' ' + your_name"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "'Goodbye Alex'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "goodbye_plus_name"
    },
    {
        "page": "Using Variables and <code>print()</code>",
        "program": [
            "print(word + ' ' + your_name)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Goodbye Alex\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_print"
    },
    {
        "page": "Writing Programs",
        "program": [
            "word = 'Hello'",
            "name = 'World'",
            "print(word + ' ' + name)",
            "word = 'Goodbye'",
            "print(word + ' ' + name)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Hello World\nGoodbye World\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "editor_hello_world"
    },
    {
        "page": "Storing Calculations In Variables",
        "program": [
            "word = 'Hello'",
            "name = 'World'",
            "sentence = word + ' ' + name",
            "print(sentence)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Hello World",
                "choices": [
                    "sentence",
                    "word + ' ' + name",
                    "Hello + ' ' + World",
                    "'Hello' + ' ' + 'World'",
                    "Hello World",
                    "'Hello World'",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "Hello World\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "sentence_equals_word_plus_name"
    },
    {
        "page": "Storing Calculations In Variables",
        "program": [
            "word = 'Hello'",
            "name = 'World'",
            "sentence = word + ' ' + name",
            "print(sentence)",
            "word = 'Goodbye'",
            "print(sentence)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Hello World\nHello World",
                "choices": [
                    "Hello World\nHello World",
                    "Hello World\nGoodbye World",
                    "Goodbye World\nGoodbye World",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "Hello World\nHello World\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "sentence_doesnt_change"
    },
    {
        "page": "Introducing For Loops",
        "program": [
            "name = 'World'",
            "for character in name: print(character)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "W\no\nr\nl\nd\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_for_loop"
    },
    {
        "page": "Indentation",
        "program": [
            "for character in name:",
            "print(character)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "    print(character)\n    ^\nIndentationError: expected an indented block\nat line 2\n\nAn `IndentationError` occurs when a given line of code is\nnot indented (aligned vertically with other lines) as expected.\n\nLine `2` identified above was expected to begin a new indented block.\n\n\n",
                    "type": "syntax_error"
                }
            ]
        },
        "step": "missing_indentation"
    },
    {
        "page": "Indentation",
        "program": [
            "name = 'World'",
            "",
            "for character in name:",
            "    print(character)",
            "    print('---')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "W\n---\no\n---\nr\n---\nl\n---\nd\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "two_indented_lines"
    },
    {
        "page": "Indentation",
        "program": [
            "name = 'World'",
            "",
            "for character in name:",
            "    print(character)",
            "print('---')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "W\no\nr\nl\nd\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "one_indented_line"
    },
    {
        "page": "Indentation",
        "program": [
            "for character in name:",
            "    print(character)",
            "  print('---')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "    print('---')\n                ^\nIndentationError: unindent does not match any outer indentation level\nat line 3\n\nAn `IndentationError` occurs when a given line of code is\nnot indented (aligned vertically with other lines) as expected.\n\nLine `3` identified above is less indented than expected.\n\n\n",
                    "type": "syntax_error"
                }
            ]
        },
        "step": "mismatched_indentations"
    },
    {
        "get_solution": [
            "for character in name:",
            "    print('---' + character)"
        ],
        "page": "Basic For Loop Exercises",
        "program": [
            "name = 'World'",
            "for character in name:",
            "    print('---' + character)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "---W\n---o\n---r\n---l\n---d\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "loop_exercise_1"
    },
    {
        "get_solution": [
            "for _ in name:",
            "    print(name)"
        ],
        "page": "Basic For Loop Exercises",
        "program": [
            "name = 'World'",
            "for _ in name:",
            "    print(name)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "World\nWorld\nWorld\nWorld\nWorld\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "loop_exercise_2"
    },
    {
        "page": "Building Up Strings",
        "program": [
            "hello = 'Hello'",
            "print(hello)",
            "hello = hello + '!'",
            "print(hello)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Hello\nHello!",
                "choices": [
                    "Hello\nHello",
                    "Hello\nHello!",
                    "Hello!\nHello!",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "Hello\nHello!\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "hello_plus_equals"
    },
    {
        "page": "Building Up Strings",
        "program": [
            "name = 'World'",
            "line = '-'",
            "for char in name:",
            "    line = line + char",
            "    print(line)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "-W\n-Wo\n-Wor\n-Worl\n-World",
                "choices": [
                    "-\nW\n-\no\n-\nr\n-\nl\n-\nd",
                    "-W\n-o\n-r\n-l\n-d",
                    "-World",
                    "-W-o-r-l-d",
                    "-W\n-Wo\n-Wor\n-Worl\n-World",
                    "-World\n-Worl\n-Wor\n-Wo\n-W",
                    "-World\n-World\n-World\n-World\n-World",
                    "-World\n--World\n---World\n----World\n-----World",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "-W\n-Wo\n-Wor\n-Worl\n-World\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_triangle"
    },
    {
        "page": "Building Up Strings",
        "program": [
            "name = 'World'",
            "line = '-'",
            "for char in name:",
            "    print(line)",
            "    line = line + char"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "-\n-W\n-Wo\n-Wor\n-Worl",
                "choices": [
                    "-W\n-Wo\n-Wor\n-Worl\n-World",
                    "-Wo\n-Wor\n-Worl\n-World",
                    "-\n-W\n-Wo\n-Wor\n-Worl",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "-\n-W\n-Wo\n-Wor\n-Worl\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_triangle_missing_last_line"
    },
    {
        "page": "Building Up Strings",
        "program": [
            "'' + '' + ''"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "''",
                "choices": [
                    "''",
                    "' '",
                    "'  '",
                    "'   '",
                    "'' + '' + ''",
                    "''''''",
                    "'' '' ''",
                    "' '' '' '",
                    "++",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "''\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "empty_string"
    },
    {
        "get_solution": [
            "line = ''",
            "for char in name:",
            "    line = line + char",
            "    print(line)"
        ],
        "page": "Building Up Strings",
        "program": [
            "name = 'World'",
            "line = ''",
            "for char in name:",
            "    line = line + char",
            "    print(line)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "W\nWo\nWor\nWorl\nWorld\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_triangle_empty_string"
    },
    {
        "get_solution": [
            "line = ''",
            "for char in name:",
            "    line = line + char + ' '",
            "    print(line)"
        ],
        "page": "Building Up Strings Exercises",
        "program": [
            "name = 'World'",
            "line = ''",
            "for char in name:",
            "    line = line + char + ' '",
            "    print(line)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "W \nW o \nW o r \nW o r l \nW o r l d \n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_triangle_spaced"
    },
    {
        "get_solution": [
            "line = ''",
            "for char in name:",
            "    line = char + line",
            "    print(line)"
        ],
        "page": "Building Up Strings Exercises",
        "program": [
            "name = 'World'",
            "line = ''",
            "for char in name:",
            "    line = char + line",
            "    print(line)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "W\noW\nroW\nlroW\ndlroW\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_triangle_backwards"
    },
    {
        "get_solution": [
            "line = ''",
            "for _ in name:",
            "    line += '-'",
            "print(name)",
            "print(line)"
        ],
        "page": "Building Up Strings Exercises",
        "program": [
            "name = 'World'",
            "line = ''",
            "for _ in name:",
            "    line += '-'",
            "print(name)",
            "print(line)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "World\n-----\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_underlined"
    },
    {
        "get_solution": [
            "line = ''",
            "for _ in name:",
            "    line += '-'",
            "line = '+' + line + '+'",
            "print(line)",
            "print('|' + name + '|')",
            "print(line)"
        ],
        "page": "Building Up Strings Exercises",
        "program": [
            "name = 'World'",
            "line = ''",
            "for _ in name:",
            "    line += '-'",
            "line = '+' + line + '+'",
            "print(line)",
            "print('|' + name + '|')",
            "print(line)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "+-----+\n|World|\n+-----+\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_box"
    },
    {
        "get_solution": [
            "line = '+' + name + '+'",
            "spaces = ''",
            "for _ in name:",
            "    spaces += ' '",
            "",
            "print(line)",
            "for char in name:",
            "    print(char + spaces + char)",
            "print(line)"
        ],
        "page": "Building Up Strings Exercises",
        "program": [
            "name = 'World'",
            "line = '+' + name + '+'",
            "spaces = ''",
            "for _ in name:",
            "    spaces += ' '",
            "",
            "print(line)",
            "for char in name:",
            "    print(char + spaces + char)",
            "print(line)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "+World+\nW     W\no     o\nr     r\nl     l\nd     d\n+World+\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "name_box_2"
    },
    {
        "page": "Building Up Strings Exercises",
        "program": [
            "name = 'World'",
            "spaces = ''",
            "for char in name:",
            "    spaces += ' '",
            "    print(spaces + char)"
        ],
        "response": {
            "message": "<p>Almost there! You have one space too many before each letter.\nMake sure that the first time your loop calls <code>print</code>\nyour variable which will contain the spaces is an empty string.\nCheck the order of your code.</p>",
            "passed": false,
            "result": [
                {
                    "text": " W\n  o\n   r\n    l\n     d\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "diagonal_name_bonus_challenge"
    },
    {
        "get_solution": [
            "spaces = ''",
            "for char in name:",
            "    print(spaces + char)",
            "    spaces += ' '"
        ],
        "page": "Building Up Strings Exercises",
        "program": [
            "name = 'World'",
            "spaces = ''",
            "for char in name:",
            "    print(spaces + char)",
            "    spaces += ' '"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "W\n o\n  r\n   l\n    d\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "diagonal_name_bonus_challenge"
    },
    {
        "page": "Introducing If Statements",
        "program": [
            "condition = True",
            "print(condition)",
            "condition = False",
            "print(condition)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\nFalse\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_booleans"
    },
    {
        "page": "Introducing If Statements",
        "program": [
            "if True:",
            "    print('This gets printed')",
            "",
            "if False:",
            "    print('This does not')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "This gets printed\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_if_statements"
    },
    {
        "page": "Introducing If Statements",
        "program": [
            "sentence = 'Hello World'",
            "excited = True",
            "if excited:",
            "    sentence += '!'",
            "print(sentence)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Hello World!",
                "choices": [
                    "Hello World",
                    "Hello World!",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "Hello World!\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "excited_example"
    },
    {
        "page": "Introducing If Statements",
        "program": [
            "sentence = 'Hello World'",
            "excited = False",
            "if excited:",
            "    sentence += '!'",
            "print(sentence)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Hello World",
                "choices": [
                    "Hello World",
                    "Hello World!",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "Hello World\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "excited_false_example"
    },
    {
        "get_solution": [
            "if excited:",
            "    sentence += '!'",
            "if confused:",
            "    sentence += '?'",
            "print(sentence)"
        ],
        "page": "Introducing If Statements",
        "program": [
            "sentence = 'Hello'",
            "excited = True",
            "confused = True",
            "if excited:",
            "    sentence += '!'",
            "if confused:",
            "    sentence += '?'",
            "print(sentence)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Hello!?\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "excited_confused_exercise"
    },
    {
        "page": "Combining Compound Statements",
        "program": [
            "sentence = 'Hello World'",
            "excited = True",
            "",
            "if excited:",
            "    new_sentence = ''",
            "    for char in sentence:",
            "        new_sentence += char + '!'",
            "    sentence = new_sentence",
            "",
            "print(sentence)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "H!e!l!l!o! !W!o!r!l!d!",
                "choices": [
                    "Hello World",
                    "!!!!!!!!!!!",
                    "Hello World!!!!!!!!!!!",
                    "!!!!!!!!!!!Hello World",
                    "Hello World!",
                    "!Hello World",
                    "!Hello World!",
                    "H!e!l!l!o! !W!o!r!l!d!",
                    "!H!e!l!l!o! !W!o!r!l!d",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "H!e!l!l!o! !W!o!r!l!d!\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "for_inside_if"
    },
    {
        "page": "Understanding Programs With Snoop",
        "program": [
            "sentence = 'Hello World'",
            "",
            "include = False",
            "new_sentence = ''",
            "for char in sentence:",
            "    if include:",
            "        new_sentence += char",
            "    include = True",
            "",
            "print(new_sentence)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "ello World",
                "choices": [
                    "Hello World",
                    "ello World",
                    "Hello Worl",
                    "H",
                    "d",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "ello World\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "print_tail"
    },
    {
        "page": "Understanding Programs With Snoop",
        "program": [
            "sentence = 'Hello World'",
            "",
            "include = False",
            "new_sentence = ''",
            "for char in sentence:",
            "    if include:",
            "        new_sentence += char",
            "    include = True",
            "",
            "print(new_sentence)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   1\u001b[0m | sentence \u001b[38;5;197m=\u001b[39m \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mHello World\u001b[39m\u001b[38;5;186m'\u001b[39m\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   3\u001b[0m | include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mFalse\u001b[39m\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   4\u001b[0m | new_sentence \u001b[38;5;197m=\u001b[39m \u001b[38;5;186m'\u001b[39m\u001b[38;5;186m'\u001b[39m\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m...... char = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mH\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m include:\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m...... char = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186me\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m include:\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         new_sentence \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m char\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m.............. new_sentence = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186me\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m...... char = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186ml\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m include:\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         new_sentence \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m char\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m.............. new_sentence = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mel\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m include:\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         new_sentence \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m char\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m.............. new_sentence = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mell\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m...... char = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mo\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m include:\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         new_sentence \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m char\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m.............. new_sentence = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mello\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m...... char = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186m \u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m include:\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         new_sentence \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m char\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m.............. new_sentence = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mello \u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m...... char = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mW\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m include:\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         new_sentence \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m char\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m.............. new_sentence = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mello W\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m...... char = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mo\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m include:\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         new_sentence \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m char\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m.............. new_sentence = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mello Wo\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m...... char = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mr\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m include:\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         new_sentence \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m char\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m.............. new_sentence = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mello Wor\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m...... char = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186ml\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m include:\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         new_sentence \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m char\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m.............. new_sentence = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mello Worl\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m...... char = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186md\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   6\u001b[0m |     \u001b[38;5;81mif\u001b[39m include:\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   7\u001b[0m |         new_sentence \u001b[38;5;197m+\u001b[39m\u001b[38;5;197m=\u001b[39m char\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m.............. new_sentence = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mello World\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m |     include \u001b[38;5;197m=\u001b[39m \u001b[38;5;81mTrue\u001b[39m\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mfor\u001b[39m char \u001b[38;5;197min\u001b[39m sentence:\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m  10\u001b[0m | print(new_sentence)\n",
                    "type": "stdout"
                },
                {
                    "text": "ello World\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "print_tail_snoop"
    },
    {
        "get_solution": [
            "include = True",
            "new_sentence = ''",
            "for char in sentence:",
            "    if include:",
            "        new_sentence += char",
            "    include = False",
            "",
            "print(new_sentence)"
        ],
        "page": "Understanding Programs With Snoop",
        "program": [
            "sentence = 'Hello there'",
            "include = True",
            "new_sentence = ''",
            "for char in sentence:",
            "    if include:",
            "        new_sentence += char",
            "    include = False",
            "",
            "print(new_sentence)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "H\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "print_first_character"
    },
    {
        "page": "<code>if</code> and <code>else</code>",
        "program": [
            "condition = True",
            "if condition:",
            "    print('Yes')",
            "else:",
            "    print('No')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Yes\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_if_else"
    },
    {
        "page": "<code>if</code> and <code>else</code>",
        "program": [
            "condition = False",
            "if condition:",
            "    print('Yes')",
            "else:",
            "    print('No')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "No\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_if_else_false"
    },
    {
        "page": "<code>if</code> and <code>else</code>",
        "program": [
            "sentence = 'Hello World'",
            "excited = True",
            "if excited:",
            "    sentence = sentence.upper()",
            "else:",
            "    sentence = sentence.lower()",
            "print(sentence)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "HELLO WORLD\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "if_upper_else_lower"
    },
    {
        "page": "<code>if</code> and <code>else</code>",
        "program": [
            "sentence = 'Hello World'",
            "excited = False",
            "if excited:",
            "    sentence = sentence.upper()",
            "else:",
            "    sentence = sentence.lower()",
            "print(sentence)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "hello world\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "if_upper_else_lower_false"
    },
    {
        "page": "<code>if</code> and <code>else</code>",
        "program": [
            "sentence = 'Hello World'",
            "excited = False",
            "",
            "if excited:",
            "    char = '!'",
            "sentence += char",
            "",
            "print(sentence)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Error",
                "choices": [
                    "Hello World",
                    "Hello World!",
                    "Error"
                ]
            },
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [
                                "'chr' (builtin)"
                            ],
                            "exception": {
                                "message": "name 'char' is not defined",
                                "type": "NameError"
                            },
                            "frames": [
                                {
                                    "lines": [
                                        {
                                            "content": "<span class=\"n\">sentence</span> <span class=\"o\">+=</span> <span class=\"n n-ExecutingNode\">char</span>",
                                            "is_current": true,
                                            "lineno": 6,
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">excited</span>\n",
                                            "value": "<span class=\"kc\">False</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"n\">sentence</span>\n",
                                            "value": "<span class=\"s1\">&#39;Hello World&#39;</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>A <code>NameError</code> exception indicates that a variable or\nfunction name is not known to Python.\nMost often, this is because there is a spelling mistake.\nHowever, sometimes it is because the name is used\nbefore being defined or given a value.</p>\n<p>In your program, no object with the name <code>char</code> exists.\nThe Python builtin <code>chr</code> has a similar name.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"my_program.py\", line 6, in <module>",
                        "       5 |     char = '!'",
                        "-->    6 | sentence += char",
                        "                       ^^^^",
                        "excited = False",
                        "sentence = 'Hello World'",
                        "",
                        "NameError: name 'char' is not defined"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "undefined_char"
    },
    {
        "page": "<code>if</code> and <code>else</code>",
        "program": [
            "sentence = 'Hello there'",
            "excited = True",
            "if excited:",
            "    char = '!'",
            "else:",
            "    char = '.'",
            "sentence += char",
            "",
            "print(sentence)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Hello there!\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "else_full_stop"
    },
    {
        "get_solution": [
            "upper = True",
            "new_sentence = ''",
            "for char in sentence:",
            "    if upper:",
            "        char = char.upper()",
            "    else:",
            "        char = char.lower()",
            "    new_sentence += char",
            "    upper = False",
            "",
            "print(new_sentence)"
        ],
        "page": "<code>if</code> and <code>else</code>",
        "program": [
            "sentence = 'HELLO THERE'",
            "upper = True",
            "new_sentence = ''",
            "for char in sentence:",
            "    if upper:",
            "        char = char.upper()",
            "    else:",
            "        char = char.lower()",
            "    new_sentence += char",
            "    upper = False",
            "",
            "print(new_sentence)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Hello there\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "capitalise"
    },
    {
        "get_solution": [
            "upper = True",
            "new_sentence = ''",
            "for char in sentence:",
            "    if upper:",
            "        char = char.upper()",
            "        upper = False",
            "    else:",
            "        char = char.lower()",
            "        upper = True",
            "    new_sentence += char",
            "",
            "print(new_sentence)"
        ],
        "page": "<code>if</code> and <code>else</code>",
        "program": [
            "sentence = 'One more exercise, and then you can relax.'",
            "upper = True",
            "new_sentence = ''",
            "for char in sentence:",
            "    if upper:",
            "        char = char.upper()",
            "        upper = False",
            "    else:",
            "        char = char.lower()",
            "        upper = True",
            "    new_sentence += char",
            "",
            "print(new_sentence)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "OnE MoRe eXeRcIsE, aNd tHeN YoU CaN ReLaX.\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "spongebob"
    },
    {
        "page": "The Equality Operator",
        "program": [
            "print(1 + 2 == 3)",
            "print(4 + 5 == 6)",
            "print('ab' + 'c' == 'a' + 'bc')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\nFalse\nTrue\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_equality"
    },
    {
        "page": "The Equality Operator",
        "program": [
            "print(1 + 2 = 3)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "    print(1 + 2 = 3)\n          ^\nSyntaxError: expression cannot contain assignment, perhaps you meant \"==\"?\nat line 1\n\nA `SyntaxError` occurs when Python cannot understand your code.\n\nYou likely called a function with a named argument:\n\n    a_function(invalid=something) \n\nwhere `invalid` is not a valid variable name in Python\neither because it starts with a number, or is a string,\nor contains a period, etc.\n\n\n",
                    "type": "syntax_error"
                }
            ]
        },
        "step": "equality_vs_assignment"
    },
    {
        "page": "The Equality Operator",
        "program": [
            "name = 'kesha'",
            "new_name = ''",
            "for c in name:",
            "    if c == 's':",
            "        c = '$'",
            "    new_name += c",
            "",
            "print(new_name)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "ke$ha\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "if_equals_replacing_characters"
    },
    {
        "get_solution": [
            "new_name = ''",
            "for c in name:",
            "    if c == 'e':",
            "        c = '3'",
            "    if c == 's':",
            "        c = '$'",
            "    if c == 'a':",
            "        c = '@'",
            "    new_name += c",
            "",
            "print(new_name)"
        ],
        "page": "The Equality Operator",
        "program": [
            "name = 'kesha'",
            "new_name = ''",
            "for c in name:",
            "    if c == 'e':",
            "        c = '3'",
            "    if c == 's':",
            "        c = '$'",
            "    if c == 'a':",
            "        c = '@'",
            "    new_name += c",
            "",
            "print(new_name)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "k3$h@\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "if_equals_replacing_characters_exercise"
    },
    {
        "page": "Introducing <code>elif</code>",
        "program": [
            "dna = 'AGTAGCGTC'",
            "opposite_dna = ''",
            "for char in dna:",
            "    if char == 'A':",
            "        char = 'T'",
            "    if char == 'T':",
            "        char = 'A'",
            "    if char == 'G':",
            "        char = 'C'",
            "    if char == 'C':",
            "        char = 'G'",
            "    opposite_dna += char",
            "",
            "print(opposite_dna)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "AGAAGGGAG\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "dna_example"
    },
    {
        "get_solution": [
            "opposite_dna = ''",
            "for char in dna:",
            "    if char == 'A':",
            "        char = 'T'",
            "    else:",
            "        if char == 'T':",
            "            char = 'A'",
            "    if char == 'G':",
            "        char = 'C'",
            "    else:",
            "        if char == 'C':",
            "            char = 'G'",
            "    opposite_dna += char",
            "",
            "print(opposite_dna)"
        ],
        "page": "Introducing <code>elif</code>",
        "program": [
            "dna = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'",
            "opposite_dna = ''",
            "for char in dna:",
            "    if char == 'A':",
            "        char = 'T'",
            "    else:",
            "        if char == 'T':",
            "            char = 'A'",
            "    if char == 'G':",
            "        char = 'C'",
            "    else:",
            "        if char == 'C':",
            "            char = 'G'",
            "    opposite_dna += char",
            "",
            "print(opposite_dna)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "TCATCGCAGGAATCAATGTCCTACCGAATA\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "dna_example_with_else"
    },
    {
        "page": "Introducing <code>elif</code>",
        "program": [
            "dna = 'AGTAGCGTC'",
            "opposite_dna = ''",
            "for char in dna:",
            "    if char == 'A':",
            "        char = 'T'",
            "    elif char == 'T':",
            "        char = 'A'",
            "    elif char == 'G':",
            "        char = 'C'",
            "    elif char == 'C':",
            "        char = 'G'",
            "    opposite_dna += char",
            "",
            "print(opposite_dna)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "TCATCGCAG\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "dna_example_with_elif"
    },
    {
        "page": "Other Comparison Operators",
        "program": [
            "1 != 2"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "try_not_equals"
    },
    {
        "page": "Other Comparison Operators",
        "program": [
            "sentence = 'The e key on my keyboard is broken'",
            "new_sentence = ''",
            "for c in sentence:",
            "    if c != 'e':",
            "        new_sentence += c",
            "print(new_sentence)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Th  ky on my kyboard is brokn\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "brokn_kyboard"
    },
    {
        "get_solution": [
            "1 < 2"
        ],
        "page": "Other Comparison Operators",
        "program": [
            "1 < 2"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_less_than"
    },
    {
        "get_solution": [
            "'1' < '2'"
        ],
        "page": "Other Comparison Operators",
        "program": [
            "'1' < '2'"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "comparing_strings"
    },
    {
        "page": "Other Comparison Operators",
        "program": [
            "percentage = 73",
            "",
            "if percentage < 40:",
            "    grade = 'F'",
            "elif percentage < 60:",
            "    grade = 'C'",
            "elif percentage < 80:",
            "    grade = 'B'",
            "else:",
            "    grade = 'A'",
            "",
            "print(grade)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "B",
                "choices": [
                    "F",
                    "C",
                    "B",
                    "A",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "B\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "grades_example"
    },
    {
        "get_solution": [
            "if x1 < x2:",
            "    if x1 < x3:",
            "        first = x1",
            "    else:",
            "        first = x3",
            "else:",
            "    if x2 < x3:",
            "        first = x2",
            "    else:",
            "        first = x3",
            "print(first)"
        ],
        "page": "Other Comparison Operators",
        "program": [
            "x1 = 1",
            "x2 = 2",
            "x3 = 3",
            "if x1 < x2:",
            "    if x1 < x3:",
            "        first = x1",
            "    else:",
            "        first = x3",
            "else:",
            "    if x2 < x3:",
            "        first = x2",
            "    else:",
            "        first = x3",
            "print(first)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "1\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "min_three_exercise"
    },
    {
        "page": "Introducing Lists",
        "program": [
            "words = ['This', 'is', 'a', 'list']",
            "",
            "for word in words:",
            "    print(word)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "This\nis\na\nlist\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_list"
    },
    {
        "page": "Introducing Lists",
        "program": [
            "x = 1",
            "things = ['Hello', x, x + 3]",
            "print(things)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "['Hello', 1, 4]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "can_contain_anything"
    },
    {
        "page": "Introducing Lists",
        "program": [
            "numbers = [3, 1, 4, 1, 5, 9]",
            "",
            "total = 0",
            "for number in numbers:",
            "    total += number",
            "",
            "print(total)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "23\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "numbers_sum"
    },
    {
        "get_solution": [
            "total = ''",
            "for word in words:",
            "    total += word",
            "",
            "print(total)"
        ],
        "page": "Introducing Lists",
        "program": [
            "words = ['This', 'is', 'a', 'list']",
            "total = ''",
            "for word in words:",
            "    total += word",
            "",
            "print(total)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Thisisalist\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "strings_sum"
    },
    {
        "get_solution": [
            "total = ''",
            "not_first = False",
            "",
            "for word in words:",
            "    if not_first:",
            "        total += separator",
            "    total += word",
            "    not_first = True",
            "",
            "print(total)"
        ],
        "page": "Introducing Lists",
        "program": [
            "words = ['This', 'is', 'a', 'list']",
            "separator = ' - '",
            "total = ''",
            "not_first = False",
            "",
            "for word in words:",
            "    if not_first:",
            "        total += separator",
            "    total += word",
            "    not_first = True",
            "",
            "print(total)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "This - is - a - list\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "strings_sum_bonus"
    },
    {
        "get_solution": [
            "double = []",
            "for number in numbers:",
            "    double += [number * 2]",
            "print(double)"
        ],
        "page": "Building New Lists",
        "program": [
            "numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]",
            "double = []",
            "for number in numbers:",
            "    double += [number * 2]",
            "print(double)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[6, 2, 8, 2, 10, 18, 4, 12, 10]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "double_numbers"
    },
    {
        "get_solution": [
            "big_numbers = []",
            "for number in numbers:",
            "    if number > 5:",
            "        big_numbers.append(number)",
            "print(big_numbers)"
        ],
        "page": "Building New Lists",
        "program": [
            "numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]",
            "big_numbers = []",
            "for number in numbers:",
            "    if number > 5:",
            "        big_numbers.append(number)",
            "print(big_numbers)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[9, 6]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "filter_numbers"
    },
    {
        "get_solution": [
            "found = False",
            "for thing in things:",
            "    if thing == thing_to_find:",
            "        found = True",
            "",
            "print(found)"
        ],
        "page": "Using <code>break</code> to end a loop early",
        "program": [
            "things = ['This', 'is', 'a', 'list']",
            "thing_to_find = 'is'",
            "found = False",
            "for thing in things:",
            "    if thing == thing_to_find:",
            "        found = True",
            "",
            "print(found)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "list_contains_exercise"
    },
    {
        "page": "Getting elements at a position, <code>range()</code>, and <code>len()</code>",
        "program": [
            "words = ['This', 'is', 'a', 'list']",
            "",
            "print(words[0])",
            "print(words[1])",
            "print(words[2])",
            "print(words[3])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "This\nis\na\nlist\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_subscripting"
    },
    {
        "page": "Getting elements at a position, <code>range()</code>, and <code>len()</code>",
        "program": [
            "words[4]"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "list index out of range",
                                "type": "IndexError"
                            },
                            "frames": [
                                {
                                    "lines": [
                                        {
                                            "content": "<span class=\"n n-ExecutingNode\">words</span><span class=\"p p-ExecutingNode\">[</span><span class=\"mi mi-ExecutingNode\">4</span><span class=\"p p-ExecutingNode\">]</span>",
                                            "is_current": true,
                                            "lineno": 1,
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">words</span>\n",
                                            "value": "<span class=\"p\">[</span><span class=\"s1\">&#39;This&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;is&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;list&#39;</span><span class=\"p\">]</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>An <code>IndexError</code> occurs when you try to get an item from a list,\na tuple, or a similar object (sequence), and use an index which\ndoes not exist; typically, this happens because the index you give\nis greater than the length of the sequence.</p>\n<p>You have tried to get the item with index <code>4</code> of <code>words</code>,\na <code>list</code> of length <code>4</code>.\nThe valid index values of <code>words</code> are integers ranging from\n<code>-4</code> to <code>3</code>.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"my_program.py\", line 1, in <module>",
                        "-->    1 | words[4]",
                        "           ^^^^^^^^",
                        "words = ['This', 'is', 'a', 'list']",
                        "",
                        "IndexError: list index out of range"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "index_error"
    },
    {
        "page": "Getting elements at a position, <code>range()</code>, and <code>len()</code>",
        "program": [
            "for i in range(10):",
            "    print(i)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_len_and_range"
    },
    {
        "page": "Getting elements at a position, <code>range()</code>, and <code>len()</code>",
        "program": [
            "words = ['This', 'is', 'a', 'list']",
            "",
            "for index in range(len(words)):",
            "    print(index)",
            "    print(words[index])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "0\nThis\n1\nis\n2\na\n3\nlist",
                "choices": [
                    "This\nis\na\nlist",
                    "0\n1\n2\n3",
                    "0\nThis\n1\nis\n2\na\n3\nlist",
                    "This\n0\nis\n1\na\n2\nlist\n3",
                    "0\n1\n2\n3\nThis\nis\na\nlist",
                    "This\nis\na\nlist\n0\n1\n2\n3",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "0\nThis\n1\nis\n2\na\n3\nlist\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "range_len"
    },
    {
        "page": "Getting elements at a position, <code>range()</code>, and <code>len()</code>",
        "program": [
            "things = ['on', 'the', 'way', 'to', 'the', 'store']",
            "to_find = 'the'",
            "for i in range(len(things)):",
            "    if to_find == things[i]:",
            "        print(i)"
        ],
        "response": {
            "message": "<p>You're almost there! However, this prints all the indices,\nnot just the first one.</p>",
            "passed": false,
            "result": [
                {
                    "text": "1\n4\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "index_exercise"
    },
    {
        "page": "Getting elements at a position, <code>range()</code>, and <code>len()</code>",
        "program": [
            "things = ['on', 'the', 'way', 'to', 'the', 'store']",
            "to_find = 'the'",
            "answer = None",
            "for i in range(len(things)):",
            "    if to_find == things[i]:",
            "        answer = i",
            "print(answer)"
        ],
        "response": {
            "message": "<p>You're almost there! However, this prints the <em>last</em> index,\nnot the first one.</p>",
            "passed": false,
            "result": [
                {
                    "text": "4\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "index_exercise"
    },
    {
        "get_solution": [
            "for i in range(len(things)):",
            "    if to_find == things[i]:",
            "        print(i)",
            "        break"
        ],
        "page": "Getting elements at a position, <code>range()</code>, and <code>len()</code>",
        "program": [
            "things = ['on', 'the', 'way', 'to', 'the', 'store']",
            "to_find = 'the'",
            "for i in range(len(things)):",
            "    if to_find == things[i]:",
            "        print(i)",
            "        break"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "1\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "index_exercise"
    },
    {
        "get_solution": [
            "for i in range(len(string1)):",
            "    char1 = string1[i]",
            "    char2 = string2[i]",
            "    print(char1 + ' ' + char2)"
        ],
        "page": "Getting elements at a position, <code>range()</code>, and <code>len()</code>",
        "program": [
            "string1 = 'Hello'",
            "string2 = 'World'",
            "for i in range(len(string1)):",
            "    char1 = string1[i]",
            "    char2 = string2[i]",
            "    print(char1 + ' ' + char2)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "H W\ne o\nl r\nl l\no d\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "zip_exercise"
    },
    {
        "get_solution": [
            "length1 = len(string1)",
            "length2 = len(string2)",
            "",
            "if length1 > length2:",
            "    length = length1",
            "else:",
            "    length = length2",
            "",
            "for i in range(length):",
            "    if i < len(string1):",
            "        char1 = string1[i]",
            "    else:",
            "        char1 = ' '",
            "",
            "    if i < len(string2):",
            "        char2 = string2[i]",
            "    else:",
            "        char2 = ' '",
            "",
            "    print(char1 + ' ' + char2)"
        ],
        "page": "Getting elements at a position, <code>range()</code>, and <code>len()</code>",
        "program": [
            "string1 = 'Goodbye'",
            "string2 = 'World'",
            "length1 = len(string1)",
            "length2 = len(string2)",
            "",
            "if length1 > length2:",
            "    length = length1",
            "else:",
            "    length = length2",
            "",
            "for i in range(length):",
            "    if i < len(string1):",
            "        char1 = string1[i]",
            "    else:",
            "        char1 = ' '",
            "",
            "    if i < len(string2):",
            "        char2 = string2[i]",
            "    else:",
            "        char2 = ' '",
            "",
            "    print(char1 + ' ' + char2)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "G W\no o\no r\nd l\nb d\ny  \ne  \n",
                    "type": "stdout"
                }
            ]
        },
        "step": "zip_longest_exercise"
    },
    {
        "page": "Terminology: Calling functions and methods",
        "program": [
            "print(len)",
            "print(print)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "<built-in function len>\n<built-in function print>\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "print_functions"
    },
    {
        "page": "Terminology: Calling functions and methods",
        "program": [
            "print(callable(len))"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_callable"
    },
    {
        "page": "Terminology: Calling functions and methods",
        "program": [
            "f = 'a string'",
            "print(callable(f))",
            "f()"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "False\n",
                    "type": "stdout"
                },
                {
                    "data": [
                        {
                            "didyoumean": [
                                "'str[value]'"
                            ],
                            "exception": {
                                "message": "'str' object is not callable",
                                "type": "TypeError"
                            },
                            "frames": [
                                {
                                    "lines": [
                                        {
                                            "content": "<span class=\"n n-ExecutingNode\">f</span><span class=\"p p-ExecutingNode\">()</span>",
                                            "is_current": true,
                                            "lineno": 3,
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">f</span>\n",
                                            "value": "<span class=\"s1\">&#39;a string&#39;</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>A <code>TypeError</code> is usually caused by trying\nto combine two incompatible types of objects,\nby calling a function with the wrong type of object,\nor by trying to do an operation not allowed on a given type of object.</p>\n<p>The parenthesis <code>()</code> following <code>f</code> are interpreted\nby Python as a function call for <code>f</code>.\nHowever, <code>f</code> is not a function but an object of type <code>str</code>.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"my_program.py\", line 3, in <module>",
                        "       2 | print(callable(f))",
                        "-->    3 | f()",
                        "           ^^^",
                        "f = 'a string'",
                        "",
                        "TypeError: 'str' object is not callable"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "not_callable"
    },
    {
        "page": "Terminology: Calling functions and methods",
        "program": [
            "things = [1, 2, 3]",
            "length = len(things)",
            "printed = print(length)",
            "print(printed)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "3\nNone\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "print_returns_none"
    },
    {
        "page": "Terminology: Calling functions and methods",
        "program": [
            "things = print([1, 2, 3])",
            "length = len(things)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[1, 2, 3]\n",
                    "type": "stdout"
                },
                {
                    "data": [
                        {
                            "didyoumean": [
                                "implement \"__len__\" on NoneType"
                            ],
                            "exception": {
                                "message": "object of type 'NoneType' has no len()",
                                "type": "TypeError"
                            },
                            "frames": [
                                {
                                    "lines": [
                                        {
                                            "content": "<span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"nb nb-ExecutingNode\">len</span><span class=\"p p-ExecutingNode\">(</span><span class=\"n n-ExecutingNode\">things</span><span class=\"p p-ExecutingNode\">)</span>",
                                            "is_current": true,
                                            "lineno": 2,
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">things</span>\n",
                                            "value": "<span class=\"kc\">None</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>A <code>TypeError</code> is usually caused by trying\nto combine two incompatible types of objects,\nby calling a function with the wrong type of object,\nor by trying to do an operation not allowed on a given type of object.</p>\n<p>No information is known about this exception.\nPlease report this example to\nhttps://github.com/friendly-traceback/friendly-traceback/issues/new\nIf you are using a REPL, use <code>www('bug')</code> to do so.</p>\n<p>If you are using the Friendly console, use <code>www()</code> to\ndo an Internet search for this particular case.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"my_program.py\", line 2, in <module>",
                        "       1 | things = print([1, 2, 3])",
                        "-->    2 | length = len(things)",
                        "                    ^^^^^^^^^^^",
                        "things = None",
                        "",
                        "TypeError: object of type 'NoneType' has no len()"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "len_of_none"
    },
    {
        "page": "Terminology: Calling functions and methods",
        "program": [
            "word = 'Hello'",
            "print(word.upper)",
            "print(word.upper())"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "<built-in method upper of str object at 0xABC>\nHELLO\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "methods_of_str"
    },
    {
        "page": "Terminology: Calling functions and methods",
        "program": [
            "word = 'Hello'",
            "word.append('!')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "'str' object has no attribute 'append'",
                                "type": "AttributeError"
                            },
                            "frames": [
                                {
                                    "lines": [
                                        {
                                            "content": "<span class=\"n n-ExecutingNode\">word</span><span class=\"o o-ExecutingNode\">.</span><span class=\"n n-ExecutingNode\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39;!&#39;</span><span class=\"p\">)</span>",
                                            "is_current": true,
                                            "lineno": 2,
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">word</span>\n",
                                            "value": "<span class=\"s1\">&#39;Hello&#39;</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>An <code>AttributeError</code> occurs when the code contains something like\n    <code>object.x</code>\nand <code>x</code> is not a method or attribute (variable) belonging to <code>object</code>.</p>\n<p>The object <code>word</code> has no attribute named <code>append</code>.\nThe following are some of its known attributes:\n<code>capitalize, casefold, center, count, encode, endswith, expandtabs, find, format, ...</code>.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"my_program.py\", line 2, in <module>",
                        "       1 | word = 'Hello'",
                        "-->    2 | word.append('!')",
                        "           ^^^^^^^^^^^",
                        "word = 'Hello'",
                        "",
                        "AttributeError: 'str' object has no attribute 'append'"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "no_append_for_str"
    },
    {
        "page": "Functions and Methods for Lists",
        "program": [
            "nums = [1, 2, 3]",
            "new_nums = nums + [4, 5]",
            "print(new_nums)",
            "print(nums)",
            "nums.append(4)",
            "print(nums)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[1, 2, 3, 4, 5]\n[1, 2, 3]\n[1, 2, 3, 4]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "append_vs_concatenate"
    },
    {
        "page": "Functions and Methods for Lists",
        "program": [
            "nums = [1, 2, 3]",
            "nums[1] = 9",
            "print(nums)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "[1, 9, 3]",
                "choices": [
                    "[9, 1, 2, 3]",
                    "[1, 9, 2, 3]",
                    "[1, 2, 9, 3]",
                    "[9, 2, 3]",
                    "[1, 9, 3]",
                    "[1, 2, 9]",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "[1, 9, 3]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "subscript_assignment_predict"
    },
    {
        "page": "Functions and Methods for Lists",
        "program": [
            "[7, 8, 9, 8].index(8)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "1",
                "choices": [
                    "[7, 8]",
                    "[7, 8, 9]",
                    "[7, 8, 9, 8]",
                    "1",
                    "2",
                    "3",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "1\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "index_predict_exercise"
    },
    {
        "page": "Functions and Methods for Lists",
        "program": [
            "nums = [1, 2, 3]",
            "print(nums.pop(1))",
            "print(nums)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "2\n[1, 3]",
                "choices": [
                    "1\n[1, 3]",
                    "2\n[1, 3]",
                    "1\n[2, 3]",
                    "2\n[2, 3]",
                    "1\n[2, 1, 3]",
                    "2\n[2, 1, 3]",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "2\n[1, 3]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "pop_predict_exercise"
    },
    {
        "page": "Functions and Methods for Lists",
        "program": [
            "nums = [1, 2, 3]",
            "nums.remove(1)",
            "print(nums)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "[2, 3]",
                "choices": [
                    "[1, 2]",
                    "[1, 3]",
                    "[2, 3]",
                    "1",
                    "2",
                    "3",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "[2, 3]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "remove_predict_exercise"
    },
    {
        "get_solution": [
            "x = ['a', 'b', 'c']",
            "x.append(x.pop(0))",
            "print(x)"
        ],
        "page": "Functions and Methods for Lists",
        "program": [
            "x = ['a', 'b', 'c']",
            "x.append(x.pop(0))",
            "print(x)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "['b', 'c', 'a']\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "pop_remove_index_subscript_assignment"
    },
    {
        "get_solution": [
            "x = ['a', 'b', 'c']",
            "x[len(x) - 1] = x[0]",
            "print(x)"
        ],
        "page": "Functions and Methods for Lists",
        "program": [
            "x = ['a', 'b', 'c']",
            "x[len(x) - 1] = x[0]",
            "print(x)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "['a', 'b', 'a']\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "subscript_assignment_exercise"
    },
    {
        "get_solution": [
            "x = ['a', 'b', 'c']",
            "y = x + [x[0]]",
            "print(y)"
        ],
        "page": "Functions and Methods for Lists",
        "program": [
            "x = ['a', 'b', 'c']",
            "y = x + [x[0]]",
            "print(y)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "['a', 'b', 'c', 'a']\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "negative_index_concatenation_exercise"
    },
    {
        "get_solution": [
            "x = [1, 2, 0, 3]",
            "x.pop(x.index(0))",
            "print(x)"
        ],
        "page": "Functions and Methods for Lists",
        "program": [
            "x = [1, 2, 0, 3]",
            "x.pop(x.index(0))",
            "print(x)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[1, 2, 3]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "remove_exercise"
    },
    {
        "page": "More List Functions and Methods",
        "program": [
            "sorted([2, 9, 1, 8, 5, 6])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "[1, 2, 5, 6, 8, 9]",
                "choices": [
                    "[9, 8, 6, 5, 2, 1]",
                    "[1, 8, 6, 2, 5, 9]",
                    "[1, 2, 5, 6, 8, 9]",
                    "[2, 9, 1, 8, 5, 6]",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "[1, 2, 5, 6, 8, 9]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "sorted_predict_exercise"
    },
    {
        "page": "More List Functions and Methods",
        "program": [
            "nums = [2, 9, 1, 8, 5, 64]",
            "print(7 in nums)",
            "print(2 in nums)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "False\nTrue",
                "choices": [
                    "True\nFalse",
                    "False\nTrue",
                    "True\nTrue",
                    "False\nFalse",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "False\nTrue\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "in_predict_exercise"
    },
    {
        "page": "More List Functions and Methods",
        "program": [
            "sum([5, 3, 4])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "12",
                "choices": [
                    "10",
                    "12",
                    "7",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "12\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "sum_predict_exercise"
    },
    {
        "page": "More List Functions and Methods",
        "program": [
            "[1, 2, 3, 2, 7, 2, 5].count(2)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "3",
                "choices": [
                    "0",
                    "1",
                    "2",
                    "3",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "3\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "count_predict_exercise"
    },
    {
        "get_solution": [
            "x = [1, 2, 0, 3]",
            "y = x.count(1) > 0",
            "print(y)"
        ],
        "page": "More List Functions and Methods",
        "program": [
            "x = [1, 2, 0, 3]",
            "y = x.count(1) > 0",
            "print(y)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "count_in_sorted_sum"
    },
    {
        "get_solution": [
            "x = [15, 12, -6, 3]",
            "y = sum(x) / len(x)",
            "print(y)"
        ],
        "page": "More List Functions and Methods",
        "program": [
            "x = [15, 12, -6, 3]",
            "y = sum(x) / len(x)",
            "print(y)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "6.0\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "average_exercise"
    },
    {
        "get_solution": [
            "x = 100",
            "y = sum(range(x + 1))",
            "print(y)"
        ],
        "page": "More List Functions and Methods",
        "program": [
            "x = 100",
            "y = sum(range(x + 1))",
            "print(y)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "5050\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "sum_range_exercise"
    },
    {
        "get_solution": [
            "x = [12, -6, 2, -1, 3]",
            "y = sorted(x)[1]",
            "print(y)"
        ],
        "page": "More List Functions and Methods",
        "program": [
            "x = [12, -6, 2, -1, 3]",
            "y = sorted(x)[1]",
            "print(y)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "-1\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "second_smallest_in_list_exercise"
    },
    {
        "page": "String Methods and Immutability",
        "program": [
            "print('the' in 'feed the dog and the cat')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "string_in_step"
    },
    {
        "page": "String Methods and Immutability",
        "program": [
            "string = 'feed the dog and the cat'",
            "print(string.count('the'))",
            "print(string.index('the'))"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "2\n5\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "string_count_index"
    },
    {
        "page": "String Methods and Immutability",
        "program": [
            "'Python'.append(' is cool!')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "'str' object has no attribute 'append'",
                                "type": "AttributeError"
                            },
                            "frames": [
                                {
                                    "lines": [
                                        {
                                            "content": "<span class=\"s1 s1-ExecutingNode\">&#39;Python&#39;</span><span class=\"o o-ExecutingNode\">.</span><span class=\"n n-ExecutingNode\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39; is cool!&#39;</span><span class=\"p\">)</span>",
                                            "is_current": true,
                                            "lineno": 1,
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": []
                                }
                            ],
                            "friendly": "<p>An <code>AttributeError</code> occurs when the code contains something like\n    <code>object.x</code>\nand <code>x</code> is not a method or attribute (variable) belonging to <code>object</code>.</p>\n<p>The object <code>'Python'</code> has no attribute named <code>append</code>.\nThe following are some of its known attributes:\n<code>capitalize, casefold, center, count, encode, endswith, expandtabs, find, format, ...</code>.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"my_program.py\", line 1, in <module>",
                        "-->    1 | 'Python'.append(' is cool!')",
                        "           ^^^^^^^^^^^^^^^",
                        "",
                        "AttributeError: 'str' object has no attribute 'append'"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "mutation_string_append"
    },
    {
        "page": "String Methods and Immutability",
        "program": [
            "sentence = \"Python rocks!\"",
            "new_sentence = sentence.upper()",
            "print(sentence)",
            "print(new_sentence)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Python rocks!\nPYTHON ROCKS!\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "string_lower_upper"
    },
    {
        "get_solution": [
            "max([21, 55, 4, 91, 62, 49])"
        ],
        "page": "How to Find Information with Google, and more",
        "program": [
            "max([21, 55, 4, 91, 62, 49])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "91\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "sum_list"
    },
    {
        "get_solution": [
            "nums = [1, 2, 3, 4, 5]",
            "nums.insert(2, 9)",
            "print(nums)"
        ],
        "page": "How to Find Information with Google, and more",
        "program": [
            "nums = [1, 2, 3, 4, 5]",
            "nums.insert(2, 9)",
            "print(nums)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[1, 2, 9, 3, 4, 5]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "list_insert"
    },
    {
        "page": "How to Find Information with Google, and more",
        "program": [
            "dir([])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "['__add__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "dir_list"
    },
    {
        "page": "Understanding Programs With Python Tutor",
        "program": [
            "all_numbers = [2, 4, 8, 1, 9, 7]",
            "",
            "small_numbers = []",
            "big_numbers = []",
            "",
            "for number in all_numbers:",
            "    if number <= 5:",
            "        small_numbers.append(number)",
            "    else:",
            "        big_numbers.append(number)",
            "",
            "print(small_numbers)",
            "print(big_numbers)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[2, 4, 1]\n[8, 9, 7]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "run_with_python_tutor"
    },
    {
        "page": "<code>==</code> vs <code>is</code>, and Having Multiple Names for One Value",
        "program": [
            "list1 = [1, 2, 3]",
            "list2 = [1, 2, 3]",
            "",
            "print(list1)",
            "print(list2)",
            "print(list1 == list2)",
            "",
            "print(list1 is list2)",
            "",
            "list1.append(4)",
            "",
            "print(list1)",
            "print(list2)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[1, 2, 3]\n[1, 2, 3]\nTrue\nFalse\n[1, 2, 3, 4]\n[1, 2, 3]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "two_separate_lists"
    },
    {
        "page": "<code>==</code> vs <code>is</code>, and Having Multiple Names for One Value",
        "program": [
            "list1 = [1, 2, 3]",
            "list2 = list1",
            "",
            "print(list1)",
            "print(list2)",
            "print(list1 == list2)",
            "",
            "print(list1 is list2)",
            "",
            "list1.append(4)",
            "",
            "print(list1)",
            "print(list2)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[1, 2, 3]\n[1, 2, 3]\nTrue\nTrue\n[1, 2, 3, 4]\n[1, 2, 3, 4]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "same_list"
    },
    {
        "page": "Modifying While Iterating",
        "program": [
            "numbers = [10, 7, 8, 3, 12, 15]",
            "for i in range(len(numbers)):",
            "    number = numbers[i]",
            "    if number <= 10:",
            "        numbers.pop(i)",
            "print(numbers)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "list index out of range",
                                "type": "IndexError"
                            },
                            "frames": [
                                {
                                    "lines": [
                                        {
                                            "content": "<span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n n-ExecutingNode\">numbers</span><span class=\"p p-ExecutingNode\">[</span><span class=\"n n-ExecutingNode\">i</span><span class=\"p p-ExecutingNode\">]</span>",
                                            "is_current": true,
                                            "lineno": 3,
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"n\">i</span>\n",
                                            "value": "<span class=\"mi\">4</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">)</span>\n",
                                            "value": "<span class=\"mi\">4</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"n\">number</span>\n",
                                            "value": "<span class=\"mi\">15</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"n\">number</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">10</span>\n",
                                            "value": "<span class=\"kc\">False</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"n\">numbers</span>\n",
                                            "value": "<span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">))</span>\n",
                                            "value": "<span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>An <code>IndexError</code> occurs when you try to get an item from a list,\na tuple, or a similar object (sequence), and use an index which\ndoes not exist; typically, this happens because the index you give\nis greater than the length of the sequence.</p>\n<p>You have tried to get the item with index <code>4</code> of <code>numbers</code>,\na <code>list</code> of length <code>4</code>.\nThe valid index values of <code>numbers</code> are integers ranging from\n<code>-4</code> to <code>3</code>.</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"my_program.py\", line 3, in <module>",
                        "       2 | for i in range(len(numbers)):",
                        "-->    3 |     number = numbers[i]",
                        "                        ^^^^^^^^^^",
                        "i = 4",
                        "len(numbers) = 4",
                        "number = 15",
                        "number <= 10 = False",
                        "numbers = [7, 3, 12, 15]",
                        "range(len(numbers)) = range(0, 4)",
                        "",
                        "IndexError: list index out of range"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "run_broken_with_python_tutor"
    },
    {
        "page": "Modifying While Iterating",
        "program": [
            "numbers = [10, 7, 8, 3, 12, 15]",
            "for number in numbers:",
            "    if number <= 10:",
            "        numbers.remove(number)",
            "print(numbers)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[7, 3, 12, 15]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "remove_instead_of_pop"
    },
    {
        "page": "Modifying While Iterating",
        "program": [
            "numbers = [10, 7, 8, 3, 12, 15]",
            "for number in numbers.copy():",
            "    if number <= 10:",
            "        numbers.remove(number)",
            "print(numbers)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[12, 15]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "make_copy"
    },
    {
        "page": "Modifying While Iterating",
        "program": [
            "numbers = [10, 7, 8, 3, 12, 15]",
            "big_numbers = numbers.copy()",
            "",
            "for number in numbers:",
            "    if number <= 10:",
            "        big_numbers.remove(number)",
            "print(big_numbers)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[12, 15]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "make_copy2"
    },
    {
        "page": "Modifying While Iterating",
        "program": [
            "numbers = [10, 7, 8, 3, 12, 15]",
            "big_numbers = []",
            "",
            "for number in numbers:",
            "    if number > 10:",
            "        big_numbers.append(number)",
            "print(big_numbers)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[12, 15]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "make_new_list"
    },
    {
        "page": "Single and Double Quotes in Strings",
        "program": [
            "print('Alice's Diner')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "    print('Alice's Diner')\n                 ^\nSyntaxError: invalid syntax\nat line 1\n\nA `SyntaxError` occurs when Python cannot understand your code.\n\nThere appears to be a Python identifier (variable name)\nimmediately following a string.\nI suspect that you were trying to use a quote inside a string\nthat was enclosed in quotes of the same kind.\n\n\n",
                    "type": "syntax_error"
                }
            ]
        },
        "step": "single_quotes_apostrophe"
    },
    {
        "page": "Single and Double Quotes in Strings",
        "program": [
            "print(\"Alice's Diner\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Alice's Diner\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "double_quotes"
    },
    {
        "page": "Single and Double Quotes in Strings",
        "program": [
            "'Alice' == \"Alice\""
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "True",
                "choices": [
                    "True",
                    "False",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "single_double_quotes_equal"
    },
    {
        "get_solution": [
            "print(\"Special cases aren't special enough to break the rules.\")"
        ],
        "page": "Single and Double Quotes in Strings",
        "program": [
            "print(\"Special cases aren't special enough to break the rules.\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Special cases aren't special enough to break the rules.\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "double_quote_exercise"
    },
    {
        "get_solution": [
            "print('\"Talk is cheap. Show me the code.\" - Linus Torvalds')"
        ],
        "page": "Single and Double Quotes in Strings",
        "program": [
            "print('\"Talk is cheap. Show me the code.\" - Linus Torvalds')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "\"Talk is cheap. Show me the code.\" - Linus Torvalds\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "single_quote_exercise"
    },
    {
        "page": "f-strings",
        "program": [
            "name = \"Alice\"",
            "friend = 'Bob'",
            "meal = \"lunch\"",
            "print(f\"{name} went to {meal} with {friend}.\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Alice went to lunch with Bob.",
                "choices": [
                    "f\"{name} went to {meal} with {friend}.\"",
                    "\"{name} went to {meal} with {friend}.\"",
                    "{name} went to {meal} with {friend}.",
                    "'name' went to 'meal' with 'friend'.",
                    "name went to meal with friend.",
                    "\"Alice\" went to \"lunch\" with 'Bob'.",
                    "'Alice' went to 'lunch' with 'Bob'.",
                    "\"Alice went to lunch with Bob.\"",
                    "Alice went to lunch with Bob.",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "Alice went to lunch with Bob.\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introduce_f_strings"
    },
    {
        "page": "f-strings",
        "program": [
            "name = \"Alice\"",
            "age = 20",
            "print(\"Hello \" + name + \". You are \" + age + \" years old.\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Error",
                "choices": [
                    "\"Hello \" + name + \". You are \" + age + \" years old.\"",
                    "Hello name. You are age years old.",
                    "Hello Alice. You are 20 years old.",
                    "Hello 'Alice'. You are 20 years old.",
                    "Error"
                ]
            },
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "can only concatenate str (not \"int\") to str",
                                "type": "TypeError"
                            },
                            "frames": [
                                {
                                    "lines": [
                                        {
                                            "content": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2 s2-ExecutingNode\">&quot;Hello &quot;</span><span class=\" -ExecutingNode\"> </span><span class=\"o o-ExecutingNode\">+</span><span class=\" -ExecutingNode\"> </span><span class=\"n n-ExecutingNode\">name</span><span class=\" -ExecutingNode\"> </span><span class=\"o o-ExecutingNode\">+</span><span class=\" -ExecutingNode\"> </span><span class=\"s2 s2-ExecutingNode\">&quot;. You are &quot;</span><span class=\" -ExecutingNode\"> </span><span class=\"o o-ExecutingNode\">+</span><span class=\" -ExecutingNode\"> </span><span class=\"n n-ExecutingNode\">age</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; years old.&quot;</span><span class=\"p\">)</span>",
                                            "is_current": true,
                                            "lineno": 3,
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": [
                                        {
                                            "name": "<span class=\"s2\">&quot;Hello &quot;</span> <span class=\"o\">+</span> <span class=\"n\">name</span>\n",
                                            "value": "<span class=\"s1\">&#39;Hello Alice&#39;</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"s2\">&quot;Hello &quot;</span> <span class=\"o\">+</span> <span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;. You are &quot;</span>\n",
                                            "value": "<span class=\"s1\">&#39;Hello Alice. You are &#39;</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"n\">age</span>\n",
                                            "value": "<span class=\"mi\">20</span>\n"
                                        },
                                        {
                                            "name": "<span class=\"n\">name</span>\n",
                                            "value": "<span class=\"s1\">&#39;Alice&#39;</span>\n"
                                        }
                                    ]
                                }
                            ],
                            "friendly": "<p>A <code>TypeError</code> is usually caused by trying\nto combine two incompatible types of objects,\nby calling a function with the wrong type of object,\nor by trying to do an operation not allowed on a given type of object.</p>\n<p>You tried to concatenate (add) two different types of objects:\na string (<code>str</code>) and an integer (<code>int</code>).</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"my_program.py\", line 3, in <module>",
                        "       2 | age = 20",
                        "-->    3 | print(\"Hello \" + name + \". You are \" + age + \" years old.\")",
                        "                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
                        "\"Hello \" + name = 'Hello Alice'",
                        "\"Hello \" + name + \". You are \" = 'Hello Alice. You are '",
                        "age = 20",
                        "name = 'Alice'",
                        "",
                        "TypeError: can only concatenate str (not \"int\") to str"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "concatenate_string_number"
    },
    {
        "get_solution": [
            "name = \"Alice\"",
            "age = 20",
            "print(f'Hello {name}. You are {age} years old.')"
        ],
        "page": "f-strings",
        "program": [
            "name = \"Alice\"",
            "age = 20",
            "print(f'Hello {name}. You are {age} years old.')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Hello Alice. You are 20 years old.\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "basic_f_string_exercise"
    },
    {
        "page": "f-strings",
        "program": [
            "f\"2 * 3 + 4 is equal to {2 * 3 + 4}\""
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "'2 * 3 + 4 is equal to 10'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "eval_expr_inside_f_string"
    },
    {
        "get_solution": [
            "print(f\"There are {len(people)} people waiting, the first one's name is {people[0]}.\")"
        ],
        "page": "f-strings",
        "program": [
            "people = ['Alice', 'Bob', 'Charlie']",
            "print(f\"There are {len(people)} people waiting, the first one's name is {people[0]}.\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "There are 3 people waiting, the first one's name is Alice.\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "fix_broken_program"
    },
    {
        "page": "Introducing Nested Loops",
        "program": [
            "for letter in \"ABC\":",
            "    print(letter)",
            "    for number in range(4):",
            "        print(f'{letter} {number}')",
            "    print('---')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "A\nA 0\nA 1\nA 2\nA 3\n---\nB\nB 0\nB 1\nB 2\nB 3\n---\nC\nC 0\nC 1\nC 2\nC 3\n---",
                "choices": [
                    "A 0\nA 1\nA 2\nA 3\n---\nB 0\nB 1\nB 2\nB 3\n---\nC 0\nC 1\nC 2\nC 3\n---",
                    "A\nA 0\nA 1\nA 2\nA 3\n---\nB\nB 0\nB 1\nB 2\nB 3\n---\nC\nC 0\nC 1\nC 2\nC 3\n---",
                    "A 1\nA 2\nA 3\nA 4\n---\nB 1\nB 2\nB 3\nB 4\n---\nC 1\nC 2\nC 3\nC 4\n---",
                    "A\nB\nC\n---\nA 0\nB 0\nC 0\n---\nA 1\nB 1\nC 1\n---\nA 2\nB 2\nC 2\n---\nA 3\nB 3\nC 3",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "A\nA 0\nA 1\nA 2\nA 3\n---\nB\nB 0\nB 1\nB 2\nB 3\n---\nC\nC 0\nC 1\nC 2\nC 3\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_nested_loop"
    },
    {
        "page": "Introducing Nested Loops",
        "program": [
            "print(1 + \"x\")"
        ],
        "response": {
            "message": "<p>You can't add together strings and numbers. Use an f-string.</p>",
            "passed": false,
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "unsupported operand type(s) for +: 'int' and 'str'",
                                "type": "TypeError"
                            },
                            "frames": [
                                {
                                    "lines": [
                                        {
                                            "content": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi mi-ExecutingNode\">1</span><span class=\" -ExecutingNode\"> </span><span class=\"o o-ExecutingNode\">+</span><span class=\" -ExecutingNode\"> </span><span class=\"s2 s2-ExecutingNode\">&quot;x&quot;</span><span class=\"p\">)</span>",
                                            "is_current": true,
                                            "lineno": 1,
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": []
                                }
                            ],
                            "friendly": "<p>A <code>TypeError</code> is usually caused by trying\nto combine two incompatible types of objects,\nby calling a function with the wrong type of object,\nor by trying to do an operation not allowed on a given type of object.</p>\n<p>You tried to add two incompatible types of objects:\nan integer (<code>int</code>) and a string (<code>str</code>).</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"my_program.py\", line 1, in <module>",
                        "-->    1 | print(1 + \"x\")",
                        "                 ^^^^^^^",
                        "",
                        "TypeError: unsupported operand type(s) for +: 'int' and 'str'"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "times_table_exercise"
    },
    {
        "page": "Introducing Nested Loops",
        "program": [
            "for left in range(12):",
            "    for right in range(12):",
            "        left += 1",
            "        right += 1",
            "        print(f'{left} x {right} = {left * right}')",
            "    print('----------')"
        ],
        "response": {
            "message": "<p>You added 1 to your outer loop variable at the wrong place!\nWhere should you do that instead to fix it?</p>",
            "passed": false,
            "result": [
                {
                    "text": "1 x 1 = 1\n2 x 2 = 4\n3 x 3 = 9\n4 x 4 = 16\n5 x 5 = 25\n6 x 6 = 36\n7 x 7 = 49\n8 x 8 = 64\n9 x 9 = 81\n10 x 10 = 100\n11 x 11 = 121\n12 x 12 = 144\n----------\n2 x 1 = 2\n3 x 2 = 6\n4 x 3 = 12\n5 x 4 = 20\n6 x 5 = 30\n7 x 6 = 42\n8 x 7 = 56\n9 x 8 = 72\n10 x 9 = 90\n11 x 10 = 110\n12 x 11 = 132\n13 x 12 = 156\n----------\n3 x 1 = 3\n4 x 2 = 8\n5 x 3 = 15\n6 x 4 = 24\n7 x 5 = 35\n8 x 6 = 48\n9 x 7 = 63\n10 x 8 = 80\n11 x 9 = 99\n12 x 10 = 120\n13 x 11 = 143\n14 x 12 = 168\n----------\n4 x 1 = 4\n5 x 2 = 10\n6 x 3 = 18\n7 x 4 = 28\n8 x 5 = 40\n9 x 6 = 54\n10 x 7 = 70\n11 x 8 = 88\n12 x 9 = 108\n13 x 10 = 130\n14 x 11 = 154\n15 x 12 = 180\n----------\n5 x 1 = 5\n6 x 2 = 12\n7 x 3 = 21\n8 x 4 = 32\n9 x 5 = 45\n10 x 6 = 60\n11 x 7 = 77\n12 x 8 = 96\n13 x 9 = 117\n14 x 10 = 140\n15 x 11 = 165\n16 x 12 = 192\n----------\n6 x 1 = 6\n7 x 2 = 14\n8 x 3 = 24\n9 x 4 = 36\n10 x 5 = 50\n11 x 6 = 66\n12 x 7 = 84\n13 x 8 = 104\n14 x 9 = 126\n15 x 10 = 150\n16 x 11 = 176\n17 x 12 = 204\n----------\n7 x 1 = 7\n8 x 2 = 16\n9 x 3 = 27\n10 x 4 = 40\n11 x 5 = 55\n12 x 6 = 72\n13 x 7 = 91",
                    "type": "stdout"
                },
                {
                    "text": "\n14 x 8 = 112\n15 x 9 = 135\n16 x 10 = 160\n17 x 11 = 187\n18 x 12 = 216\n----------\n8 x 1 = 8\n9 x 2 = 18\n10 x 3 = 30\n11 x 4 = 44\n12 x 5 = 60\n13 x 6 = 78\n14 x 7 = 98\n15 x 8 = 120\n16 x 9 = 144\n17 x 10 = 170\n18 x 11 = 198\n19 x 12 = 228\n----------\n9 x 1 = 9\n10 x 2 = 20\n11 x 3 = 33\n12 x 4 = 48\n13 x 5 = 65\n14 x 6 = 84\n15 x 7 = 105\n16 x 8 = 128\n17 x 9 = 153\n18 x 10 = 180\n19 x 11 = 209\n20 x 12 = 240\n----------\n10 x 1 = 10\n11 x 2 = 22\n12 x 3 = 36\n13 x 4 = 52\n14 x 5 = 70\n15 x 6 = 90\n16 x 7 = 112\n17 x 8 = 136\n18 x 9 = 162\n19 x 10 = 190\n20 x 11 = 220\n21 x 12 = 252\n----------\n11 x 1 = 11\n12 x 2 = 24\n13 x 3 = 39\n14 x 4 = 56\n15 x 5 = 75\n16 x 6 = 96\n17 x 7 = 119\n18 x 8 = 144\n19 x 9 = 171\n20 x 10 = 200\n21 x 11 = 231\n22 x 12 = 264\n----------\n12 x 1 = 12\n13 x 2 = 26\n14 x 3 = 42\n15 x 4 = 60\n16 x 5 = 80\n17 x 6 = 102\n18 x 7 = 126\n19 x 8 = 152\n20 x 9 = 180\n21 x 10 = 210\n22 x 11 = 242\n23 x 12 = 276\n----------\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "times_table_exercise"
    },
    {
        "page": "Introducing Nested Loops",
        "program": [
            "for left in range(12):",
            "    left += 1",
            "    print(left, 'x 1 =', left * 1)",
            "    print(left, 'x 2 =', left * 2)",
            "    print(left, 'x 3 =', left * 3)",
            "    print(left, 'x 4 =', left * 4)",
            "    print(left, 'x 5 =', left * 5)",
            "    print(left, 'x 6 =', left * 6)",
            "    print(left, 'x 7 =', left * 7)",
            "    print(left, 'x 8 =', left * 8)",
            "    print(left, 'x 9 =', left * 9)",
            "    print(left, 'x 10 =', left * 10)",
            "    print(left, 'x 11 =', left * 11)",
            "    print(left, 'x 12 =', left * 12)",
            "    print('----------')"
        ],
        "response": {
            "message": "<p>Your solution is too long. You only need a few lines of code for this problem.\nUse a nested loop so that you don't need to repeat yourself.\nThe computer will do the repetition for you!</p>",
            "passed": false,
            "result": [
                {
                    "text": "1 x 1 = 1\n1 x 2 = 2\n1 x 3 = 3\n1 x 4 = 4\n1 x 5 = 5\n1 x 6 = 6\n1 x 7 = 7\n1 x 8 = 8\n1 x 9 = 9\n1 x 10 = 10\n1 x 11 = 11\n1 x 12 = 12\n----------\n2 x 1 = 2\n2 x 2 = 4\n2 x 3 = 6\n2 x 4 = 8\n2 x 5 = 10\n2 x 6 = 12\n2 x 7 = 14\n2 x 8 = 16\n2 x 9 = 18\n2 x 10 = 20\n2 x 11 = 22\n2 x 12 = 24\n----------\n3 x 1 = 3\n3 x 2 = 6\n3 x 3 = 9\n3 x 4 = 12\n3 x 5 = 15\n3 x 6 = 18\n3 x 7 = 21\n3 x 8 = 24\n3 x 9 = 27\n3 x 10 = 30\n3 x 11 = 33\n3 x 12 = 36\n----------\n4 x 1 = 4\n4 x 2 = 8\n4 x 3 = 12\n4 x 4 = 16\n4 x 5 = 20\n4 x 6 = 24\n4 x 7 = 28\n4 x 8 = 32\n4 x 9 = 36\n4 x 10 = 40\n4 x 11 = 44\n4 x 12 = 48\n----------\n5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n5 x 10 = 50\n5 x 11 = 55\n5 x 12 = 60\n----------\n6 x 1 = 6\n6 x 2 = 12\n6 x 3 = 18\n6 x 4 = 24\n6 x 5 = 30\n6 x 6 = 36\n6 x 7 = 42\n6 x 8 = 48\n6 x 9 = 54\n6 x 10 = 60\n6 x 11 = 66\n6 x 12 = 72\n----------\n7 x 1 = 7\n7 x 2 = 14\n7 x 3 = 21\n7 x 4 = 28\n7 x 5 = 35\n7 x 6 = 42\n7 x 7 = 49\n7 x 8 = 56\n7 x 9 = 63\n7 x 10 = 70\n7 x 11 = 77\n7 x 12 = 84\n----------",
                    "type": "stdout"
                },
                {
                    "text": "\n8 x 1 = 8\n8 x 2 = 16\n8 x 3 = 24\n8 x 4 = 32\n8 x 5 = 40\n8 x 6 = 48\n8 x 7 = 56\n8 x 8 = 64\n8 x 9 = 72\n8 x 10 = 80\n8 x 11 = 88\n8 x 12 = 96\n----------\n9 x 1 = 9\n9 x 2 = 18\n9 x 3 = 27\n9 x 4 = 36\n9 x 5 = 45\n9 x 6 = 54\n9 x 7 = 63\n9 x 8 = 72\n9 x 9 = 81\n9 x 10 = 90\n9 x 11 = 99\n9 x 12 = 108\n----------\n10 x 1 = 10\n10 x 2 = 20\n10 x 3 = 30\n10 x 4 = 40\n10 x 5 = 50\n10 x 6 = 60\n10 x 7 = 70\n10 x 8 = 80\n10 x 9 = 90\n10 x 10 = 100\n10 x 11 = 110\n10 x 12 = 120\n----------\n11 x 1 = 11\n11 x 2 = 22\n11 x 3 = 33\n11 x 4 = 44\n11 x 5 = 55\n11 x 6 = 66\n11 x 7 = 77\n11 x 8 = 88\n11 x 9 = 99\n11 x 10 = 110\n11 x 11 = 121\n11 x 12 = 132\n----------\n12 x 1 = 12\n12 x 2 = 24\n12 x 3 = 36\n12 x 4 = 48\n12 x 5 = 60\n12 x 6 = 72\n12 x 7 = 84\n12 x 8 = 96\n12 x 9 = 108\n12 x 10 = 120\n12 x 11 = 132\n12 x 12 = 144\n----------\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "times_table_exercise"
    },
    {
        "page": "Introducing Nested Loops",
        "program": [
            "for left in range(12):",
            "    left += 1",
            "    for right in range(12):",
            "        right += 1",
            "        print(f'{left} * {right} = {left * right}')",
            "    print('----------')"
        ],
        "response": {
            "message": "<p>That's almost correct! Make sure to display the right character <code>x</code> in your table.\nFor example, your solution should display <code>3 x 4 = 12</code> and not <code>3 * 4 = 12</code>.</p>",
            "passed": false,
            "result": [
                {
                    "text": "1 * 1 = 1\n1 * 2 = 2\n1 * 3 = 3\n1 * 4 = 4\n1 * 5 = 5\n1 * 6 = 6\n1 * 7 = 7\n1 * 8 = 8\n1 * 9 = 9\n1 * 10 = 10\n1 * 11 = 11\n1 * 12 = 12\n----------\n2 * 1 = 2\n2 * 2 = 4\n2 * 3 = 6\n2 * 4 = 8\n2 * 5 = 10\n2 * 6 = 12\n2 * 7 = 14\n2 * 8 = 16\n2 * 9 = 18\n2 * 10 = 20\n2 * 11 = 22\n2 * 12 = 24\n----------\n3 * 1 = 3\n3 * 2 = 6\n3 * 3 = 9\n3 * 4 = 12\n3 * 5 = 15\n3 * 6 = 18\n3 * 7 = 21\n3 * 8 = 24\n3 * 9 = 27\n3 * 10 = 30\n3 * 11 = 33\n3 * 12 = 36\n----------\n4 * 1 = 4\n4 * 2 = 8\n4 * 3 = 12\n4 * 4 = 16\n4 * 5 = 20\n4 * 6 = 24\n4 * 7 = 28\n4 * 8 = 32\n4 * 9 = 36\n4 * 10 = 40\n4 * 11 = 44\n4 * 12 = 48\n----------\n5 * 1 = 5\n5 * 2 = 10\n5 * 3 = 15\n5 * 4 = 20\n5 * 5 = 25\n5 * 6 = 30\n5 * 7 = 35\n5 * 8 = 40\n5 * 9 = 45\n5 * 10 = 50\n5 * 11 = 55\n5 * 12 = 60\n----------\n6 * 1 = 6\n6 * 2 = 12\n6 * 3 = 18\n6 * 4 = 24\n6 * 5 = 30\n6 * 6 = 36\n6 * 7 = 42\n6 * 8 = 48\n6 * 9 = 54\n6 * 10 = 60\n6 * 11 = 66\n6 * 12 = 72\n----------\n7 * 1 = 7\n7 * 2 = 14\n7 * 3 = 21\n7 * 4 = 28\n7 * 5 = 35\n7 * 6 = 42\n7 * 7 = 49\n7 * 8 = 56\n7 * 9 = 63\n7 * 10 = 70\n7 * 11 = 77\n7 * 12 = 84\n----------",
                    "type": "stdout"
                },
                {
                    "text": "\n8 * 1 = 8\n8 * 2 = 16\n8 * 3 = 24\n8 * 4 = 32\n8 * 5 = 40\n8 * 6 = 48\n8 * 7 = 56\n8 * 8 = 64\n8 * 9 = 72\n8 * 10 = 80\n8 * 11 = 88\n8 * 12 = 96\n----------\n9 * 1 = 9\n9 * 2 = 18\n9 * 3 = 27\n9 * 4 = 36\n9 * 5 = 45\n9 * 6 = 54\n9 * 7 = 63\n9 * 8 = 72\n9 * 9 = 81\n9 * 10 = 90\n9 * 11 = 99\n9 * 12 = 108\n----------\n10 * 1 = 10\n10 * 2 = 20\n10 * 3 = 30\n10 * 4 = 40\n10 * 5 = 50\n10 * 6 = 60\n10 * 7 = 70\n10 * 8 = 80\n10 * 9 = 90\n10 * 10 = 100\n10 * 11 = 110\n10 * 12 = 120\n----------\n11 * 1 = 11\n11 * 2 = 22\n11 * 3 = 33\n11 * 4 = 44\n11 * 5 = 55\n11 * 6 = 66\n11 * 7 = 77\n11 * 8 = 88\n11 * 9 = 99\n11 * 10 = 110\n11 * 11 = 121\n11 * 12 = 132\n----------\n12 * 1 = 12\n12 * 2 = 24\n12 * 3 = 36\n12 * 4 = 48\n12 * 5 = 60\n12 * 6 = 72\n12 * 7 = 84\n12 * 8 = 96\n12 * 9 = 108\n12 * 10 = 120\n12 * 11 = 132\n12 * 12 = 144\n----------\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "times_table_exercise"
    },
    {
        "get_solution": [
            "for left in range(12):",
            "    left += 1",
            "    for right in range(12):",
            "        right += 1",
            "        print(f'{left} x {right} = {left * right}')",
            "    print('----------')"
        ],
        "page": "Introducing Nested Loops",
        "program": [
            "for left in range(12):",
            "    left += 1",
            "    for right in range(12):",
            "        right += 1",
            "        print(f'{left} x {right} = {left * right}')",
            "    print('----------')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "1 x 1 = 1\n1 x 2 = 2\n1 x 3 = 3\n1 x 4 = 4\n1 x 5 = 5\n1 x 6 = 6\n1 x 7 = 7\n1 x 8 = 8\n1 x 9 = 9\n1 x 10 = 10\n1 x 11 = 11\n1 x 12 = 12\n----------\n2 x 1 = 2\n2 x 2 = 4\n2 x 3 = 6\n2 x 4 = 8\n2 x 5 = 10\n2 x 6 = 12\n2 x 7 = 14\n2 x 8 = 16\n2 x 9 = 18\n2 x 10 = 20\n2 x 11 = 22\n2 x 12 = 24\n----------\n3 x 1 = 3\n3 x 2 = 6\n3 x 3 = 9\n3 x 4 = 12\n3 x 5 = 15\n3 x 6 = 18\n3 x 7 = 21\n3 x 8 = 24\n3 x 9 = 27\n3 x 10 = 30\n3 x 11 = 33\n3 x 12 = 36\n----------\n4 x 1 = 4\n4 x 2 = 8\n4 x 3 = 12\n4 x 4 = 16\n4 x 5 = 20\n4 x 6 = 24\n4 x 7 = 28\n4 x 8 = 32\n4 x 9 = 36\n4 x 10 = 40\n4 x 11 = 44\n4 x 12 = 48\n----------\n5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n5 x 10 = 50\n5 x 11 = 55\n5 x 12 = 60\n----------\n6 x 1 = 6\n6 x 2 = 12\n6 x 3 = 18\n6 x 4 = 24\n6 x 5 = 30\n6 x 6 = 36\n6 x 7 = 42\n6 x 8 = 48\n6 x 9 = 54\n6 x 10 = 60\n6 x 11 = 66\n6 x 12 = 72\n----------\n7 x 1 = 7\n7 x 2 = 14\n7 x 3 = 21\n7 x 4 = 28\n7 x 5 = 35\n7 x 6 = 42\n7 x 7 = 49\n7 x 8 = 56\n7 x 9 = 63\n7 x 10 = 70\n7 x 11 = 77\n7 x 12 = 84\n----------",
                    "type": "stdout"
                },
                {
                    "text": "\n8 x 1 = 8\n8 x 2 = 16\n8 x 3 = 24\n8 x 4 = 32\n8 x 5 = 40\n8 x 6 = 48\n8 x 7 = 56\n8 x 8 = 64\n8 x 9 = 72\n8 x 10 = 80\n8 x 11 = 88\n8 x 12 = 96\n----------\n9 x 1 = 9\n9 x 2 = 18\n9 x 3 = 27\n9 x 4 = 36\n9 x 5 = 45\n9 x 6 = 54\n9 x 7 = 63\n9 x 8 = 72\n9 x 9 = 81\n9 x 10 = 90\n9 x 11 = 99\n9 x 12 = 108\n----------\n10 x 1 = 10\n10 x 2 = 20\n10 x 3 = 30\n10 x 4 = 40\n10 x 5 = 50\n10 x 6 = 60\n10 x 7 = 70\n10 x 8 = 80\n10 x 9 = 90\n10 x 10 = 100\n10 x 11 = 110\n10 x 12 = 120\n----------\n11 x 1 = 11\n11 x 2 = 22\n11 x 3 = 33\n11 x 4 = 44\n11 x 5 = 55\n11 x 6 = 66\n11 x 7 = 77\n11 x 8 = 88\n11 x 9 = 99\n11 x 10 = 110\n11 x 11 = 121\n11 x 12 = 132\n----------\n12 x 1 = 12\n12 x 2 = 24\n12 x 3 = 36\n12 x 4 = 48\n12 x 5 = 60\n12 x 6 = 72\n12 x 7 = 84\n12 x 8 = 96\n12 x 9 = 108\n12 x 10 = 120\n12 x 11 = 132\n12 x 12 = 144\n----------\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "times_table_exercise"
    },
    {
        "get_solution": [
            "for player1 in players:",
            "    for player2 in players:",
            "        if player1 != player2:",
            "            print(f'{player1} vs {player2}')"
        ],
        "page": "Introducing Nested Loops",
        "program": [
            "players = ['Alice', 'Bob', 'Charlie']",
            "for player1 in players:",
            "    for player2 in players:",
            "        if player1 != player2:",
            "            print(f'{player1} vs {player2}')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Alice vs Bob\nAlice vs Charlie\nBob vs Alice\nBob vs Charlie\nCharlie vs Alice\nCharlie vs Bob\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "player_vs_player_exercise"
    },
    {
        "get_solution": [
            "for c1 in letters:",
            "    for c2 in letters:",
            "        for c3 in letters:",
            "            for c4 in letters:",
            "                print(c1 + c2 + c3 + c4)"
        ],
        "page": "Introducing Nested Loops",
        "program": [
            "letters = 'AB'",
            "for c1 in letters:",
            "    for c2 in letters:",
            "        for c3 in letters:",
            "            for c4 in letters:",
            "                print(c1 + c2 + c3 + c4)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "AAAA\nAAAB\nAABA\nAABB\nABAA\nABAB\nABBA\nABBB\nBAAA\nBAAB\nBABA\nBABB\nBBAA\nBBAB\nBBBA\nBBBB\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "crack_password_exercise"
    },
    {
        "get_solution": [
            "for i in range(size):",
            "    length = size - i",
            "    line = ''",
            "    for _ in range(length):",
            "        line += '+'",
            "    print(line)"
        ],
        "page": "Introducing Nested Loops",
        "program": [
            "size = 3",
            "for i in range(size):",
            "    length = size - i",
            "    line = ''",
            "    for _ in range(length):",
            "        line += '+'",
            "    print(line)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "+++\n++\n+\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "upside_down_triangle_exercise"
    },
    {
        "get_solution": [
            "for i in range(len(players)):",
            "    for j in range(len(players)):",
            "        if i < j:",
            "            print(f'{players[i]} vs {players[j]}')"
        ],
        "page": "Introducing Nested Loops",
        "program": [
            "players = ['Alice', 'Bob', 'Charlie']",
            "for i in range(len(players)):",
            "    for j in range(len(players)):",
            "        if i < j:",
            "            print(f'{players[i]} vs {players[j]}')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Alice vs Bob\nAlice vs Charlie\nBob vs Charlie\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "player_vs_player_bonus"
    },
    {
        "page": "Understanding Programs with Bird's Eye",
        "program": [
            "a = 2",
            "b = 3",
            "c = 4",
            "d = 5",
            "print(a * b + c * d)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "26\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_birdseye_example"
    },
    {
        "page": "Understanding Programs with Bird's Eye",
        "program": [
            "word = 'Amazing'",
            "vowels = []",
            "consonants = []",
            "for letter in word:",
            "    if letter.lower() in 'aeiou':",
            "        vowels.append(letter)",
            "    else:",
            "        consonants.append(letter)",
            "print(vowels)",
            "print(consonants)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "['A', 'a', 'i']\n['m', 'z', 'n', 'g']\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "birdseye_loop_example"
    },
    {
        "get_solution": [
            "string = strings[1]",
            "print(string[0])"
        ],
        "page": "Introducing Nested Lists",
        "program": [
            "strings = ['abc', 'def', 'ghi']",
            "string = strings[1]",
            "print(string[0])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "d\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "string_list_exercise"
    },
    {
        "page": "Introducing Nested Lists",
        "program": [
            "strings = [\"abc\", \"def\", \"ghi\"]",
            "print(strings[1][0])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "d\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "double_subscripting"
    },
    {
        "get_solution": [
            "print(strings[-2][-1])"
        ],
        "page": "Introducing Nested Lists",
        "program": [
            "strings = ['abc', 'de', 'fghi', 'jklmn', 'o']",
            "print(strings[-2][-1])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "n\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "double_subscripting_exercise"
    },
    {
        "page": "Introducing Nested Lists",
        "program": [
            "strings = [['hello', 'there'], ['how', 'are', 'you']]",
            "print(strings[1][0])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "how",
                "choices": [
                    "hello",
                    "there",
                    "how",
                    "are",
                    "you",
                    "['hello', 'there']",
                    "['how', 'are', 'you']",
                    "h",
                    "t",
                    "e",
                    "a",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "how\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_nested_list_example"
    },
    {
        "get_solution": [
            "print(strings[1][2][0])"
        ],
        "page": "Introducing Nested Lists",
        "program": [
            "strings = [['hello', 'there'], ['how', 'are', 'you']]",
            "print(strings[1][2][0])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "y\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "triple_subscripting"
    },
    {
        "page": "Looping Over Nested Lists",
        "program": [
            "numbers = [[1, 2, 3], [4, 5], [6], []]",
            "for sublist in numbers:",
            "    for num in sublist:",
            "        print(num)",
            "    print('---')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "1\n2\n3\n---\n4\n5\n---\n6\n---\n---",
                "choices": [
                    "1\n---\n2\n---\n3\n---\n4\n---\n5\n---\n6\n---",
                    "1\n2\n3\n---\n4\n5\n---\n6\n---\n---",
                    "1\n2\n3\n---\n4\n5\n---\n6\n---",
                    "1 2 3\n---\n4 5\n---\n6\n---\n---",
                    "1 2 3\n---\n4 5\n---\n6\n---",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "1\n2\n3\n---\n4\n5\n---\n6\n---\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "nested_list_nested_loop_example"
    },
    {
        "page": "Looping Over Nested Lists",
        "program": [
            "numbers = [[1, 2, 3], [4, 5], [6], []]",
            "for sublist in numbers:",
            "    for num in sublist:",
            "        print(num)",
            "    print('---')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "1\n2\n3\n---\n4\n5\n---\n6\n---\n---\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "nested_list_loop_python_tutor"
    },
    {
        "get_solution": [
            "for sublist in strings:",
            "    for string in sublist:",
            "        if word in string:",
            "            print(string)"
        ],
        "page": "Looping Over Nested Lists",
        "program": [
            "strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]",
            "word = 'hello'",
            "for sublist in strings:",
            "    for string in sublist:",
            "        if word in string:",
            "            print(string)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "hello there\nhello world\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "string_contains_word_exercise"
    },
    {
        "get_solution": [
            "for sublist in strings:",
            "    present = False",
            "    for string in sublist:",
            "        if word in string:",
            "            present = True",
            "    print(present)"
        ],
        "page": "Looping Over Nested Lists",
        "program": [
            "strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]",
            "word = 'goodbye'",
            "for sublist in strings:",
            "    present = False",
            "    for string in sublist:",
            "        if word in string:",
            "            present = True",
            "    print(present)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "False\nTrue\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "sublist_contains_word_exercise"
    },
    {
        "get_solution": [
            "present = False",
            "for sublist in strings:",
            "    for string in sublist:",
            "        if word in string:",
            "            present = True",
            "print(present)"
        ],
        "page": "Looping Over Nested Lists",
        "program": [
            "strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]",
            "word = 'are'",
            "present = False",
            "for sublist in strings:",
            "    for string in sublist:",
            "        if word in string:",
            "            present = True",
            "print(present)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "list_contains_word_exercise"
    },
    {
        "get_solution": [
            "for i in range(len(strings[0])):",
            "    line = \"\"",
            "    for string in strings:",
            "        line += string[i]",
            "    print(line)"
        ],
        "page": "Looping Over Nested Lists",
        "program": [
            "strings = ['abc', 'def', 'ghi']",
            "for i in range(len(strings[0])):",
            "    line = \"\"",
            "    for string in strings:",
            "        line += string[i]",
            "    print(line)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "adg\nbeh\ncfi\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "zip_strings_list_exercise"
    },
    {
        "get_solution": [
            "lengths = []",
            "for string in strings:",
            "    lengths.append(len(string))",
            "length = max(lengths)",
            "",
            "for i in range(length):",
            "    line = \"\"",
            "    for string in strings:",
            "        if i >= len(string):",
            "            line += \" \"",
            "        else:",
            "            line += string[i]",
            "    print(line)"
        ],
        "page": "Looping Over Nested Lists",
        "program": [
            "strings = ['abcqwe', 'def', 'ghiq']",
            "lengths = []",
            "for string in strings:",
            "    lengths.append(len(string))",
            "length = max(lengths)",
            "",
            "for i in range(length):",
            "    line = \"\"",
            "    for string in strings:",
            "        if i >= len(string):",
            "            line += \" \"",
            "        else:",
            "            line += string[i]",
            "    print(line)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "adg\nbeh\ncfi\nq q\nw  \ne  \n",
                    "type": "stdout"
                }
            ]
        },
        "step": "zip_longest_strings_exercise"
    },
    {
        "page": "Defining Functions",
        "program": [
            "def greet(name):",
            "    print(f\"Hello {name}!\")",
            "",
            "greet(\"Alice\")",
            "greet(\"Bob\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Hello Alice!\nHello Bob!\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "define_greet"
    },
    {
        "page": "Defining Functions",
        "program": [
            "def greet(name):",
            "    print(f\"Hello {name}!\")",
            "    print(\"How are you?\")",
            "",
            "greet(\"Alice\")",
            "greet(\"Bob\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Hello Alice!\nHow are you?\nHello Bob!\nHow are you?",
                "choices": [
                    "Hello Alice!\nHow are you?\nHello Bob!\nHow are you?",
                    "Hello Alice!\nHello Bob!\nHow are you?",
                    "Hello Alice!\nHow are you?\nHello Bob!",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "Hello Alice!\nHow are you?\nHello Bob!\nHow are you?\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "how_are_you"
    },
    {
        "get_solution": [
            "def say_hello(name):",
            "    print(f\"Hello {name}!\")",
            "    print(\"How are you?\")",
            "",
            "say_hello(\"Alice\")",
            "say_hello(\"Bob\")"
        ],
        "page": "Defining Functions",
        "program": [
            "def say_hello(name):",
            "    print(f\"Hello {name}!\")",
            "    print(\"How are you?\")",
            "",
            "say_hello(\"Alice\")",
            "say_hello(\"Bob\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Hello Alice!\nHow are you?\nHello Bob!\nHow are you?\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "change_function_name"
    },
    {
        "get_solution": [
            "def say_hello(person_name):",
            "    print(f\"Hello {person_name}!\")",
            "    print(\"How are you?\")",
            "",
            "say_hello(\"Alice\")",
            "say_hello(\"Bob\")"
        ],
        "page": "Defining Functions",
        "program": [
            "def say_hello(person_name):",
            "    print(f\"Hello {person_name}!\")",
            "    print(\"How are you?\")",
            "",
            "say_hello(\"Alice\")",
            "say_hello(\"Bob\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Hello Alice!\nHow are you?\nHello Bob!\nHow are you?\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "change_parameter_name"
    },
    {
        "get_solution": [
            "def print_twice(x):",
            "    print(x)",
            "    print(x)"
        ],
        "page": "Defining Functions",
        "program": [
            "def print_twice(x):",
            "    print(x)",
            "    print(x)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "print_twice_exercise"
    },
    {
        "page": "Defining Functions",
        "program": [
            "def print_many(thing, n):",
            "    for _ in range(n):",
            "        print(thing)",
            "",
            "print_many(\"Hello\", 3)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Hello\nHello\nHello",
                "choices": [
                    "3\n3\n3",
                    "3",
                    "Hello\nHello\nHello",
                    "Hello",
                    "H\ne\nl\nl\no",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "Hello\nHello\nHello\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "print_many"
    },
    {
        "get_solution": [
            "def print_many(n, thing):",
            "    for _ in range(n):",
            "        print(thing)",
            "",
            "print_many(3, \"Hello\")"
        ],
        "page": "Defining Functions",
        "program": [
            "def print_many(n, thing):",
            "    for _ in range(n):",
            "        print(thing)",
            "",
            "print_many(3, \"Hello\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Hello\nHello\nHello\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "swap_parameters"
    },
    {
        "page": "Calling Functions Within Functions",
        "program": [
            "def print_many(n, thing):",
            "    for _ in range(n):",
            "        print(thing)",
            "",
            "def print_twice(x):",
            "    print_many(2, x)",
            "",
            "print_twice(\"Hello\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Hello\nHello\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "print_twice_call_print_many"
    },
    {
        "page": "Calling Functions Within Functions",
        "program": [
            "def print_many(n, thing):",
            "    for _ in range(n):",
            "        print(thing)",
            "",
            "def print_twice(x):",
            "    print_many(2, x)",
            "",
            "print_twice(\"Hello\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   1\u001b[0m | \u001b[38;5;81mdef\u001b[39m \u001b[38;5;148mprint_many\u001b[39m(n, thing):\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mdef\u001b[39m \u001b[38;5;148mprint_twice\u001b[39m(x):\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m | print_twice(\u001b[38;5;186m\"\u001b[39m\u001b[38;5;186mHello\u001b[39m\u001b[38;5;186m\"\u001b[39m)\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m     \u001b[0m\u001b[36m\u001b[1m>>> Call to print_twice in File \"my_program.py\", line 5\u001b[0m\n\u001b[38;5;242m     \u001b[0m...... x = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mHello\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m     \u001b[0m\u001b[38;5;242m   5\u001b[0m | \u001b[38;5;81mdef\u001b[39m \u001b[38;5;148mprint_twice\u001b[39m(x):\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m     \u001b[0m\u001b[38;5;242m   6\u001b[0m |     print_many(\u001b[38;5;141m2\u001b[39m, x)\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m         \u001b[0m\u001b[36m\u001b[1m>>> Call to print_many in File \"my_program.py\", line 1\u001b[0m\n\u001b[38;5;242m         \u001b[0m...... n = \u001b[38;5;141m2\u001b[39m\n\u001b[38;5;242m         \u001b[0m...... thing = \u001b[38;5;186m'\u001b[39m\u001b[38;5;186mHello\u001b[39m\u001b[38;5;186m'\u001b[39m\n\u001b[38;5;242m         \u001b[0m\u001b[38;5;242m   1\u001b[0m | \u001b[38;5;81mdef\u001b[39m \u001b[38;5;148mprint_many\u001b[39m(n, thing):\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m         \u001b[0m\u001b[38;5;242m   2\u001b[0m |     \u001b[38;5;81mfor\u001b[39m _ \u001b[38;5;197min\u001b[39m range(n):\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m         \u001b[0m.......... _ = \u001b[38;5;141m0\u001b[39m\n\u001b[38;5;242m         \u001b[0m\u001b[38;5;242m   3\u001b[0m |         print(thing)\n",
                    "type": "stdout"
                },
                {
                    "text": "Hello\n\u001b[38;5;242m         \u001b[0m\u001b[38;5;242m   2\u001b[0m |     \u001b[38;5;81mfor\u001b[39m _ \u001b[38;5;197min\u001b[39m range(n):\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m         \u001b[0m.......... _ = \u001b[38;5;141m1\u001b[39m\n\u001b[38;5;242m         \u001b[0m\u001b[38;5;242m   3\u001b[0m |         print(thing)\n",
                    "type": "stdout"
                },
                {
                    "text": "Hello\n\u001b[38;5;242m         \u001b[0m\u001b[38;5;242m   2\u001b[0m |     \u001b[38;5;81mfor\u001b[39m _ \u001b[38;5;197min\u001b[39m range(n):\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m         \u001b[0m\u001b[32m\u001b[1m<<< Return value from print_many: \u001b[0m\u001b[38;5;81mNone\u001b[39m\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m     \u001b[0m\u001b[38;5;242m   6\u001b[0m |     print_many(\u001b[38;5;141m2\u001b[39m, x)\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m     \u001b[0m\u001b[32m\u001b[1m<<< Return value from print_twice: \u001b[0m\u001b[38;5;81mNone\u001b[39m\n",
                    "type": "stdout"
                },
                {
                    "text": "\u001b[38;5;242m \u001b[0m\u001b[38;5;242m   8\u001b[0m | print_twice(\u001b[38;5;186m\"\u001b[39m\u001b[38;5;186mHello\u001b[39m\u001b[38;5;186m\"\u001b[39m)\n",
                    "type": "stdout"
                },
                {
                    "text": "",
                    "type": "stdout"
                }
            ]
        },
        "step": "see_stack_in_snoop"
    },
    {
        "page": "Calling Functions Within Functions",
        "program": [
            "def print_many(n, thing):",
            "    for _ in range(n):",
            "        print(thing)",
            "",
            "def print_twice(x):",
            "    print_many(2, x)",
            "",
            "print_twice(\"Hello\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Hello\nHello\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "see_stack_in_pythontutor"
    },
    {
        "page": "Calling Functions Within Functions",
        "program": [
            "def print_many(n, thing):",
            "    for _ in range(n):",
            "        print(thing)",
            "",
            "def print_twice(x):",
            "    print_many(2, x)",
            "",
            "print_twice(\"Hello\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Hello\nHello\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "see_stack_in_birdseye"
    },
    {
        "page": "Returning Values From Functions",
        "program": [
            "def double(x):",
            "    return x * 2",
            "",
            "number = 5",
            "twice = double(number)",
            "print(number)",
            "print(twice)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "5\n10",
                "choices": [
                    "5\n5",
                    "5\n10",
                    "10\n10",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "5\n10\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_return"
    },
    {
        "page": "Returning Values From Functions",
        "program": [
            "def double(x):",
            "    return x * 2",
            "",
            "number = 5",
            "double(number)",
            "print(number)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "5",
                "choices": [
                    "5",
                    "10",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "5\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "losing_return_value"
    },
    {
        "page": "Returning Values From Functions",
        "program": [
            "def quadruple(x):",
            "    return x * 4"
        ],
        "response": {
            "message": "<p>You cannot use <code>*</code>, <code>+</code>, or even any numbers inside <code>quadruple</code>.\nYou must call <code>double</code> to solve the problem.</p>",
            "passed": false,
            "result": []
        },
        "step": "quadruple_exercise"
    },
    {
        "get_solution": [
            "def quadruple(x):",
            "    return double(double(x))"
        ],
        "page": "Returning Values From Functions",
        "program": [
            "def double(x):",
            "    return x * 2",
            "",
            "def quadruple(x):",
            "    return double(double(x))"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "quadruple_exercise"
    },
    {
        "page": "Testing Functions",
        "program": [
            "def double(x):",
            "    return x * 2",
            "",
            "assert_equal(double(2), 4)",
            "assert_equal(double(5), 10)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "OK\nOK",
                "choices": [
                    "Error! 4 != 4\nError! 10 != 10",
                    "Error! 2 != 4\nError! 5 != 10",
                    "Error! 2 != 4",
                    "OK\nOK",
                    "OK",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "OK\nOK\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_assert_equal"
    },
    {
        "page": "Testing Functions",
        "program": [
            "def double(x):",
            "    return x * 3",
            "",
            "assert_equal(double(2), 4)",
            "assert_equal(double(5), 10)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Error! 6 != 4\nError! 15 != 10",
                "choices": [
                    "Error! 4 != 4\nError! 10 != 10",
                    "Error! 6 != 4\nError! 15 != 10",
                    "Error! 4 != 6\nError! 10 != 15",
                    "OK\nOK",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "Error! 6 != 4\nError! 15 != 10\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "make_tests_fail"
    },
    {
        "page": "Testing Functions",
        "program": [
            "def double(x):",
            "    return x * 2",
            "",
            "def quadruple(x):",
            "    return double(double(x))",
            "",
            "assert_equal(quadruple(2), 8)",
            "assert_equal(quadruple(5), 20)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "OK\nOK\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "complete_quadruple_tests"
    },
    {
        "get_solution": [
            "def surround(string, sides):",
            "    return sides + string + sides"
        ],
        "page": "Testing Functions",
        "program": [
            "def surround(string, sides):",
            "    return sides + string + sides"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "surround_exercise"
    },
    {
        "page": "Testing Functions",
        "program": [
            "def surround(string, sides):",
            "    return sides + string + sides",
            "",
            "def alert(string, level):",
            "    string = surround(string, ' ')",
            "    for _ in range(level):",
            "        string = surround(string, '!')",
            "        return string"
        ],
        "response": {
            "message": "<p>In the <code>alert</code> function, you placed your <code>return</code> statement at the wrong place!\nPay attention to your indentations in <code>alert</code>. You might be ending a loop too early with <code>return</code>.</p>",
            "passed": false,
            "result": []
        },
        "step": "alert_exercise"
    },
    {
        "page": "Testing Functions",
        "program": [
            "def alert(string, level):",
            "    marks = '!' * level",
            "    return f'{marks} {string} {marks}'"
        ],
        "response": {
            "message": "<p>You cannot use string concatenation/formatting/interpolation/multiplication or f-strings in <code>alert</code>.\nYou must call <code>surround</code> to solve the problem.</p>",
            "passed": false,
            "result": []
        },
        "step": "alert_exercise"
    },
    {
        "get_solution": [
            "def alert(string, level):",
            "    string = surround(string, ' ')",
            "    for _ in range(level):",
            "        string = surround(string, '!')",
            "    return string"
        ],
        "page": "Testing Functions",
        "program": [
            "def surround(string, sides):",
            "    return sides + string + sides",
            "",
            "def alert(string, level):",
            "    string = surround(string, ' ')",
            "    for _ in range(level):",
            "        string = surround(string, '!')",
            "    return string"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "alert_exercise"
    },
    {
        "page": "<code>return</code> ends the function call",
        "program": [
            "def foo():",
            "    return 1",
            "    return 2",
            "",
            "print(foo())"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "1",
                "choices": [
                    "1",
                    "2",
                    "[1, 2]",
                    "1\n2",
                    "1 2",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "1\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "double_return_in_one_function"
    },
    {
        "page": "<code>return</code> ends the function call",
        "program": [
            "def double_numbers(numbers):",
            "    for x in numbers:",
            "        return x * 2",
            "",
            "assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Error! 2 != [2, 4, 6]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "cannot_return_multiple_values"
    },
    {
        "page": "<code>return</code> ends the function call",
        "program": [
            "def foo():",
            "    for letter in 'abc':",
            "        for number in range(3):",
            "            print(f\"{letter} {number}\")",
            "            if letter == 'b':",
            "                return letter",
            "",
            "foo()"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "a 0\na 1\na 2\nb 0",
                "choices": [
                    "a 0\na 1\na 2",
                    "a 0\na 1\na 2\nb 0",
                    "a 0\na 1\na 2\nb 0\nb 1\nb 2",
                    "a 0\na 1\na 2\nb 0\nc 0\nc 1\nc 2",
                    "a 0\na 1\na 2\nb 0\nb 1\nb 2\nc 0\nc 1\nc 2",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "a 0\na 1\na 2\nb 0\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "return_ends_whole_function"
    },
    {
        "page": "<code>return</code> ends the function call",
        "program": [
            "def foo():",
            "    for letter in 'abc':",
            "        for number in range(3):",
            "            print(f\"{letter} {number}\")",
            "            if letter == 'b':",
            "                break",
            "",
            "foo()"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "a 0\na 1\na 2\nb 0\nc 0\nc 1\nc 2",
                "choices": [
                    "a 0\na 1\na 2",
                    "a 0\na 1\na 2\nb 0",
                    "a 0\na 1\na 2\nb 0\nb 1\nb 2",
                    "a 0\na 1\na 2\nb 0\nc 0\nc 1\nc 2",
                    "a 0\na 1\na 2\nb 0\nb 1\nb 2\nc 0\nc 1\nc 2",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "a 0\na 1\na 2\nb 0\nc 0\nc 1\nc 2\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "break_vs_return"
    },
    {
        "page": "Introducing <code>or</code>",
        "program": [
            "def is_friend(name):",
            "    if name == \"Alice\":",
            "        return True",
            "    elif name == \"Bob\":",
            "        return True",
            "    else:",
            "        return False",
            "",
            "assert_equal(is_friend(\"Alice\"), True)",
            "assert_equal(is_friend(\"Bob\"), True)",
            "assert_equal(is_friend(\"Charlie\"), False)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "OK\nOK\nOK\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "InputAliceBob"
    },
    {
        "page": "Introducing <code>or</code>",
        "program": [
            "True or True"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "True",
                "choices": [
                    "True",
                    "False",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "TrueOrTrue"
    },
    {
        "page": "Introducing <code>or</code>",
        "program": [
            "True or False"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "True",
                "choices": [
                    "True",
                    "False",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "TrueOrFalse"
    },
    {
        "page": "Introducing <code>or</code>",
        "program": [
            "False or False"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "False",
                "choices": [
                    "True",
                    "False",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "False\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "FalseOrFalse"
    },
    {
        "page": "Introducing <code>or</code>",
        "program": [
            "def is_friend(name):",
            "    if name == \"Alice\" or name == \"Bob\":",
            "        return True",
            "    else:",
            "        return False",
            "",
            "assert_equal(is_friend(\"Alice\"), True)",
            "assert_equal(is_friend(\"Bob\"), True)",
            "assert_equal(is_friend(\"Charlie\"), False)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "OK\nOK\nOK\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "ImprovingWithOr"
    },
    {
        "page": "Introducing <code>or</code>",
        "program": [
            "def is_friend(name):",
            "    return name == \"Alice\" or name == \"Bob\"",
            "",
            "assert_equal(is_friend(\"Alice\"), True)",
            "assert_equal(is_friend(\"Bob\"), True)",
            "assert_equal(is_friend(\"Charlie\"), False)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "OK\nOK\nOK\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "FurtherImprovement"
    },
    {
        "page": "Introducing <code>or</code>",
        "program": [
            "def is_friend(name):",
            "    return name == \"Alice\" or \"Bob\"",
            "",
            "assert_equal(is_friend(\"Alice\"), True)",
            "assert_equal(is_friend(\"Bob\"), True)",
            "assert_equal(is_friend(\"Charlie\"), False)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "OK\nError! 'Bob' != True\nError! 'Bob' != False\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "ACommonMistake"
    },
    {
        "page": "Introducing <code>or</code>",
        "program": [
            "def is_friend(name):",
            "    return name == \"Alice\" or \"Bob\"",
            "",
            "assert_equal(is_friend(\"Alice\"), True)",
            "assert_equal(is_friend(\"Bob\"), True)",
            "assert_equal(is_friend(\"Charlie\"), False)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "OK\nError! 'Bob' != True\nError! 'Bob' != False\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "InspectWithBirdseye"
    },
    {
        "get_solution": [
            "def is_valid_percentage(x):",
            "    if x < 0 or x > 100:",
            "        return False",
            "    else:",
            "        return True"
        ],
        "page": "Introducing <code>or</code>",
        "program": [
            "def is_valid_percentage(x):",
            "    if x < 0 or x > 100:",
            "        return False",
            "    else:",
            "        return True"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "AnExercise"
    },
    {
        "page": "Introducing <code>and</code>",
        "program": [
            "True and True"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "True",
                "choices": [
                    "True",
                    "False",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "TrueAndTrue"
    },
    {
        "page": "Introducing <code>and</code>",
        "program": [
            "True and False"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "False",
                "choices": [
                    "True",
                    "False",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "False\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "TrueAndFalse"
    },
    {
        "page": "Introducing <code>and</code>",
        "program": [
            "False and False"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "False",
                "choices": [
                    "True",
                    "False",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "False\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "FalseAndFalse"
    },
    {
        "get_solution": [
            "def is_valid_percentage(x):",
            "    if 0 <= x and x <= 100:",
            "        return True",
            "    else:",
            "        return False"
        ],
        "page": "Introducing <code>and</code>",
        "program": [
            "def is_valid_percentage(x):",
            "    if 0 <= x and x <= 100:",
            "        return True",
            "    else:",
            "        return False"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "AndExercise"
    },
    {
        "get_solution": [
            "def all_equal(row):",
            "    return row[0] == row[1] and row[0] == row[2]"
        ],
        "page": "Introducing <code>and</code>",
        "program": [
            "def all_equal(row):",
            "    return row[0] == row[1] and row[0] == row[2]"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "TicTacToeWinningRow"
    },
    {
        "page": "Multi-line statements",
        "program": [
            "is_friend = name == \"Alice\" or",
            "            name == \"Bob\""
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "    is_friend = name == \"Alice\" or\n                                  ^\nSyntaxError: invalid syntax\nat line 1\n\nA `SyntaxError` occurs when Python cannot understand your code.\n\nThe Python keyword `or` can only be used for boolean expressions.\nPerhaps you meant to write\n\n`is_friend = name == \"Alice\" ,`\n\n\n",
                    "type": "syntax_error"
                }
            ]
        },
        "step": "invalid_multiline"
    },
    {
        "page": "Multi-line statements",
        "program": [
            "name = \"Bob\"",
            "",
            "is_friend = name == \"Alice\" or \\",
            "            name == \"Bob\"",
            "print(is_friend)",
            "",
            "is_friend = (name == \"Alice\" or",
            "             name == \"Bob\")",
            "print(is_friend)",
            "",
            "is_friend = [name == \"Alice\",",
            "             name == \"Bob\"]",
            "print(is_friend)",
            "",
            "print(name == \"Alice\" or",
            "      name == \"Bob\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\nTrue\n[False, True]\nTrue\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "valid_multiline"
    },
    {
        "page": "Combining <code>and</code> and <code>or</code>",
        "program": [
            "True or False and False"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "CombiningAndOr"
    },
    {
        "get_solution": [
            "def diagonal_winner(board):",
            "    middle = board[1][1]",
            "    return (",
            "            (middle == board[0][0] and middle == board[2][2]) or",
            "            (middle == board[0][2] and middle == board[2][0])",
            "    )"
        ],
        "page": "Combining <code>and</code> and <code>or</code>",
        "program": [
            "def diagonal_winner(board):",
            "    middle = board[1][1]",
            "    return (",
            "            (middle == board[0][0] and middle == board[2][2]) or",
            "            (middle == board[0][2] and middle == board[2][0])",
            "    )"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "AndHasHigherPriority"
    },
    {
        "page": "Introducing <code>not</code>",
        "program": [
            "not True"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "False",
                "choices": [
                    "True",
                    "False",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "False\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "IntroducingNot"
    },
    {
        "page": "Introducing <code>not</code>",
        "program": [
            "not False"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "True",
                "choices": [
                    "True",
                    "False",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "NotFalse"
    },
    {
        "page": "Introducing <code>not</code>",
        "program": [
            "b = True",
            "print(not b or b)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "NotTrueOrTrue"
    },
    {
        "get_solution": [
            "def invalid_image(filename):",
            "    return not (filename.endswith(\".png\") or filename.endswith(\".jpg\"))"
        ],
        "page": "Introducing <code>not</code>",
        "program": [
            "def invalid_image(filename):",
            "    return not (filename.endswith(\".png\") or filename.endswith(\".jpg\"))"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "NotPriority"
    },
    {
        "page": "Checking the board for winners",
        "program": [
            "def row_winner(board):",
            "    for row in board:",
            "        all_equal = True",
            "        piece = row[0]",
            "        for entry in row:",
            "            if piece != entry:",
            "                all_equal = False",
            "                break",
            "        if all_equal:",
            "            return True",
            "    return False"
        ],
        "response": {
            "message": "<p>Keep in mind that some entries might be <code>' '</code>. An empty row is not a winning row.</p>",
            "passed": false,
            "result": []
        },
        "step": "intro_row_winner"
    },
    {
        "get_solution": [
            "def row_winner(board):",
            "    for row in board:",
            "        all_equal = True",
            "        piece = row[0]",
            "        for entry in row:",
            "            if entry == ' ' or piece != entry:",
            "                all_equal = False",
            "                break",
            "        if all_equal:",
            "            return True",
            "    return False"
        ],
        "page": "Checking the board for winners",
        "program": [
            "def row_winner(board):",
            "    for row in board:",
            "        all_equal = True",
            "        piece = row[0]",
            "        for entry in row:",
            "            if entry == ' ' or piece != entry:",
            "                all_equal = False",
            "                break",
            "        if all_equal:",
            "            return True",
            "    return False"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "intro_row_winner"
    },
    {
        "get_solution": [
            "def column_winner(board):",
            "    for col in range(len(board[0])):",
            "        all_equal = True",
            "        piece = board[0][col]",
            "        for row in board:",
            "            if row[col] == ' ' or row[col] != piece:",
            "                all_equal = False",
            "                break",
            "        if all_equal:",
            "            return True",
            "    return False"
        ],
        "page": "Checking the board for winners",
        "program": [
            "def column_winner(board):",
            "    for col in range(len(board[0])):",
            "        all_equal = True",
            "        piece = board[0][col]",
            "        for row in board:",
            "            if row[col] == ' ' or row[col] != piece:",
            "                all_equal = False",
            "                break",
            "        if all_equal:",
            "            return True",
            "    return False"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "column_winner"
    },
    {
        "get_solution": [
            "def diagonal_winner(board):",
            "    all_equal1 = True",
            "    all_equal2 = True",
            "    topleft = board[0][0]",
            "    topright = board[0][-1]",
            "    for i in range(len(board)):",
            "        if board[i][i] == ' ' or board[i][i] != topleft:",
            "            all_equal1 = False",
            "        if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:",
            "            all_equal2 = False",
            "    return all_equal1 or all_equal2"
        ],
        "page": "Checking the board for winners",
        "program": [
            "def diagonal_winner(board):",
            "    all_equal1 = True",
            "    all_equal2 = True",
            "    topleft = board[0][0]",
            "    topright = board[0][-1]",
            "    for i in range(len(board)):",
            "        if board[i][i] == ' ' or board[i][i] != topleft:",
            "            all_equal1 = False",
            "        if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:",
            "            all_equal2 = False",
            "    return all_equal1 or all_equal2"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "diagonal_winner"
    },
    {
        "get_solution": [
            "def winner(board):",
            "    return row_winner(board) or column_winner(board) or diagonal_winner(board)"
        ],
        "page": "Checking the board for winners",
        "program": [
            "def winning_line(strings):",
            "    piece = strings[0]",
            "    if piece == ' ':",
            "        return False",
            "    for entry in strings:",
            "        if piece != entry:",
            "            return False",
            "    return True",
            "",
            "def row_winner(board):",
            "    for row in board:",
            "        if winning_line(row):",
            "            return True",
            "    return False",
            "",
            "def column_winner(board):",
            "    for col in range(len(board[0])):",
            "        column = []",
            "        for row in board:",
            "            column.append(row[col])",
            "        if winning_line(column):",
            "            return True",
            "    return False",
            "",
            "def diagonal_winner(board):",
            "    diagonal1 = []",
            "    diagonal2 = []",
            "    for i in range(len(board)):",
            "        diagonal1.append(board[i][i])",
            "        diagonal2.append(board[i][-i - 1])",
            "    return winning_line(diagonal1) or winning_line(diagonal2)",
            "",
            "def winner(board):",
            "    return row_winner(board) or column_winner(board) or diagonal_winner(board)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "winner"
    },
    {
        "page": "The newline character, <code>format_board</code>",
        "program": [
            "def print_board(board):",
            "    for row in board:",
            "        print(\"\".join(row))",
            "",
            "print_board([",
            "    ['X', 'O', 'X'],",
            "    [' ', 'O', 'O'],",
            "    [' ', 'X', ' ']",
            "])"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "XOX\n OO\n X \n",
                    "type": "stdout"
                }
            ]
        },
        "step": "one_way_to_print_board"
    },
    {
        "page": "The newline character, <code>format_board</code>",
        "program": [
            "assert_equal(",
            "    format_board([",
            "        ['X', 'O', 'X'],",
            "        [' ', 'O', 'O'],",
            "        [' ', 'X', ' ']",
            "    ]),",
            "    \"XOX",
            "      OO",
            "      X \"",
            ")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "    \"XOX\n        ^\nSyntaxError: EOL while scanning string literal\nat line 7\n\nA `SyntaxError` occurs when Python cannot understand your code.\n\nYou started writing a string with a single or double quote\nbut never ended the string with another quote on that line.\n\n\n",
                    "type": "syntax_error"
                }
            ]
        },
        "step": "invalid_multi_line_string"
    },
    {
        "page": "The newline character, <code>format_board</code>",
        "program": [
            "string = \"\"\"First line",
            "Second line\"\"\"",
            "print(string)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "First line\nSecond line\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "multi_line_strings_triple_quotes"
    },
    {
        "page": "The newline character, <code>format_board</code>",
        "program": [
            "string"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "'First line\\nSecond line'\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "discovering_newline"
    },
    {
        "page": "The newline character, <code>format_board</code>",
        "program": [
            "len('\\n')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "1",
                "choices": [
                    "1",
                    "2",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "1\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "introducing_newline"
    },
    {
        "get_solution": [
            "def format_board(board):",
            "    result = ''",
            "    for i in range(len(board)):",
            "        for char in board[i]:",
            "            result += char",
            "        if i != len(board) - 1:",
            "            result += '\\n'",
            "    return result"
        ],
        "page": "The newline character, <code>format_board</code>",
        "program": [
            "def format_board(board):",
            "    result = ''",
            "    for i in range(len(board)):",
            "        for char in board[i]:",
            "            result += char",
            "        if i != len(board) - 1:",
            "            result += '\\n'",
            "    return result"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "format_board_simple"
    },
    {
        "get_solution": [
            "def format_board(board):",
            "    joined_rows = []",
            "    for row in board:",
            "        joined_rows.append(\"|\".join(row))",
            "    lines = []",
            "    for _ in board[0]:",
            "        lines.append(\"-\")",
            "    line = f'\\n{\"+\".join(lines)}\\n'",
            "    return line.join(joined_rows)"
        ],
        "page": "The newline character, <code>format_board</code>",
        "program": [
            "def format_board(board):",
            "    joined_rows = []",
            "    for row in board:",
            "        joined_rows.append(\"|\".join(row))",
            "    lines = []",
            "    for _ in board[0]:",
            "        lines.append(\"-\")",
            "    line = f'\\n{\"+\".join(lines)}\\n'",
            "    return line.join(joined_rows)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "format_board_bonus_challenge"
    },
    {
        "page": "Types",
        "program": [
            "print(type('Hello World'))",
            "print(type(23))",
            "print(type(True))",
            "print(type([1, 2, 3]))",
            "print(type(4.56))"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "<class 'str'>\n<class 'int'>\n<class 'bool'>\n<class 'list'>\n<class 'float'>\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "five_different_types"
    },
    {
        "page": "Types",
        "program": [
            "type(3) == int"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "True\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "check_type_manually"
    },
    {
        "page": "Types",
        "program": [
            "print('123')",
            "print(123)",
            "print(123 == '123')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "123\n123\nFalse\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "different_types_look_same"
    },
    {
        "page": "Types",
        "program": [
            "print(123 + 456)",
            "print('123' + '456')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "579\n123456",
                "choices": [
                    "579\n579",
                    "579\n'579'",
                    "123456\n123456",
                    "123456\n'123456'",
                    "579\n123456",
                    "579\n'123456'",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "579\n123456\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "plus_has_two_meanings"
    },
    {
        "page": "Types",
        "program": [
            "print(13 < 120)",
            "print('13' < '120')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "True\nFalse",
                "choices": [
                    "True\nTrue",
                    "True\nFalse",
                    "False\nTrue",
                    "False\nFalse",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "True\nFalse\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "less_than_has_two_meanings"
    },
    {
        "page": "Types",
        "program": [
            "print(sorted([120, 13, 0]))",
            "print(sorted(['120', '13', '0']))"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "[0, 13, 120]\n['0', '120', '13']",
                "choices": [
                    "[0, 13, 120]\n['0', '120', '13']",
                    "[0, 13, 120]\n['13', '120', '0']",
                    "[0, 13, 120]\n['120', '13', '0']",
                    "[120, 13, 0]\n['0', '120', '13']",
                    "[120, 13, 0]\n['13', '120', '0']",
                    "[120, 13, 0]\n['120', '13', '0']",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "[0, 13, 120]\n['0', '120', '13']\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "less_than_sorting_strings"
    },
    {
        "page": "Types",
        "program": [
            "12 + '34'"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "Error",
                "choices": [
                    "46",
                    "'46'",
                    "1234",
                    "'1234'",
                    "Error"
                ]
            },
            "result": [
                {
                    "data": [
                        {
                            "didyoumean": [],
                            "exception": {
                                "message": "unsupported operand type(s) for +: 'int' and 'str'",
                                "type": "TypeError"
                            },
                            "frames": [
                                {
                                    "lines": [
                                        {
                                            "content": "<span class=\"mi mi-ExecutingNode\">12</span><span class=\" -ExecutingNode\"> </span><span class=\"o o-ExecutingNode\">+</span><span class=\" -ExecutingNode\"> </span><span class=\"s1 s1-ExecutingNode\">&#39;34&#39;</span>",
                                            "is_current": true,
                                            "lineno": 1,
                                            "type": "line"
                                        }
                                    ],
                                    "name": "<module>",
                                    "type": "frame",
                                    "variables": []
                                }
                            ],
                            "friendly": "<p>A <code>TypeError</code> is usually caused by trying\nto combine two incompatible types of objects,\nby calling a function with the wrong type of object,\nor by trying to do an operation not allowed on a given type of object.</p>\n<p>You tried to add two incompatible types of objects:\nan integer (<code>int</code>) and a string (<code>str</code>).\nPerhaps you forgot to convert the string <code>'34'</code> into an integer (<code>int</code>).</p>",
                            "tail": ""
                        }
                    ],
                    "text": [
                        "Traceback (most recent call last):",
                        " File \"my_program.py\", line 1, in <module>",
                        "-->    1 | 12 + '34'",
                        "           ^^^^^^^^^",
                        "",
                        "TypeError: unsupported operand type(s) for +: 'int' and 'str'"
                    ],
                    "type": "traceback"
                }
            ]
        },
        "step": "common_type_errors"
    },
    {
        "get_solution": [
            "for i in range(int(number)):",
            "    print('Starting... ' + str(i + 1))",
            "print('Go!')"
        ],
        "page": "Types",
        "program": [
            "number = '1'",
            "for i in range(int(number)):",
            "    print('Starting... ' + str(i + 1))",
            "print('Go!')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Starting... 1\nGo!\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "fixing_type_errors_with_conversion"
    },
    {
        "get_solution": [
            "def format_board(board):",
            "    first_row = ' '",
            "    for i in range(len(board)):",
            "        first_row += str(i + 1)",
            "    joined_rows = [first_row]",
            "    for i in range(len(board)):",
            "        joined_row = str(i + 1) + ''.join(board[i])",
            "        joined_rows.append(joined_row)",
            "    return \"\\n\".join(joined_rows)"
        ],
        "page": "Types",
        "program": [
            "def format_board(board):",
            "    first_row = ' '",
            "    for i in range(len(board)):",
            "        first_row += str(i + 1)",
            "    joined_rows = [first_row]",
            "    for i in range(len(board)):",
            "        joined_row = str(i + 1) + ''.join(board[i])",
            "        joined_rows.append(joined_row)",
            "    return \"\\n\".join(joined_rows)"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "format_board_with_numbers"
    },
    {
        "page": "Interactive Programs with <code>input()</code>",
        "program": [
            "print('Type your name, then press Enter:')",
            "name = input()",
            "print(f'Hello {name}!')"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "Type your name, then press Enter:\n",
                    "type": "stdout"
                },
                {
                    "text": "",
                    "type": "input_prompt"
                },
                {
                    "text": "<input: there>\n",
                    "type": "stdout"
                },
                {
                    "text": "Hello there!\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "first_input"
    },
    {
        "get_solution": [
            "super_secret_number = 7",
            "print(\"What number am I thinking of?\")",
            "guess = input()",
            "if int(guess) == super_secret_number:",
            "    print(\"Amazing! Are you psychic?\")",
            "else:",
            "    print(\"Nope!\")"
        ],
        "page": "Interactive Programs with <code>input()</code>",
        "program": [
            "super_secret_number = 7",
            "print(\"What number am I thinking of?\")",
            "guess = input()",
            "if int(guess) == super_secret_number:",
            "    print(\"Amazing! Are you psychic?\")",
            "else:",
            "    print(\"Nope!\")"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "What number am I thinking of?\n",
                    "type": "stdout"
                },
                {
                    "text": "",
                    "type": "input_prompt"
                },
                {
                    "text": "<input: 7>\n",
                    "type": "stdout"
                },
                {
                    "text": "Amazing! Are you psychic?\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "convert_input_to_int"
    },
    {
        "page": "Nested List Assignment: Playing Moves on the Board",
        "program": [
            "def play_move(board, player):",
            "    board[1] = player",
            "",
            "def play_game():",
            "    game_board = [\" \", \" \", \" \"]",
            "    play_move(game_board, \"X\")",
            "    print(game_board)",
            "",
            "play_game()"
        ],
        "response": {
            "message": "",
            "passed": true,
            "prediction": {
                "answer": "[' ', 'X', ' ']",
                "choices": [
                    "X",
                    "' '",
                    "'X'",
                    "[' ']",
                    "['X']",
                    "[' ', ' ', ' ']",
                    "['X', ' ', ' ']",
                    "[' ', 'X', ' ']",
                    "[' ', ' ', 'X']",
                    "Error"
                ]
            },
            "result": [
                {
                    "text": "[' ', 'X', ' ']\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "modify_list_in_function"
    },
    {
        "page": "Nested List Assignment: Playing Moves on the Board",
        "program": [
            "def play_move(board, player):",
            "    row = board[1]",
            "    row[0] = player",
            "",
            "def play_game():",
            "    board = [",
            "        [\" \", \" \", \" \"],",
            "        [\" \", \" \", \" \"],",
            "        [\" \", \" \", \" \"],",
            "    ]",
            "    play_move(board, \"X\")",
            "    print(board)",
            "",
            "play_game()"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "[[' ', ' ', ' '], ['X', ' ', ' '], [' ', ' ', ' ']]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "nested_assignment_two_lines"
    },
    {
        "get_solution": [
            "def play_move(board, player):",
            "    row = int(input()) - 1",
            "    col = int(input()) - 1",
            "    board[row][col] = player"
        ],
        "page": "Nested List Assignment: Playing Moves on the Board",
        "program": [
            "def play_move(board, player):",
            "    row = int(input()) - 1",
            "    col = int(input()) - 1",
            "    board[row][col] = player"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "nested_assignment_input"
    },
    {
        "page": "Making the Board",
        "program": [
            "def make_board(size):",
            "    row = []",
            "    for _ in range(size):",
            "        row.append(' ')",
            "    board = []",
            "    for _ in range(size):",
            "        board.append(row)",
            "    return board",
            "",
            "def test():",
            "    board = make_board(3)",
            "    assert_equal(board, [",
            "        [' ', ' ', ' '],",
            "        [' ', ' ', ' '],",
            "        [' ', ' ', ' '],",
            "    ])",
            "    board[0][0] = 'X'",
            "    assert_equal(board, [",
            "        ['X', ' ', ' '],",
            "        [' ', ' ', ' '],",
            "        [' ', ' ', ' '],",
            "    ])",
            "",
            "test()"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": [
                {
                    "text": "OK\nError! [['X', ' ', ' '], ['X', ' ', ' '], ['X', ' ', ' ']] != [['X', ' ', ' '], [' ', ' ', ' '], [' ', ' ', ' ']]\n",
                    "type": "stdout"
                }
            ]
        },
        "step": "naive_make_board"
    },
    {
        "get_solution": [
            "def make_board(size):",
            "    board = []",
            "    for _ in range(size):",
            "        row = []",
            "        for _ in range(size):",
            "            row.append(' ')",
            "        board.append(row)",
            "    return board"
        ],
        "page": "Making the Board",
        "program": [
            "def make_board(size):",
            "    board = []",
            "    for _ in range(size):",
            "        row = []",
            "        for _ in range(size):",
            "            row.append(' ')",
            "        board.append(row)",
            "    return board"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "fix_make_board"
    },
    {
        "get_solution": [
            "def play_game(board_size, player1, player2):",
            "    board = make_board(board_size)",
            "    print(format_board(board))",
            "",
            "    player = player1",
            "    for _ in range(board_size * board_size):",
            "        play_move(board, player)",
            "",
            "        if winner(board):",
            "            print_winner(player)",
            "            return",
            "",
            "        if player == player1:",
            "            player = player2",
            "        else:",
            "            player = player1",
            "",
            "    print_draw()"
        ],
        "page": "The Full Tic-Tac-Toe Game",
        "program": [
            "def winning_line(strings):",
            "    strings = set(strings)",
            "    return len(strings) == 1 and ' ' not in strings",
            "",
            "def row_winner(board):",
            "    return any(winning_line(row) for row in board)",
            "",
            "def column_winner(board):",
            "    return row_winner(zip(*board))",
            "",
            "def main_diagonal_winner(board):",
            "    return winning_line(row[i] for i, row in enumerate(board))",
            "",
            "def diagonal_winner(board):",
            "    return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))",
            "",
            "def winner(board):",
            "    return row_winner(board) or column_winner(board) or diagonal_winner(board)",
            "",
            "def format_board(board):",
            "    size = len(board)",
            "    line = f'\\n  {\"+\".join(\"-\" * size)}\\n'",
            "    rows = [f'{i + 1} {\"|\".join(row)}' for i, row in enumerate(board)]",
            "    return f'  {\" \".join(str(i + 1) for i in range(size))}\\n{line.join(rows)}'",
            "",
            "def play_move(board, player):",
            "    print(f'{player} to play:')",
            "    row = int(input()) - 1",
            "    col = int(input()) - 1",
            "    board[row][col] = player",
            "    print(format_board(board))",
            "",
            "def make_board(size):",
            "    return [[' '] * size for _ in range(size)]",
            "",
            "def print_winner(player):",
            "    print(f'{player} wins!')",
            "",
            "def print_draw():",
            "    print(\"It's a draw!\")",
            "",
            "def play_game(board_size, player1, player2):",
            "    board = make_board(board_size)",
            "    print(format_board(board))",
            "",
            "    player = player1",
            "    for _ in range(board_size * board_size):",
            "        play_move(board, player)",
            "",
            "        if winner(board):",
            "            print_winner(player)",
            "            return",
            "",
            "        if player == player1:",
            "            player = player2",
            "        else:",
            "            player = player1",
            "",
            "    print_draw()"
        ],
        "response": {
            "message": "",
            "passed": true,
            "result": []
        },
        "step": "the_full_game"
    }
]