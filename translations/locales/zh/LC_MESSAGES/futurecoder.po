#
msgid ""
msgstr ""
"Language: zh\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. https://futurecoder.io/course/#AddingStrings
#.     # __code0__:
#.     'hello ' + 'world'
#.     'hello' + ' world'
#.     'hello' + ' ' + 'world'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27+world%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27hello%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27hello+%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27world%27
msgid "pages.AddingStrings.steps.final_text.text"
msgstr ""
"做得好！以下任何一个都是有效的解决方案：\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#AddingStrings
msgid "pages.AddingStrings.steps.hello_world_concat.text"
msgstr ""
"字符串可以使用 `+` 来相加，尽管这与数字相加的意思非常不同。例如，试试：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#AddingStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_space
msgid "pages.AddingStrings.steps.hello_world_space.hints.0.text"
msgstr "空格是一个字符，就像 `o` 或 `w` 一样。"

#. https://futurecoder.io/course/#AddingStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_space
msgid "pages.AddingStrings.steps.hello_world_space.hints.1.text"
msgstr "空格字符必须在引号内的某个地方。"

#. https://futurecoder.io/course/#AddingStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_space
msgid ""
"pages.AddingStrings.steps.hello_world_space.messages.literal_answer.text"
msgstr "你仍然必须将两个或更多字符串相加。"

#. https://futurecoder.io/course/#AddingStrings
msgid "pages.AddingStrings.steps.hello_world_space.requirements"
msgstr "使用 `+` 将两个或更多字符串相加，使结果为字符串 `'hello world'`。"

#. https://futurecoder.io/course/#AddingStrings
msgid "pages.AddingStrings.steps.hello_world_space.text"
msgstr ""
"你可以看到 `+` 将两个字符串连接在一起。技术上，这称为连接（concatenation）。\n"
"\n"
"这里有一个练习：稍微改变之前的代码，使结果为字符串 `'hello world'`，也就是在单词之间加一个空格。\n"
"\n"
"顺便说一下，如果你卡住了，可以点击右下角的灯泡图标获取提示。"

#. https://futurecoder.io/course/#AddingStrings
msgid "pages.AddingStrings.title"
msgstr "添加字符串"

#. https://futurecoder.io/course/#BasicForLoopExercises
msgid "pages.BasicForLoopExercises.steps.final_text.text"
msgstr ""
"我们进展得非常好！你正在解决问题并编写新代码！\n"
"让我们继续让事情变得更有趣。"

#. https://futurecoder.io/course/#BasicForLoopExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1
msgid "pages.BasicForLoopExercises.steps.loop_exercise_1.hints.0.text"
msgstr "你只需要使用一个 `print`，因为每个 print 都会输出在不同的行上。"

#. https://futurecoder.io/course/#BasicForLoopExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1
msgid "pages.BasicForLoopExercises.steps.loop_exercise_1.hints.1.text"
msgstr "你需要使用 `+`。"

#. https://futurecoder.io/course/#BasicForLoopExercises
#.     # __code0__:
#.     name = 'World'
#.     for character in name:
#.         print(character)
#.         print('---')
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27World%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.character
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.BasicForLoopExercises.steps.loop_exercise_1.text"
msgstr ""
"该进行一些练习了！修改这个程序：\n"
"\n"
"__code0__\n"
"\n"
"使其输出：\n"
"\n"
"    __no_auto_translate__\n"
"    ---W\n"
"    ---o\n"
"    ---r\n"
"    ---l\n"
"    ---d"

#. https://futurecoder.io/course/#BasicForLoopExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_2
msgid "pages.BasicForLoopExercises.steps.loop_exercise_2.hints.0.text"
msgstr "暂时忘记循环。你会如何编写一个程序，使其打印 `name` 3 次？"

#. https://futurecoder.io/course/#BasicForLoopExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_2
msgid "pages.BasicForLoopExercises.steps.loop_exercise_2.hints.1.text"
msgstr "这个解决方案看起来和我们在这一部分看到的其他程序非常相似。"

#. https://futurecoder.io/course/#BasicForLoopExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_2
msgid "pages.BasicForLoopExercises.steps.loop_exercise_2.hints.2.text"
msgstr "for 循环会创建一个变量，比如 `character`，但程序不需要使用它。"

#. https://futurecoder.io/course/#BasicForLoopExercises
msgid "pages.BasicForLoopExercises.steps.loop_exercise_2.text"
msgstr ""
"太棒了！现在写一个程序，使其为 `name` 中的每个字符打印一次 `name`。例如，对于 `name = 'Amy'`，它应该输出：\n"
"\n"
"    __no_auto_translate__\n"
"    Amy\n"
"    Amy\n"
"    Amy\n"
"\n"
"对于 `name = 'World'`，它应该输出：\n"
"\n"
"    __no_auto_translate__\n"
"    World\n"
"    World\n"
"    World\n"
"    World\n"
"    World\n"
"\n"
"顺便说一下，你可以在第一行将 `name` 设置为任何值。只有之后的程序部分会被检查。"

#. https://futurecoder.io/course/#BasicForLoopExercises
msgid "pages.BasicForLoopExercises.title"
msgstr "基础 for 循环练习"

#. https://futurecoder.io/course/#BasicTerminology
msgid "pages.BasicTerminology.steps.final_text.text"
msgstr ""
"你需要了解一些术语：\n"
"\n"
"一个 ***表达式*** 是一段有值的代码。例如，在这行代码中：\n"
"\n"
"    __no_auto_translate__\n"
"    sentence = 'Hello ' + name\n"
"\n"
"这里有三个表达式：\n"
"\n"
"1. `'Hello '`\n"
"2. `name`\n"
"3. `'Hello ' + name`\n"
"\n"
"相对而言，完整的行 `sentence = ...` 是一个 ***语句***。它是一个命令，告诉计算机执行一个动作。它没有自己的值。这意味着，例如，你不能将语句相加。以下代码是无效的：\n"
"\n"
"    (word = 'Hello') + (name = 'Bob')\n"
"\n"
"具体来说，像 `sentence = ...` 这样的语句，其中一个变量被赋予一个值，称为 ***赋值*** - 这个值被 *赋给* 变量。\n"
"\n"
"程序是按顺序执行的语句列表。一个 `for` 循环是一个 *复合语句*，这意味着它有自己的主体，其中包含其他语句。大多数语句也会包含表达式，而表达式可以包含其他更小的表达式，但表达式不能包含语句。\n"
"\n"
"计算表达式值的过程称为 ***求值*** 。计算机 *求值* `1 + 2` 得到值 `3`。\n"
"\n"
"执行循环的过程称为 ***迭代***。像 `for char in 'Hello':` 这样的代码是在 *遍历* 字符串 `'Hello'`。能够做到这一点意味着字符串是 *可迭代的*。相对而言，数字是不可迭代的，如果你尝试 `for char in 3:`，Python 会告诉你这一点。每次循环的运行称为 *一次迭代*，所以在这个例子中将会有 5 次迭代。"

#. https://futurecoder.io/course/#BasicTerminology
msgid "pages.BasicTerminology.title"
msgstr "基本术语"

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.0.text"
msgstr "记住，你可以使用 `*` 来乘法运算。"

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.1.text"
msgstr "这个程序的结构与之前你写的逐字符构建字符串的程序非常相似。"

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.2.text"
msgstr "创建一个新列表，然后在 for 循环中逐个元素地构建它。"

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.3.text"
msgstr "从一个空列表开始。"

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.4.text"
msgstr "你可以通过写 `[x]` 来创建一个包含一个元素 `x` 的列表。"

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.5.text"
msgstr "你可以通过添加一个包含一个元素的列表来向列表中添加一个元素。"

#. https://futurecoder.io/course/#BuildingNewLists
#.     # __code0__:
#.     numbers = [1, 2] + [3, 4]
#.     print(numbers)
#.     new_numbers = []
#.     new_numbers += numbers
#.     new_numbers += [5]
#.     print(new_numbers)
#.     # __code1__:
#.     numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#.     # __code2__:
#.     [6, 2, 8, 2, 10, 18, 4, 12, 10]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.new_numbers
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
msgid "pages.BuildingNewLists.steps.double_numbers.text"
msgstr ""
"列表和字符串有很多共同点。\n"
"例如，你可以将两个列表相加，将它们组合成一个新列表。\n"
"你也可以创建一个没有元素的空列表。\n"
"自己检查一下：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"有了这些知识，写一个程序，接受一个数字列表\n"
"并打印一个每个数字都被加倍的新列表。例如，给定：\n"
"\n"
"__code1__\n"
"\n"
"它将打印：\n"
"\n"
"__code2__"

msgid "pages.BuildingNewLists.steps.filter_numbers.disallowed.0.message"
msgstr "做得好，正确！不过，你应该使用 `.append()` 而不是 `+=`。"

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
msgid "pages.BuildingNewLists.steps.filter_numbers.hints.0.text"
msgstr "这与之前的练习非常相似。"

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
msgid "pages.BuildingNewLists.steps.filter_numbers.hints.1.text"
msgstr "不同之处在于，有时你应该跳过向新列表添加元素。"

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
msgid "pages.BuildingNewLists.steps.filter_numbers.hints.2.text"
msgstr "使用 `if` 语句。"

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
msgid "pages.BuildingNewLists.steps.filter_numbers.hints.3.text"
msgstr "使用比较运算符来测试一个数字是否足够大以添加。"

#. https://futurecoder.io/course/#BuildingNewLists
#.     # __code2__:
#.     numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#.     # __code1__:
#.     some_list.append(element)
#.     # __code0__:
#.     some_list += [element]
#.     # __code3__:
#.     [9, 6]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.element
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid "pages.BuildingNewLists.steps.filter_numbers.text"
msgstr ""
"太棒了！\n"
"\n"
"当你想将单个元素添加到列表的末尾时，实际上更常见的写法是：\n"
"\n"
"__code0__\n"
"\n"
"而不是：\n"
"\n"
"__code1__\n"
"\n"
"这两者之间并没有太大区别，但 `.append`\n"
"对大多数人来说会更熟悉和易读。\n"
"\n"
"现在使用 `.append` 写一个程序，接受一个数字列表并\n"
"打印一个只包含大于 5 的数字的新列表。\n"
"\n"
"例如，给定：\n"
"\n"
"__code2__\n"
"\n"
"它将打印：\n"
"\n"
"__code3__"

#. https://futurecoder.io/course/#BuildingNewLists
msgid "pages.BuildingNewLists.steps.final_text.text"
msgstr "太棒了！我们正在取得很大进展。"

#. https://futurecoder.io/course/#BuildingNewLists
msgid "pages.BuildingNewLists.title"
msgstr "创建新列表"

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.steps.empty_string.text"
msgstr ""
"`name`中的最后一个字符只有在循环结束时才会被添加到`line`中，而此时`print(line)`已经最后一次运行过了。因此，该字符和完整的`name`永远不会在三角形的底部打印出来。如果你感到困惑，可以尝试将`print(line)`放在`line = line + char`之前和之后。\n"
"\n"
"让我们去掉输出中的那些`-`字符。你可能已经能够猜到怎么做了。\n"
"\n"
"一个*空字符串*是一个完全不包含任何字符的字符串。\n"
"它的写法就是一对没有内容的引号：`''`。\n"
"它就像字符串的零。\n"
"将它添加到另一个字符串中，只会得到另一个字符串，保持不变，\n"
"就像`0 + 5`只是`5`一样。\n"
"\n"
"在shell中尝试这个：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.steps.final_text.text"
msgstr ""
"这不是很漂亮吗？\n"
"\n"
"从空开始并通过`for`循环逐步构建的模式是*非常*常见的\n"
"，你将会有很多练习机会。一些初始的空值是\n"
"`''`、`0`和`[]` - 一个空列表，你很快就会看到它。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.hello_plus_equals
msgid ""
"pages.BuildingUpStrings.steps.hello_plus_equals.output_prediction_choices.0"
msgstr ""
"Hello\n"
"Hello"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.hello_plus_equals
msgid ""
"pages.BuildingUpStrings.steps.hello_plus_equals.output_prediction_choices.1"
msgstr ""
"Hello\n"
"Hello!"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.hello_plus_equals
msgid ""
"pages.BuildingUpStrings.steps.hello_plus_equals.output_prediction_choices.2"
msgstr ""
"Hello!\n"
"Hello!"

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.steps.hello_plus_equals.text"
msgstr ""
"在我们查看更多循环之前，我们需要快速学习另一个概念。看看这个程序：\n"
"\n"
"__program_indented__\n"
"\n"
"你觉得`hello = hello + '!'`这一行做了什么？运行程序来找出答案。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.0"
msgstr ""
"-\n"
"W\n"
"-\n"
"o\n"
"-\n"
"r\n"
"-\n"
"l\n"
"-\n"
"d"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.1"
msgstr ""
"-W\n"
"-o\n"
"-r\n"
"-l\n"
"-d"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.2"
msgstr "-World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.3"
msgstr "-W-o-r-l-d"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.4"
msgstr ""
"-W\n"
"-Wo\n"
"-Wor\n"
"-Worl\n"
"-World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.5"
msgstr ""
"-World\n"
"-Worl\n"
"-Wor\n"
"-Wo\n"
"-W"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.6"
msgstr ""
"-World\n"
"-World\n"
"-World\n"
"-World\n"
"-World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.7"
msgstr ""
"-World\n"
"--World\n"
"---World\n"
"----World\n"
"-----World"

#. https://futurecoder.io/course/#BuildingUpStrings
#.     # __code0__:
#.     temp = hello + '!'
#.     hello = temp
#.     # __code1__:
#.     temp = hello
#.     hello = temp + '!'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.hello
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.temp
msgid "pages.BuildingUpStrings.steps.name_triangle.text"
msgstr ""
"Python并不在乎`hello`在`=`的左右两边，它只是像处理不同变量一样处理：它计算`hello + '!'`，此时是`'Hello' + '!'`，结果是`'Hello!'`，这就成为了`hello`的新值。如果有帮助的话，你可以将这一行想象成分成两个步骤：\n"
"\n"
"__code0__\n"
"\n"
"或者：\n"
"\n"
"__code1__\n"
"\n"
"这在循环中非常有用。尝试这个程序：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#BuildingUpStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.hints.0.text"
msgstr "首先确保你不是在使用这个页面上之前程序的损坏版本。"

#. https://futurecoder.io/course/#BuildingUpStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.hints.1.text"
msgstr "也就是说，`line = line + char`应该在`print(line)`之前。"

#. https://futurecoder.io/course/#BuildingUpStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.hints.2.text"
msgstr "除此之外，你只需要做一个***小***改动。"

#. https://futurecoder.io/course/#BuildingUpStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.hints.3.text"
msgstr "我们想要去掉`-`。所以就直接去掉它。"

#. https://futurecoder.io/course/#BuildingUpStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.hints.4.text"
msgstr "使用一个空字符串！"

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.text"
msgstr ""
"不要将空字符串与`' '`混淆，后者是一个包含一个字符（空格）的非空字符串。\n"
"\n"
"现在修复原始程序，去掉输出中的那些行，这样对于`name = 'World'`它将打印：\n"
"\n"
"    __no_auto_translate__\n"
"    W\n"
"    Wo\n"
"    Wor\n"
"    Worl\n"
"    World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
msgid ""
"pages.BuildingUpStrings.steps.name_triangle_missing_last_line.output_prediction_choices.0"
msgstr ""
"-W\n"
"-Wo\n"
"-Wor\n"
"-Worl\n"
"-World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
msgid ""
"pages.BuildingUpStrings.steps.name_triangle_missing_last_line.output_prediction_choices.1"
msgstr ""
"-Wo\n"
"-Wor\n"
"-Worl\n"
"-World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
msgid ""
"pages.BuildingUpStrings.steps.name_triangle_missing_last_line.output_prediction_choices.2"
msgstr ""
"-\n"
"-W\n"
"-Wo\n"
"-Wor\n"
"-Worl"

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.steps.name_triangle_missing_last_line.text"
msgstr ""
"花点时间确保你完全理解这个程序。它做的事情类似于：\n"
"\n"
"    line = '-'\n"
"\n"
"    char = 'W'\n"
"    line = line + char\n"
"         = '-'  + 'W'\n"
"         = '-W'\n"
"    print('-W')\n"
"\n"
"    char = 'o'\n"
"    line = line  + char\n"
"         = '-W'  + 'o'\n"
"         = '-Wo'\n"
"    print('-Wo')\n"
"\n"
"    char = 'r'\n"
"    line = line  + char\n"
"         = '-Wo' + 'r'\n"
"         = '-Wor'\n"
"    print('-Wor')\n"
"\n"
"    ...\n"
"\n"
"细节很重要。如果你交换最后两行并运行这个程序，会发生什么？\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.title"
msgstr "构建字符串"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.0.text"
msgstr "第一个字母前面应该没有空格，第二个字母前面应该有 1 个空格，第三个字母前面应该有 2 个空格，依此类推。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.1.text"
msgstr "你应该把空格保存在一个变量中，并像之前一样在循环中构建它们。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.2.text"
msgstr "不同之处在于，你需要在构建空格的同时打印字母。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.3.text"
msgstr "换句话说，你需要一个单独的循环来同时完成这两件事。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.4.text"
msgstr "循环的主体需要打印空格和字母，并且还要添加一个空格。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.5.text"
msgstr "由于第一个字母前面不应该有空格，所以在打印字母后你需要添加一个空格。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.messages.add_space_first.text"
msgstr ""
"快到了！每个字母前面多了一个空格。\n"
"确保你的循环第一次调用 `print` 时，\n"
"包含空格的变量是一个空字符串。\n"
"检查你的代码顺序。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.text"
msgstr ""
"太棒了！你真的掌握了这个！\n"
"\n"
"如果你想的话，可以在下面做一个额外的可选挑战。\n"
"如果不想，你可以继续到 [下一页](#BasicTerminology)。\n"
"如果你想的话，可以稍后再回来做这个。\n"
"\n"
"尝试写一个程序，输出给定的 `name` 以对角线的形式，例如：\n"
"\n"
"    W\n"
"     o\n"
"      r\n"
"       l\n"
"        d"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid "pages.BuildingUpStringsExercises.steps.final_text.text"
msgstr "哇，没什么能阻止你了！"

msgid "pages.BuildingUpStringsExercises.steps.name_box.disallowed.0.message"
msgstr ""
"做得好，这个解决方案是正确的！不过，它可以改进。\n"
"你只需要使用一个循环 - 使用更多的循环效率不高。\n"
"你可以重用包含 `-` 和 `+` 的变量。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.0.text"
msgstr "你在上一个练习中完成了所有困难的部分。现在只是简单地添加字符串。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.1.text"
msgstr "你只需要一个 for 循环 - 就是上一个练习中用于制作破折号的那个循环。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.2.text"
msgstr "不要试图一次性完成所有事情。把问题分解成更小、更简单的子问题。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.3.text"
msgstr ""
"尝试写一个程序，输出：\n"
"\n"
"    -----\n"
"    World\n"
"    -----"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.4.text"
msgstr "由于你需要输出三行独立的文本，你需要调用 `print()` 三次。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.5.text"
msgstr ""
"尝试写一个程序，输出：\n"
"\n"
"    |World|"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid "pages.BuildingUpStringsExercises.steps.name_box.text"
msgstr ""
"太棒了！\n"
"\n"
"顺便说一下，当你不需要使用变量时，通常的约定是将该变量命名为 `_`（下划线），例如 `for _ in name:`。这不会改变程序的运行方式，但对读者很有帮助。\n"
"\n"
"让我们把这个做得更花哨。扩展你的程序，在名字周围画一个框，像这样：\n"
"\n"
"    +-----+\n"
"    |World|\n"
"    +-----+"

msgid "pages.BuildingUpStringsExercises.steps.name_box_2.disallowed.0.message"
msgstr ""
"做得好，这个解决方案是正确的！\n"
"而且你使用了嵌套循环（一个循环在另一个循环里面），我们甚至还没有讲过！\n"
"不过，在这种情况下，嵌套循环效率不高。\n"
"你可以创建一个包含空格的变量，并在每一行中重用它。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
msgid "pages.BuildingUpStringsExercises.steps.name_box_2.hints.0.text"
msgstr "你需要对 `name` 使用两个独立的 for 循环。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
msgid "pages.BuildingUpStringsExercises.steps.name_box_2.hints.1.text"
msgstr "除了第一行和最后一行，其他每一行的中间都有相同的字符。这意味着你可以重用某些东西。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
msgid "pages.BuildingUpStringsExercises.steps.name_box_2.hints.2.text"
msgstr "创建一个包含中间空格的变量，并多次使用它。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
msgid "pages.BuildingUpStringsExercises.steps.name_box_2.hints.3.text"
msgstr "使用一个循环创建一堆空格，使用第二个循环打印一堆使用之前创建的空格的行。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid "pages.BuildingUpStringsExercises.steps.name_box_2.text"
msgstr ""
"你越来越棒了！看起来你需要更多的挑战……也许不把名字放在框里，而是让名字成为框？写一个程序，输出这个：\n"
"\n"
"    +World+\n"
"    W     W\n"
"    o     o\n"
"    r     r\n"
"    l     l\n"
"    d     d\n"
"    +World+"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.0.text"
msgstr "这个解决方案与原来的三角形程序非常相似，只需做一个小改动。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.1.text"
msgstr "你仍然想一次向 `line` 添加一个字符，只是要考虑你添加它的位置。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.2.text"
msgstr "你想让行反向，所以你需要反转/翻转某些东西。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.3.text"
msgstr "你需要在字符串之前添加字符，而不是之后。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.4.text"
msgstr "3 + 7 等于 7 + 3。所有数字都是如此。这对字符串也成立吗？"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid "pages.BuildingUpStringsExercises.steps.name_triangle_backwards.text"
msgstr ""
"非常好！现在修改程序，使每一行都是反向的，像这样：\n"
"\n"
"    __no_auto_translate__\n"
"    W\n"
"    oW\n"
"    roW\n"
"    lroW\n"
"    dlroW"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced
msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_spaced.hints.0.text"
msgstr "你需要再使用一个 `+`。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced
msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_spaced.hints.1.text"
msgstr "你需要使用一个由一个空格组成的字符串：`' '`。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#.     # __code0__:
#.     name = 'World'
#.     line = ''
#.     for char in name:
#.         line = line + char
#.         print(line)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27World%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.line
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.BuildingUpStringsExercises.steps.name_triangle_spaced.text"
msgstr ""
"修改这个程序：\n"
"\n"
"__code0__\n"
"\n"
"在三角形的每个字符后添加一个空格，使输出看起来像这样：\n"
"\n"
"    W\n"
"    W o\n"
"    W o r\n"
"    W o r l\n"
"    W o r l d"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
msgid "pages.BuildingUpStringsExercises.steps.name_underlined.hints.0.text"
msgstr "查看三角形程序以获取灵感。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
msgid "pages.BuildingUpStringsExercises.steps.name_underlined.hints.1.text"
msgstr "查看你为每个字符打印 `name` 的程序以获取灵感。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
msgid "pages.BuildingUpStringsExercises.steps.name_underlined.hints.2.text"
msgstr "你需要逐个字符地构建一个破折号（`-`）的字符串。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
msgid "pages.BuildingUpStringsExercises.steps.name_underlined.hints.3.text"
msgstr "for 循环将创建一个变量，比如 `char`，但程序不需要使用它。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#.     # __code0__:
#.     line = line + char
#.     # __code1__:
#.     line += char
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.line
msgid "pages.BuildingUpStringsExercises.steps.name_underlined.text"
msgstr ""
"太棒了！\n"
"\n"
"像：\n"
"\n"
"__code0__\n"
"\n"
"这样的代码是如此常见，以至于 Python 允许你简写。这样写是等价的：\n"
"\n"
"__code1__\n"
"\n"
"注意 `line = char + line` 没有简写。\n"
"\n"
"现在使用 `+=` 和 for 循环来编写自己的程序，打印出 '划线' 的 `name`，像这样：\n"
"\n"
"    World\n"
"    -----\n"
"\n"
"每个字符都应该对应一个 `-`。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid "pages.BuildingUpStringsExercises.title"
msgstr "字符串构建练习"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.final_text.text"
msgstr "错误信息中的“属性”一词指的是使用 `.` - 实际上，错误仅来自 `word.append`，甚至没有调用。"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.introducing_callable.text"
msgstr ""
"像 `len(things)` 或 `print(things)` 这样的表达式是一个函数 ***调用*** - 当你写下这些时，你是在 ***调用*** 函数 `len` 或 `print`。能够这样做意味着函数是 ***可调用的***：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.len_of_none.text"
msgstr ""
"`None` 是一个特殊的“空”值，不能做任何有趣的事情。它是一个常见的占位符，表示缺少一个真正有用的值。那些不想返回任何东西的函数默认返回 `None`。如果你看到关于 `None` 或 `NoneType` 的错误信息，通常意味着你把错误的东西赋值给了一个变量：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.methods_of_str.text"
msgstr ""
"***方法*** 是属于某种类型的函数，可以使用 `.` 在该类型的所有值上调用。例如，`upper` 和 `lower` 是字符串的方法，可以通过例如 `word.upper()` 来调用：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.no_append_for_str.text"
msgstr ""
"另一个例子是 `append` 是列表的方法。但你不能在列表上使用 `.upper` 或在字符串上使用 `.append`：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.not_callable.text"
msgstr ""
"大多数东西是不可调用的，所以尝试调用它们会给你一个错误：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.print_functions.text"
msgstr ""
"是时候再扩展一下你的词汇了。\n"
"\n"
"`print` 和 `len` 是 ***函数***。自己看看吧：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.print_returns_none.text"
msgstr ""
"在调用 `len(things)` 中，`things` 是一个 ***参数***。有时你也会看到 ***参数*** 这个术语，它基本上和参数的意思是一样的。这有点像你把参数给了函数 - 我们具体说参数 `things` 被 *传递* 给 `len`，而 `len` *接受* 或 *接收* 这个参数。\n"
"\n"
"`len(things)` 将计算出一个数字，例如 3，在这种情况下我们说 `len` ***返回*** 3。\n"
"\n"
"所有调用都必须返回某些东西...即使什么也不返回。例如，`print` 的工作是显示某些内容在屏幕上，而不是返回一个有用的值。所以它返回一些无用的东西：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.title"
msgstr "术语：调用函数和方法"

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid "pages.CallingFunctionsWithinFunctions.steps.final_text.text"
msgstr ""
"`birdseye` 只显示一个帧（函数调用）。一开始你会看到全局帧。\n"
"底部是对 `print_twice` 的调用。点击小蓝箭头进入\n"
"那个帧，然后点击下一个进入 `print_many`。"

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid ""
"pages.CallingFunctionsWithinFunctions.steps.print_twice_call_print_many.text"
msgstr ""
"函数的主体可以包含任何内容，包括函数调用。实际上，我们已经通过调用\n"
"print 做到了这一点。但调用我们自己的函数并没有什么不同，所以我们的函数可以互相调用！\n"
"\n"
"例如，我们可以用 `print_many` 来实现 `print_twice`：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid ""
"pages.CallingFunctionsWithinFunctions.steps.see_stack_in_birdseye.requirements"
msgstr "运行与上面相同的程序，但使用 `birdseye`。"

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid "pages.CallingFunctionsWithinFunctions.steps.see_stack_in_birdseye.text"
msgstr ""
"每次调用函数时，都会创建一个新的 *帧*，其中包含该调用的局部变量值\n"
"和当前发生的其他信息。当函数调用完成时，帧会被删除。\n"
"\n"
"你可以在右侧的 Python Tutor 中看到这一点，标题为 \"Frames\"。顶部是全局帧，\n"
"整个程序运行的顶层帧。当你点击下一步时，新的帧会出现\n"
"然后消失。在每个帧中，你可以看到变量的值。\n"
"\n"
"最后，使用 `birdseye` 运行程序。"

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid ""
"pages.CallingFunctionsWithinFunctions.steps.see_stack_in_pythontutor.requirements"
msgstr "运行与上面相同的程序，但使用 Python Tutor。"

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid ""
"pages.CallingFunctionsWithinFunctions.steps.see_stack_in_pythontutor.text"
msgstr ""
"`snoop` 每次函数调用开始时会显示：\n"
"\n"
"1. 日志中的新缩进级别。\n"
"2. `>>> Call to <function name>`\n"
"3. 参数的值。\n"
"4. 函数头行。\n"
"\n"
"它以 `<<< Return value from <function name>` 结束调用。我们很快就会学习返回值。\n"
"\n"
"现在再次使用 Python Tutor 运行程序。"

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid ""
"pages.CallingFunctionsWithinFunctions.steps.see_stack_in_snoop.requirements"
msgstr "运行与上面相同的程序，但使用 `snoop`。"

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid "pages.CallingFunctionsWithinFunctions.steps.see_stack_in_snoop.text"
msgstr ""
"理解这里发生的事情并知道如何\n"
"探索函数调用是很重要的，所以我们要在每个调试器中尝试一下。\n"
"\n"
"首先，再次使用 `snoop` 运行程序。"

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid "pages.CallingFunctionsWithinFunctions.title"
msgstr "在函数中调用函数"

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.0.text"
msgstr "棋盘上有多少条对角线？"

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.1.text"
msgstr "三个子列表的哪些条目构成每条对角线？你如何访问这些条目？"

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.2.text"
msgstr "每个列表总是有3个条目，所以不需要循环。"

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.3.text"
msgstr "这里有两个问题需要解决：检查特定对角线是否获胜，以及组合每条对角线的检查。"

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.4.text"
msgstr "一个问题可以使用 `and` 来解决，另一个可以使用 `or`。"

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.5.text"
msgstr "这与 `all_equal` 函数有很多相似之处。你甚至可以调用这个函数来帮助你！但你需要包含它的定义。"

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.6.text"
msgstr "类似于 `all_equal`，检查对角线上的3个条目是否相等，例如使用 `and`。"

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.7.text"
msgstr "使用 `or` 一起检查两个对角线。"

#. https://futurecoder.io/course/#CombiningAndAndOr
#.     # __code4__:
#.     def diagonal_winner(board):
#.         ...
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'O', 'X'],
#.                 ['X', 'X', 'O'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', 'O'],
#.                 ['X', 'O', 'O'],
#.                 ['O', 'X', 'X']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O'],
#.                 ['X', 'X', 'X'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     # __code3__:
#.     board = [
#.         ['X', 'O', 'X'],
#.         ['X', 'X', 'O'],
#.         ['O', 'O', 'X']
#.     ]
#.     # __code1__:
#.     (True or False) and False
#.     # __code2__:
#.     True or (False and False)
#.     # __code0__:
#.     True or False and False
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal_winner
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.text"
msgstr ""
"如果你从左到右随意阅读，你可能会认为：\n"
"\n"
"__code0__\n"
"\n"
"等同于\n"
"\n"
"__code1__\n"
"\n"
"但实际上它等同于\n"
"\n"
"__code2__\n"
"\n"
"这是因为 `and` 的优先级高于 `or`。\n"
"这很重要，因为第一个解释简化为 `True and False`，结果是 `False`，而第二个\n"
"解释简化为 `True or False`，结果是 `True`！\n"
"你可以在 shell 中尝试这两种选项，确认一下。\n"
"\n"
"**这里的教训是，在组合运算符时要特别小心。** 要么添加括号以确保安全，要么\n"
"将表达式拆分为更小的部分，并将每部分分配给一个变量。\n"
"这将使你的代码清晰、易读且不含歧义，避免让你犯下痛苦的错误。\n"
"\n"
"现在是练习时间。假设你正在编写一个程序来玩井字棋，\n"
"也称为圈圈叉叉或 X 和 O。如果你从未听说过井字棋，你可以在这里阅读规则\n"
"并玩几局 [这里](https://gametable.org/games/tic-tac-toe/)。\n"
"\n"
"我们需要检查是否有人赢得了比赛。我们的函数 `all_equal` 已经可以帮助检查是否连成线了。\n"
"\n"
"编写一个函数，检查是否有人通过在一条对角线上放置3个相同的棋子赢得了比赛。\n"
"棋盘以嵌套列表 `board` 的形式给出，包含3个子列表，每个子列表包含3个字符串，表示一行。例如：\n"
"\n"
"__code3__\n"
"\n"
"该函数应返回一个布尔值：如果某条对角线有3个相同的棋子，则返回 `True`，否则返回 `False`。\n"
"点击复制按钮以开始下面的代码。\n"
"我们为你提供了一些测试，你的任务是用你的代码替换 `...`。\n"
"\n"
"    __copyable__\n"
"__code4__"

#. https://futurecoder.io/course/#CombiningAndAndOr
msgid "pages.CombiningAndAndOr.steps.CombiningAndOr.text"
msgstr ""
"如果你在一个表达式中同时使用 `and` 和 `or`，这就像结合 `*` 和 `+` 一样。\n"
"运算符按特定顺序进行评估。\n"
"\n"
"例如，尝试在 shell 中运行以下代码。\n"
"你期待什么？\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#CombiningAndAndOr
#.     # __code0__:
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#.     # __code1__:
#.         diagonal1 = all_equal([board[0][0], board[1][1], board[2][2]])
#.         diagonal2 = all_equal([board[2][0], board[1][1], board[0][2]])
#.         return diagonal1 or diagonal2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.all_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.middle
msgid "pages.CombiningAndAndOr.steps.final_text.text"
msgstr ""
"干得好！这很难。以下是一些可能的解决方案：\n"
"\n"
"__code0__\n"
"\n"
"或者：\n"
"\n"
"__code1__"

#. https://futurecoder.io/course/#CombiningAndAndOr
msgid "pages.CombiningAndAndOr.title"
msgstr "组合 `and` 和 `or`"

#. https://futurecoder.io/course/#CombiningCompoundStatements
#.     # __code0__:
#.     sentence = 'Hello World'
#.     excited = True
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#.     sentence = new_sentence
#.     print(sentence)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Hello+World%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.excited
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.new_sentence
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.sentence
msgid "pages.CombiningCompoundStatements.steps.final_text.text"
msgstr ""
"注意 `if` 语句的主体（4 行）像往常一样缩进，而 `for` 循环的主体（1 行）在每行额外缩进了 4 个空格，以显示这些行在 `for` 循环内。你可以通过查看缩进来了解程序的整体结构。\n"
"\n"
"或者，你可以在 `for` 循环内放一个 `if`：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"这两个程序的结果完全相同。然而，第一个程序更高效，因为它只在需要时才遍历字符串，因为当 `excited = False` 时，什么都不会改变。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.0"
msgstr "Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.2"
msgstr "Hello World!!!!!!!!!!!"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.3"
msgstr "!!!!!!!!!!!Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.4"
msgstr "Hello World!"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.5"
msgstr "!Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.6"
msgstr "!Hello World!"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.7"
msgstr "H!e!l!l!o! !W!o!r!l!d!"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.8"
msgstr "!H!e!l!l!o! !W!o!r!l!d"

#. https://futurecoder.io/course/#CombiningCompoundStatements
msgid "pages.CombiningCompoundStatements.steps.for_inside_if.text"
msgstr ""
"像 `for` 循环和 `if` 语句这样的复合语句有一个主体，它是一个内部语句的列表。那些内部语句可以是任何东西，包括其他复合语句。尝试这个在 `if` 语句内的 `for` 循环的例子，当你想展示你 *真的* 很兴奋时：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#CombiningCompoundStatements
msgid "pages.CombiningCompoundStatements.title"
msgstr "组合复合语句"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.0.text"
msgstr "你需要在函数定义头部更改名称，但这还不是全部。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.1.text"
msgstr "如果你只是更改函数定义头部的名称，会发生什么？"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.2.text"
msgstr "你会得到一个错误。看看这个消息。它在告诉你什么？错误来自哪里？"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.3.text"
msgstr "如果你的函数叫 `say_hello`，那么 `greet(\"Alice\")` 代表什么？"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.4.text"
msgstr "你需要准确地更改程序中的 3 行。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.5.text"
msgstr "在每一行中，你只需更改一个单词。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.6.text"
msgstr "不要触碰函数的主体。它应该仍然包含 `print(\"How are you?\")`。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.7.text"
msgstr "在定义函数后，你仍然应该调用函数两次，传入参数 `\"Alice\"` 和 `\"Bob\"`。"

#. https://futurecoder.io/course/#DefiningFunctions
#.     # __code0__:
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22How+are+you%3F%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%22Hello+%7Bname%7D%21%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.DefiningFunctions.steps.change_function_name.text"
msgstr ""
"注意程序的输出是如何变化的。`How are you?` 被打印了两次。你可以把整个程序看作是\n"
"等同于这个：\n"
"\n"
"__code0__\n"
"\n"
"这展示了函数最有用的特性之一。它们让你可以多次重用相同的代码，而不必\n"
"重复自己。这就像在一个程序中编写另一个程序。\n"
"\n"
"函数定义的头部总是包含以下部分：\n"
"\n"
"1. 特殊关键字 `def`，后面跟一个空格。\n"
"2. 函数的名称。这就像一个变量名 - 你可以选择你想要的名称，但有一些限制，\n"
"例如，它不能包含空格。\n"
"3. 一对括号 `(` 和 `)`\n"
"4. 括号之间零个或多个参数名称，如果有多个，用逗号分隔。在这里我们有\n"
"一个名为 `name` 的参数。\n"
"5. 一个冒号 `:`\n"
"\n"
"让我们做一些简单的练习。将函数的名称从 `greet` 改为 `say_hello`。\n"
"确保整个程序仍然可以正常工作，但不要更改其他任何内容。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.0.text"
msgstr "你需要在函数定义头部更改参数名称，但这还不是全部。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.1.text"
msgstr "如果你只是更改函数定义头部的参数名称，会发生什么？"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.2.text"
msgstr "你会得到一个错误。看看这个消息。它在告诉你什么？错误来自哪里？"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.3.text"
msgstr "如果参数叫 `person_name`，那么 `print(f\"Hello {name}!\")` 代表什么？"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.4.text"
msgstr "你需要准确地更改程序中的 2 行。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.5.text"
msgstr "在每一行中，你只需更改一个单词。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.6.text"
msgstr "不要触碰函数定义后的部分，即 `say_hello(\"Alice\")` 和 `say_hello(\"Bob\")`。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.7.text"
msgstr "你应该在函数主体中仍然有两个语句，包括 `print(\"How are you?\")`。"

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.change_parameter_name.text"
msgstr "很好！现在做一个类似的练习：将参数的名称从 `name` 改为 `person_name`。"

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.define_greet.text"
msgstr ""
"你已经见过如何调用像 `print()` 和 `len()` 这样的函数。现在你将学习如何编写你自己的\n"
"函数，供你自己或其他人使用。这在程序变得更大更复杂时非常重要。\n"
"\n"
"这是一个简单的例子：\n"
"\n"
"__program_indented__\n"
"\n"
"这定义了一个名为 `greet` 的函数，它接受一个参数。在定义下面，我们调用这个函数两次。\n"
"运行代码看看会发生什么。"

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.final_text.text"
msgstr "完美！现在你已经掌握了定义函数的基础知识。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
msgid "pages.DefiningFunctions.steps.how_are_you.output_prediction_choices.0"
msgstr ""
"Hello Alice!\n"
"How are you?\n"
"Hello Bob!\n"
"How are you?"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
msgid "pages.DefiningFunctions.steps.how_are_you.output_prediction_choices.1"
msgstr ""
"Hello Alice!\n"
"Hello Bob!\n"
"How are you?"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
msgid "pages.DefiningFunctions.steps.how_are_you.output_prediction_choices.2"
msgstr ""
"Hello Alice!\n"
"How are you?\n"
"Hello Bob!"

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.how_are_you.requirements"
msgstr ""
"在 `print(f\"Hello {name}!\")` 后添加 `print(\"How are you?\")`，并保持相同的缩进。\n"
"保持定义后的两个 `greet` 调用不变。"

#. https://futurecoder.io/course/#DefiningFunctions
#.     # __code0__:
#.     def greet(name):
#.         print(f"Hello {name}!")
#.         print("How are you?")
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22How+are+you%3F%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%22Hello+%7Bname%7D%21%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.greet
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.DefiningFunctions.steps.how_are_you.text"
msgstr ""
"函数定义是一个复合语句。像 `if` 和 `for` 一样，它有一个头部行，后面跟着一个缩进的主体\n"
"可以包含一个或多个语句。\n"
"\n"
"向函数添加另一个语句，使其看起来像这样：\n"
"\n"
"__code0__\n"
"\n"
"然后再次运行程序。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_many
msgid "pages.DefiningFunctions.steps.print_many.output_prediction_choices.2"
msgstr ""
"Hello\n"
"Hello\n"
"Hello"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_many
msgid "pages.DefiningFunctions.steps.print_many.output_prediction_choices.3"
msgstr "Hello"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_many
msgid "pages.DefiningFunctions.steps.print_many.output_prediction_choices.4"
msgstr ""
"H\n"
"e\n"
"l\n"
"l\n"
"o"

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.print_many.text"
msgstr ""
"函数可以有多个参数。试试下面的例子：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.0.text"
msgstr "这里没有聪明的解决问题，这只是关于遵循定义函数的步骤。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.1.text"
msgstr "确保你有上述列出的所有函数部分。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.2.text"
msgstr "这包括 `def`、`()` 和 `:`。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.3.text"
msgstr "确保你的函数名为 `print_twice`。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.4.text"
msgstr "确保它在括号 `()` 中接受一个名为 `x` 的参数。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.5.text"
msgstr "查看上面定义的其他函数以获取帮助。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.6.text"
msgstr "在函数主体中使用参数。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.7.text"
msgstr "确保主体是缩进的。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.8.text"
msgstr "主体需要两个语句或一个非常简单的循环。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.9.text"
msgstr "确保你不在 `print_twice` 的函数主体中调用 `print_twice`。检查你的缩进。"

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.print_twice_exercise.requirements"
msgstr "编写一个程序，定义一个名为 `print_twice` 的函数，如上所述。"

#. https://futurecoder.io/course/#DefiningFunctions
#.     # __code0__:
#.     Hello
#.     Hello
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.Hello
msgid "pages.DefiningFunctions.steps.print_twice_exercise.text"
msgstr ""
"做得好！\n"
"\n"
"现在编写你自己的函数 `print_twice`，它接受一个参数 `x`，并在两行上打印该参数两次。\n"
"\n"
"例如，`print_twice(\"Hello\")` 应该输出：\n"
"\n"
"__code0__\n"
"\n"
"你可以在函数定义后调用它来测试你的函数，但这不是必需的。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
msgid "pages.DefiningFunctions.steps.swap_parameters.hints.0.text"
msgstr "函数定义中唯一的更改应该是按照指示交换参数，其他什么都不做。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
msgid "pages.DefiningFunctions.steps.swap_parameters.hints.1.text"
msgstr "你需要修复对 `print_many` 的调用。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
msgid "pages.DefiningFunctions.steps.swap_parameters.hints.2.text"
msgstr "如果函数定义为 `def print_many(n, thing)`，那么 `print_many(\"Hello\", 3)` 代表什么？"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
msgid "pages.DefiningFunctions.steps.swap_parameters.hints.3.text"
msgstr "我们仍然希望 `thing = \"Hello\"` 和 `n = 3`。"

#. https://futurecoder.io/course/#DefiningFunctions
#.     # __code0__:
#.     thing = "Hello"
#.     n = 3
#.     for _ in range(n):
#.         print(thing)
#.     # __code1__:
#.     def print_many(n, thing):
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Hello%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_many
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.thing
msgid "pages.DefiningFunctions.steps.swap_parameters.text"
msgstr ""
"注意在函数定义和函数调用中用于分隔参数的逗号，以及定义和调用之间的对应关系：\n"
"\n"
"    def print_many(thing, n):\n"
"                     ^    ^\n"
"                     |    |\n"
"      print_many(\"Hello\", 3)\n"
"\n"
"所以调用 `print_many(\"Hello\", 3)` 就像运行：\n"
"\n"
"__code0__\n"
"\n"
"现在进行另一个简单的练习。交换函数定义头部中的参数，使其变为：\n"
"\n"
"__code1__\n"
"\n"
"如果你这样做而不更改其他任何内容，你将会得到一个错误。修复程序的其余部分，使其像以前一样工作。\n"
"*不要更改函数的主体*。"

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.title"
msgstr "定义函数"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
msgid "pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.hints.0.text"
msgstr "请记住，我们之前在函数中有 `for item in cart`，但是 `cart` 不再是一个参数。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
msgid "pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.hints.1.text"
msgstr "现在 `quantities` 是唯一定义客户购买内容的参数。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
msgid "pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.hints.2.text"
msgstr "你需要遍历 `quantities` 的键。记住，这里的“遍历”意味着用 `for` 循环“循环遍历”。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
msgid "pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.hints.3.text"
msgstr "你可以使用 `.keys()`，但这不是必须的。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#.     # __code0__:
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27box%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27cat%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27dog%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.item
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.price
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.prices
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quantities
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quantity
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.result
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.total_cost
msgid "pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text"
msgstr ""
"现在你可以用这个来修改我们上一页的函数，以移除 `cart` 参数：\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
msgid "pages.DictionaryKeysAndValues.steps.english_to_french.hints.0.text"
msgstr "你需要遍历（循环）字典。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
msgid "pages.DictionaryKeysAndValues.steps.english_to_french.hints.1.text"
msgstr "你需要打印出每个字典条目的键（英语单词）和值（法语单词）。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
msgid "pages.DictionaryKeysAndValues.steps.english_to_french.hints.2.text"
msgstr "你可以像往常一样使用键来获取值。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#.     # __code0__:
#.     def print_words(french):
#.         ...
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27boite%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27box%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27pomme%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.french
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_words
msgid "pages.DictionaryKeysAndValues.steps.english_to_french.text"
msgstr ""
"看起来不错！我们已经完全解决了计算总成本的问题。\n"
"\n"
"回到我们的第一个例子：写一个函数\n"
"打印出英语到法语字典中的每个单词及其翻译，并用它们的语言进行标记。\n"
"这是你的起始代码：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"例如，上面代码的最后一行应该打印：\n"
"\n"
"    English: apple\n"
"    French: pomme\n"
"    ---\n"
"    English: box\n"
"    French: boite\n"
"    ---"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
msgid "pages.DictionaryKeysAndValues.steps.english_to_german.hints.0.text"
msgstr "这仍然与之前的练习非常相似，尚无特别之处。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
msgid "pages.DictionaryKeysAndValues.steps.english_to_german.hints.1.text"
msgstr "你可以重用你之前的解决方案，只需添加另一个参数和一点点代码。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
msgid "pages.DictionaryKeysAndValues.steps.english_to_german.hints.2.text"
msgstr "你现在需要打印一个字典键和两个字典值。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#.     # __code0__:
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apfel%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27boite%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27box%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27kasten%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27pomme%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.french
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.german
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_words
msgid "pages.DictionaryKeysAndValues.steps.english_to_german.text"
msgstr ""
"太好了！现在我们也来添加一个德语字典：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"这应该打印：\n"
"\n"
"    English: apple\n"
"    French: pomme\n"
"    German: apfel\n"
"    ---\n"
"    English: box\n"
"    French: boite\n"
"    German: kasten\n"
"    ---\n"
"\n"
"这两个字典将始终具有相同的键，只是值不同。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
msgid "pages.DictionaryKeysAndValues.steps.final_text.text"
msgstr "恭喜你！到目前为止，你已经完成了课程的所有内容。更多内容正在进行中！"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
msgid "pages.DictionaryKeysAndValues.steps.introducing_keys.requirements"
msgstr "在 `quantities` 是一个字典的地方运行 `print(quantities.keys())`。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#.     # __code0__:
#.     quantities = {'apple': 1, 'cat': 10}
#.     print(quantities)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27cat%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quantities
msgid "pages.DictionaryKeysAndValues.steps.introducing_keys.text"
msgstr ""
"将这段代码复制到编辑器中：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"然后将 `print(quantities)` 改为 `print(quantities.keys())`，并运行整个程序。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.DictionaryKeysAndValues.steps.keys_are_iterable.text"
msgstr ""
"`dict` 的 `.keys()` 方法基本上做了你所期望的。你可以像遍历列表一样遍历它返回的值：\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
msgid "pages.DictionaryKeysAndValues.steps.keys_are_iterable2.requirements"
msgstr ""
"运行与上一步相同的代码，但在 `quantities` 后面不加 `.keys()`，所以中间的行是 `for key in quantities:`。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
msgid "pages.DictionaryKeysAndValues.steps.keys_are_iterable2.text"
msgstr ""
"实际上，你甚至不需要 `.keys()`。直接遍历字典会自动遍历它的键。\n"
"有时候写 `.keys()` 可以使你的代码更易读，但你并不是非得这样做。\n"
"去掉 `.keys()` 并再次运行代码。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.DictionaryKeysAndValues.steps.nested_dictionaries.text"
msgstr ""
"太美了！这里出现了一个模式。这两种语言可以合并成一个大的嵌套字典：\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
msgid "pages.DictionaryKeysAndValues.title"
msgstr "遍历字典键"

#. https://futurecoder.io/course/#EqualsVsIs
#.     # __code0__:
#.     list2 = list1.copy()
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.list1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.list2
msgid "pages.EqualsVsIs.steps.final_text.text"
msgstr ""
"现在 `list1 is list2` 是 `True`，因为 *只有一个列表*，而两个变量\n"
"`list1` 和 `list2` 都指向那个相同的列表。`list1.append(4)` 会添加到那个列表\n"
"，结果可以在 `print(list1)` 和 `print(list2)` 中看到，因为这两行\n"
"现在只是打印同一个列表的不同方式。\n"
"\n"
"我建议使用 Python Tutor 运行这两个版本，看看它是如何可视化这个差异的。\n"
"在第二种情况下，这两个变量都有箭头指向一个单一的列表对象。\n"
"\n"
"`list2 = list1` 并不会在变量之间创建一个永久的链接。如果你给*任意一个*变量赋一个新值\n"
"，例如 `list1 = [7, 8, 9]`，另一个变量将不会受到影响\n"
"，仍然指向原始列表。\n"
"\n"
"基本上，像这样的赋值：\n"
"\n"
"    list2 = <expression>\n"
"\n"
"意味着“让变量 `list2` 指向 `<expression>` 计算出的值”。\n"
"它并不会复制那个值，这就是为什么两个变量最终可以指向同一个列表。\n"
"但是正如我们之前学到的，`list2` 不记得 `<expression>`，只记得值。\n"
"它不知道其他变量。\n"
"\n"
"你可以使用 `copy` 方法复制一个列表：\n"
"\n"
"__code0__\n"
"\n"
"这将使程序再次像第一个版本一样运行。\n"
"\n"
"如果你遇到这种问题，并且仍然对这些内容感到困惑，可以阅读这篇文章 [Facts and myths about Python names and values](https://nedbatchelder.com/text/names.html)。"

#. https://futurecoder.io/course/#EqualsVsIs
msgid "pages.EqualsVsIs.steps.same_list.requirements"
msgstr "运行与上面相同的程序，但将*第二个* `[1, 2, 3]` 替换为 `list1`。"

#. https://futurecoder.io/course/#EqualsVsIs
msgid "pages.EqualsVsIs.steps.same_list.text"
msgstr ""
"这个程序相当简单，主要由你熟悉的内容组成。\n"
"我们创建了两个变量，它们指向列表。\n"
"这两个列表有相同的元素，所以它们是相等的：`list1 == list2` 是 `True`。\n"
"\n"
"但是接下来有一个新的比较运算符：`is`。在这里 `list1 is list2` 是 `False`。\n"
"这意味着尽管这两个列表相等，\n"
"它们仍然是两个独立、不同的列表。\n"
"因此，当你向 `list1` 添加 4 时，只有 `list1` 会改变。\n"
"\n"
"现在将 `list2 = [1, 2, 3]` 改为 `list2 = list1`，看看会有什么不同。"

#. https://futurecoder.io/course/#EqualsVsIs
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.EqualsVsIs.steps.two_separate_lists.text"
msgstr ""
"是时候学习一些常常被误解并导致错误的技术细节了。\n"
"运行这个程序：\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#EqualsVsIs
msgid "pages.EqualsVsIs.title"
msgstr "`==` 与 `is`，以及一个值的多个名称"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.FunctionsAndMethodsForLists.steps.append_vs_concatenate.text"
msgstr ""
"让我们回顾一下如何使用列表。假设我们有一个列表 `nums = [1, 2, 3]`。你可以使用：\n"
"\n"
"- **`append`**：将一个元素添加到列表的末尾。`nums.append(4)` 将列表更改为 `[1, 2, 3, 4]`。\n"
"- **`len`**：返回元素的数量。`len(nums)` 是 `3`。\n"
"- **`range`**：`range(n)` 是一个对象，类似于从 `0` 到 `n - 1` 的数字列表。这意味着它包含 `n` 个数字。特别地，`range(len(nums))` 就像 `[0, 1, 2]`，这些是 `nums` 中每个元素的索引。\n"
"- **`[]` (下标/索引)**：获取某个索引处的值。`nums[0]` 是 `1`，`nums[1]` 是 `2`，`nums[2]` 是 `3`。\n"
"- **`+`**：连接列表。`nums + [4, 5]` 是 `[1, 2, 3, 4, 5]`。\n"
"\n"
"注意，`nums.append(4)` 修改了现有的列表 `nums`，而 `nums + [4, 5]` 则没有。\n"
"保留 `nums + [4, 5]` 的一种方法是将其赋值给一个 *新变量*。\n"
"运行以下代码：\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid "pages.FunctionsAndMethodsForLists.steps.final_text.text"
msgstr "干得好！"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     some_list.index(value)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value
msgid "pages.FunctionsAndMethodsForLists.steps.index_predict_exercise.text"
msgstr ""
"**`index`**：使用以下语法返回列表中某个值的第一个索引\n"
"\n"
"__code0__\n"
"\n"
"如果该值不存在，则会引发错误。例如在终端中运行这一行：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.0.text"
msgstr ""
"你的解决方案应该有正好三条语句：`x = ['a', 'b', 'c']`，`y = ` 后面跟着一行从列表中精确复制的内容，以及 "
"`print(y)`。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.1.text"
msgstr "哪些代码行创建了一个新列表而不是修改？"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.2.text"
msgstr "`x` 是一个列表。`x` 的每个元素都是一个字符串。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.3.text"
msgstr "你可以将列表相加，你可以将字符串相加，但你不能将字符串和列表相加。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.4.text"
msgstr "如何创建一个包含一个元素的列表？"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.requirements"
msgstr ""
"复制上面的三行，然后将 `(insert_one_line_from_above)` "
"替换为从之前的长列表中精确复制的一行。你必须选择正确的行，只有一个正确答案。准确输入这一行。不要替换 `y = ` "
"部分，它应该仍然在你输入的行之前，保持在同一行。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     x = ['a', 'b', 'c']
#.     y = (insert_one_line_from_above)
#.     print(y)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.text"
msgstr ""
"很棒！\n"
"\n"
"你可能会意识到，通过 `x[len(x) - 1]` 访问最后一个元素有点麻烦。\n"
"同样的效果可以通过 `x[-1]` 来实现。\n"
"类似地，倒数第二个元素 `x[len(x) - 2]` 可以写成 `x[-2]`，依此类推。\n"
"Python 也允许我们从最后一个元素开始向后计数，使用 `-1`：\n"
"\n"
"| 索引     | 第一个元素 | 第二个元素 | 第三个元素  | ... | 倒数第二个元素 | 最后一个元素  |\n"
"|-----------|------------|-------------|-------------|-----|------------------|------------|\n"
"| 正向      | `0`        | `1`         | `2`         | ... | `len(x) - 2`     |`len(x) - 1`|\n"
"| 反向      | `-len(x)`  |`-len(x) + 1`|`-len(x) + 2`| ... | `-2`             |  `-1`      |\n"
"\n"
"下一个练习：\n"
"\n"
"这次，你将创建一个新列表 `y`，而不是修改列表 `x`：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"`y` 应该与 `x` 相同，但在末尾也有第一个元素的重复。\n"
"因此程序将打印 `['a', 'b', 'c', 'a']`。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     some_list.pop(index)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.index
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid "pages.FunctionsAndMethodsForLists.steps.pop_predict_exercise.text"
msgstr ""
"**`pop`**：使用以下语法移除并返回给定 *索引* 处的元素\n"
"\n"
"__code0__\n"
"\n"
"如果没有参数，即仅仅是 `some_list.pop()`，它将移除并返回最后一个元素。\n"
"如果 `index` 不是 `some_list` 的有效索引，则会引发错误。例如运行这个程序：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.0.text"
msgstr ""
"你的解决方案应该有正好三条语句：`x = ['a', 'b', 'c']`，然后一行从列表中精确复制（没有添加），以及 `print(x)`。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.1.text"
msgstr "将第一个元素移动到末尾需要两件事。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.2.text"
msgstr "移除第一个元素..."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.3.text"
msgstr "并将其添加到末尾。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.4.text"
msgstr "你可以使用哪些函数/方法来做到这一点？"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.5.text"
msgstr "记住，第一个索引是 0。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.requirements"
msgstr ""
"复制上面的三行，然后将 `(insert_one_line_from_above)` "
"替换为从之前的长列表中精确复制的一行。你必须选择正确的行，只有一个正确答案。准确输入这一行。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     x[len(x)] = x[0]
#.     x[len(x) - 1] = x[0]
#.     x[len(x) + 1] = x[0]
#.     x + x[0]
#.     [x] + x[0]
#.     x + [x[0]]
#.     [x] + [x[0]]
#.     x + x.pop(0)
#.     [x] + x.pop(0)
#.     x + [x.pop(0)]
#.     [x] + [x.pop(0)]
#.     x.pop(x.append(0))
#.     x.append(x.pop(0))
#.     x.append(x[0])
#.     x.append(x.index(0))
#.     x.index(x.append(0))
#.     x.pop(x.index(0))
#.     x.index(x.pop(0))
#.     # __code1__:
#.     x = ['a', 'b', 'c']
#.     (insert_one_line_from_above)
#.     print(x)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.text"
msgstr ""
"现在你将解决四个简短的练习，涉及这些概念。\n"
"下面是一组正确和错误的代码行混合在一起。\n"
"每个即将到来的练习都有一个解决方案，其中包含下面的正好一行，\n"
"你必须从列表中找到正确的行。\n"
"\n"
"__code0__\n"
"\n"
"这是一个不完整的程序：\n"
"\n"
"    __copyable__\n"
"__code1__\n"
"\n"
"用上面列表中的一行替换中间行。最终程序应该修改 `x`，将第一个元素移动到末尾，以便打印 `['b', 'c', 'a']`。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.0.text"
msgstr "你的解决方案应该有正好三条语句：`x = [1, 2, 0, 3]`，一行从列表中精确复制（没有添加），以及 `print(x)`。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.1.text"
msgstr "`x.remove(0)` 做了什么？"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.2.text"
msgstr "它移除一个元素！"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.3.text"
msgstr "哪个函数/方法也可以移除一个元素？"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.4.text"
msgstr "另一个函数/方法不能简单地被告知“移除 0”，它需要不同类型的信息。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.5.text"
msgstr "具体来说，它需要被告知 0 在哪里。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.6.text"
msgstr "哪个函数/方法提供那种信息？"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.requirements"
msgstr ""
"复制上面的三行，然后将 `x.remove(0)` 替换为从之前的长列表中精确复制的一行。你选择的行应该与 `x.remove(0)` "
"有相同的效果，以便程序打印 `[1, 2, 3]`。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     x = [1, 2, 0, 3]
#.     x.remove(0)
#.     print(x)
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.text"
msgstr ""
"干得好。现在是最后一个练习：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"用列表中的一行替换中间行 `x.remove(0)`，使其完成同样的功能。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     some_list.remove(value)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value
msgid "pages.FunctionsAndMethodsForLists.steps.remove_predict_exercise.text"
msgstr ""
"**`remove`**：使用以下语法移除给定 *值* 的第一个出现\n"
"\n"
"__code0__\n"
"\n"
"如果该值不在列表中，则会引发错误。例如运行这个程序：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.0.text"
msgstr ""
"你的解决方案应该有正好三条语句：`x = ['a', 'b', 'c']`，然后一行从列表中精确复制（没有添加），以及 `print(x)`。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.1.text"
msgstr "你需要获取 `x` 中第一个元素的值..."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.2.text"
msgstr "并将该值赋给 `x` 中的最后一个位置。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.3.text"
msgstr "如何在列表中指定索引处赋值？"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.4.text"
msgstr "`x` 中第一个和最后一个元素的索引是多少？"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.requirements"
msgstr ""
"复制上面的三行，然后将 `(insert_one_line_from_above)` "
"替换为从上一步的长列表中精确复制的一行。你必须选择正确的行，只有一个正确答案。准确输入这一行。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     x = ['a', 'b', 'c']
#.     (insert_one_line_from_above)
#.     print(x)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.text"
msgstr ""
"干得不错。在下一个练习中，从同一个不完整的程序开始：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"从列表中选择一行代码，将 `x` 的最后一个元素覆盖为第一个元素，\n"
"这样现在应该打印 `['a', 'b', 'a']`。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     some_list[index] = new_value
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.index
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.new_value
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_predict.text"
msgstr ""
"如你所见，`+` 不会修改 `nums`，但 `append` 会。\n"
"\n"
"这里有一些新东西。\n"
"\n"
"**`索引赋值`**：使用以下语法在索引处设置一个值（替换之前的值）\n"
"\n"
"__code0__\n"
"\n"
"如果 `index` 不是 `some_list` 的有效索引，则会引发错误。例如，运行这个程序：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid "pages.FunctionsAndMethodsForLists.title"
msgstr "列表的函数和方法"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.final_text.text"
msgstr ""
"如果你对 `range` 和/或 `len` 还不太熟悉，可以多练习和尝试一下。\n"
"这里有一些简单的练习，你可以自己试试。\n"
"\n"
"- 打印从 `1` 到 `100` 的所有数字（包括100）。\n"
"- 打印你的名字 100 次。\n"
"- 打印列表 `words` 中的每个单词，除了最后一个。\n"
"- 反向打印 `words` 中的每个单词，也就是说，先打印最后一个单词，然后是倒数第二个单词，依此类推。\n"
"- 回顾一下 [介绍列表](#IntroducingLists) 末尾的奖励问题，\n"
"无论你是否完成了它。现在用 `range` 和 `len` 会简单得多！\n"
"\n"
"当你准备好后，继续到下一页，挑战一下更难的内容。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.index_error
msgid "pages.GettingElementsAtPosition.steps.index_error.program"
msgstr "words[4]"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.index_error.requirements"
msgstr "运行类似 `words[3]` 的代码，但把 `3` 替换成一个更大的数字。"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.index_error.text"
msgstr ""
"通常，你可以用 `words[i]` 来获取位置为 `i` 的元素。这个操作叫做 *下标* 或 *索引*，而这个位置被称为 *索引*。\n"
"\n"
"你可能注意到了，第一个索引是 0，而不是 1。在编程中，计数是从 0 开始的。这看起来有点奇怪，但大多数编程语言都是这样做的，而且一般认为这样更好。\n"
"\n"
"这也意味着，在这个包含 4 个元素的列表中，最后一个索引是 3。如果你尝试获取一个更大的索引，会发生什么呢？"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.indices_out_of_bounds.text"
msgstr "现在在命令行中尝试 `__program__`。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.0"
msgstr ""
"This\n"
"is\n"
"a\n"
"list"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.2"
msgstr ""
"0\n"
"This\n"
"1\n"
"is\n"
"2\n"
"a\n"
"3\n"
"list"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.3"
msgstr ""
"This\n"
"0\n"
"is\n"
"1\n"
"a\n"
"2\n"
"list\n"
"3"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.4"
msgstr ""
"0\n"
"1\n"
"2\n"
"3\n"
"This\n"
"is\n"
"a\n"
"list"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.5"
msgstr ""
"This\n"
"is\n"
"a\n"
"list\n"
"0\n"
"1\n"
"2\n"
"3"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"indices = [0, 1, 2, 3]\n"
"\n"
"for index in indices:\n"
"    print(index)\n"
"    print(words[index])"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.introducing_len_and_range.text"
msgstr ""
"看，这样 `words[4]` 及更大的索引是不存在的，所以尝试这样会报错。\n"
"那个第一个程序有点重复。让我们用列表和循环来改进它！\n"
"\n"
"__program_indented__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_subscripting
msgid "pages.GettingElementsAtPosition.steps.introducing_subscripting.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"\n"
"print(words[0])\n"
"print(words[1])\n"
"print(words[2])\n"
"print(words[3])"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.introducing_subscripting.text"
msgstr ""
"循环是很好的，但通常你只是想从已知位置的列表中检索单个元素。\n"
"这就是方法：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words
msgid ""
"pages.GettingElementsAtPosition.steps.print_indices_and_words.hints.0.text"
msgstr "记得我们之前用过 `range(4)`。"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words
msgid ""
"pages.GettingElementsAtPosition.steps.print_indices_and_words.hints.1.text"
msgstr "这次，它应该适用于任何列表。如果列表有 5 个元素，或者 10 个呢？"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words
msgid ""
"pages.GettingElementsAtPosition.steps.print_indices_and_words.hints.2.text"
msgstr "把你学到的两个函数结合起来！"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#.     # __code0__:
#.     [0, 1, 2, ..., len(words) - 2, len(words) - 1]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.words
msgid "pages.GettingElementsAtPosition.steps.print_indices_and_words.text"
msgstr ""
"所以一般来说，有效的索引是：\n"
"\n"
"__code0__\n"
"\n"
"现在我们可以修复之前的程序，使其适用于任何列表。填入 `...`：\n"
"\n"
"    __copyable__\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"\n"
"    for index in ...:\n"
"        print(index)\n"
"        print(words[index])\n"
"\n"
"对于给定的 `words` 示例值，它应该打印：\n"
"\n"
"    0\n"
"    This\n"
"    1\n"
"    is\n"
"    2\n"
"    a\n"
"    3\n"
"    list"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.0.text"
msgstr "要访问列表的最后一个元素，你需要最后一个位置的索引。"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.1.text"
msgstr "如果列表有 2 个元素，第一个元素在索引 0，所以最后一个元素在索引 1。"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.2.text"
msgstr "同样，如果列表有 3 个元素，最后一个元素在索引 2。"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.3.text"
msgstr "你看到这些数字之间的规律了吗？你能怎么表达它？"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.4.text"
msgstr "你能想出一个适用于任何长度的通用解决方案吗？"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.print_last_element.text"
msgstr ""
"练习：对于任何非空列表 `words`，打印最后一个元素。例如，如果\n"
"\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"\n"
"你的程序应该打印 `list`。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.printing_the_range
msgid ""
"pages.GettingElementsAtPosition.steps.printing_the_range.output_prediction_choices.4"
msgstr ""
"This\n"
"is\n"
"a\n"
"list"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.GettingElementsAtPosition.steps.printing_the_range.text"
msgstr ""
"如你所见，结果是一样的。试试这个：\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid ""
"pages.GettingElementsAtPosition.steps.range_almost_the_same_as_list.text"
msgstr "`range(4)` 和 `[0, 1, 2, 3]` 是一样的……几乎是。试试 `__program__` 在命令行中。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_len
msgid "pages.GettingElementsAtPosition.steps.range_len.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"indices = range(4)\n"
"\n"
"for index in indices:\n"
"    print(index)\n"
"    print(words[index])"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.range_len.requirements"
msgstr "运行前一步的相同程序，但将第二行 `indices = [0, 1, 2, 3]` 替换为 `indices = range(4)`。"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.range_len.text"
msgstr ""
"这要好一些，但写出 `[0, 1, 2, ...]` 并不好，特别是如果它很长的话。\n"
"有一个方便的函数 `range` 可以为你完成这部分。将 `[0, 1, 2, 3]` 替换为 `range(4)`，\n"
"也就是 `indices = range(4)`。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_versus_list
msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.0"
msgstr "range(4)"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_versus_list
msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.1"
msgstr "range(0, 4)"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_versus_list
msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.2"
msgstr "list(range(4))"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_versus_list
msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.3"
msgstr "list(range(0, 4))"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_versus_list
msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.4"
msgstr "range(0, 1, 2, 3)"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.range_versus_list.text"
msgstr ""
"这可能有点令人惊讶。如果你感到好奇，`0` 代表范围的起始。\n"
"`0` 是默认起始，所以 `range(4)` 等于 `range(0, 4)`。\n"
"`4` 是范围的结束，但结束总是被排除，所以最后的值是 `3`。\n"
"如果你现在感到困惑，不用担心。\n"
"\n"
"`range(4)` 不是一个列表是有很好的理由的——它让程序更快、更高效。\n"
"现在不值得详细解释这个。\n"
"\n"
"但你可以很容易地将其转换为列表：在命令行中尝试 `__program__`。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.using_len_first_time
msgid "pages.GettingElementsAtPosition.steps.using_len_first_time.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"print(len(words))"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#.     # __code0__:
#.     [0, 1, 2, ..., n - 2, n - 1]
#.     # __code1__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.GettingElementsAtPosition.steps.using_len_first_time.text"
msgstr ""
"这只是一个演示，让你以更熟悉的形式看到范围。\n"
"你几乎不应该这样做。\n"
"\n"
"如果你感到不知所措，不用担心！你只需要知道 `range(n)`\n"
"与列表非常相似：\n"
"\n"
"__code0__\n"
"\n"
"顺便说一下，你可以使用 `len` 函数获取列表中的元素数量（通常称为 *长度*）。\n"
"通过运行以下代码来尝试一下：\n"
"\n"
"    __copyable__\n"
"__code1__"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.title"
msgstr "获取位置上的元素，`range()` 和 `len()`"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
msgid "pages.GettingElementsAtPositionExercises.steps.final_text.text"
msgstr "太棒了！休息一下，你值得拥有！"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.0.text"
msgstr "你需要查看 `things` 的所有可能索引，并检查哪个是答案。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.1.text"
msgstr "要查看所有可能的索引，你需要使用 `range(len(things))` 的循环。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.2.text"
msgstr "要检查某个索引是否是答案，你需要使用："

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.3.text"
msgstr "- `if`"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.4.text"
msgstr "- 在下标中使用索引"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.5.text"
msgstr "- `==`"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.6.text"
msgstr "由于你在寻找第一个索引，一旦找到就需要停止循环。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.7.text"
msgstr "你最近学会了如何在中间停止循环。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.8.text"
msgstr "你需要使用 `break`。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.messages.all_indices.text"
msgstr ""
"你快到了！但是，这会打印所有的索引，\n"
"而不仅仅是第一个。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.messages.last_index.text"
msgstr ""
"你快到了！但是，这会打印 *最后* 一个索引，\n"
"而不是第一个。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
msgid "pages.GettingElementsAtPositionExercises.steps.index_exercise.text"
msgstr ""
"给定一个列表 `things` 和一个值 `to_find`，\n"
"打印 `to_find` 在列表中的第一个索引，即最低的数字 `i`，使得\n"
"`things[i]` 是 `to_find`。例如，对于\n"
"\n"
"    __no_auto_translate__\n"
"    things = ['on', 'the', 'way', 'to', 'the', 'store']\n"
"    to_find = 'the'\n"
"\n"
"你的程序应该打印 `1`。\n"
"\n"
"你可以假设 `to_find` 至少出现一次。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.0.text"
msgstr "你在命令行中尝试过字符串的索引和 `len()` 吗？"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.1.text"
msgstr "暂时忘记循环。你如何仅打印第一行，它包含两个字符串的第一个字符？"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.2.text"
msgstr "在第二行，你想打印每个字符串的第二个字符，以此类推。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.3.text"
msgstr "你需要一个 `for` 循环。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.4.text"
msgstr "你需要索引（下标）。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.5.text"
msgstr "你需要 `range`。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.6.text"
msgstr "你需要 `len`。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.7.text"
msgstr "你需要 `+`。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.8.text"
msgstr "你需要对两个字符串进行索引。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.9.text"
msgstr "你需要每次将相同的索引传递给两个字符串，以检索匹配的字符。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
msgid "pages.GettingElementsAtPositionExercises.steps.zip_exercise.text"
msgstr ""
"很好！\n"
"\n"
"顺便说一下，索引和 `len()` 也同样适用于字符串。在命令行中试试看。\n"
"\n"
"这是另一个练习。给定两个相同长度的字符串，例如：\n"
"\n"
"    __no_auto_translate__\n"
"    string1 = 'Hello'\n"
"    string2 = 'World'\n"
"\n"
"将它们垂直并排打印，每个字符之间留一个空格：\n"
"\n"
"    H W\n"
"    e o\n"
"    l r\n"
"    l l\n"
"    o d"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.0.text"
msgstr "这个解决方案与之前的解决方案有相同的整体结构和基本元素，但它明显更长，并且需要一些额外的想法和部分。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#.     # __code0__:
#.     for i in range(...):
#.         ...
#.         print(char1 + ' ' + char2)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char2
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.1.text"
msgstr ""
"特别是，它仍然应该包含类似于：\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.2.text"
msgstr "`range()` 中应该放什么？`len(string1)` 或 `len(string2)` 都不够好。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.3.text"
msgstr "你想为更长字符串中的每个字符进行一次循环迭代。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.4.text"
msgstr "这意味着你需要 `range(<最长字符串的长度>)`"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.5.text"
msgstr "换句话说，你需要找到两个值中最大的 `len(string1)` 和 `len(string2)`。你已经做过类似的练习。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.6.text"
msgstr ""
"一旦你理清了 `for i in range(...)`，`i` 有时会太大，无法成为两个字符串的有效索引。你需要在索引之前检查它是否太大。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.7.text"
msgstr "记住，`string1` 的最大有效索引是 `len(string1) - 1`。`len(string1)` 太大了。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.8.text"
msgstr "你需要两个 `if` 语句，一个针对每个字符串。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.9.text"
msgstr "当 `string1[i]` 无效时，你需要设置例如 `char1 = ' '`。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#.     # __code0__:
#.     for i in range(len(string1)):
#.         char1 = string1[i]
#.         char2 = string2[i]
#.         print(char1 + ' ' + char2)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.string1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.string2
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.text"
msgstr ""
"难以置信！\n"
"\n"
"你的解决方案可能看起来像这样：\n"
"\n"
"__code0__\n"
"\n"
"如果字符串长度不同，这样做就不太好。\n"
"实际上，这会根据 `string1` 或 `string2` 的长度不同而出现不同的问题。\n"
"你下一个挑战是通过用空格填充“缺失”的字符来解决这个问题。\n"
"\n"
"例如，对于：\n"
"\n"
"    __no_auto_translate__\n"
"    string1 = 'Goodbye'\n"
"    string2 = 'World'\n"
"\n"
"输出：\n"
"\n"
"    G W\n"
"    o o\n"
"    o r\n"
"    d l\n"
"    b d\n"
"    y\n"
"    e\n"
"\n"
"而对于：\n"
"\n"
"    __no_auto_translate__\n"
"    string1 = 'Hello'\n"
"    string2 = 'Elizabeth'\n"
"\n"
"输出：\n"
"\n"
"    H E\n"
"    e l\n"
"    l i\n"
"    l z\n"
"    o a\n"
"      b\n"
"      e\n"
"      t\n"
"      h"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
msgid "pages.GettingElementsAtPositionExercises.title"
msgstr "使用 `range()` 和 `len()` 的练习"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.dir_list.text"
msgstr ""
"完美！\n"
"\n"
"使用 Google 搜索“python list tutorial”这样的内容也很有用，比如说：\n"
"\n"
"- 当你搜索一个特定的方法失败时，你想手动找到它。\n"
"- 在这门课程后你对列表仍然感到困惑。\n"
"- 自从你学习列表以来已经有一段时间了，你需要提醒自己。\n"
"- 你在解决与列表相关的问题时遇到困难，需要回到基础，巩固你的基础知识。\n"
"\n"
"还有一些方法可以在不使用 Google 的情况下找到信息。尝试在命令行中输入 `__program__`。"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.final_text.text"
msgstr ""
"`dir()` 返回一个参数的属性列表，这些属性大多数是方法。许多方法会以 `__` 开头，你现在可以忽略它们 - "
"滚动到列表的末尾，你会看到一些熟悉的方法。"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.list_insert
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.hints.0.text"
msgstr "在你的搜索查询中使用“python”和“list”这两个词。"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.list_insert
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.hints.1.text"
msgstr "我们想把值放在 ____________，而不是放在开头或结尾？"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.list_insert
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.hints.2.text"
msgstr "'中间' 或 '在某个索引' 或 '在特定位置'"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.list_insert
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.hints.3.text"
msgstr "'python 在索引处添加值'"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.requirements"
msgstr ""
"运行与上面三行类似的代码，但将 `nums.append(9)` 改为正确的函数/方法调用\n"
"以将 9 放在第二个元素（在示例 `nums = [1, 2, 3, 4, 5]` 中是 2）之后，而不是放在最后。\n"
"中间那行应该有且只有一个正确答案。\n"
"你需要在线搜索以找出应该使用哪个函数/方法以及如何使用它。"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#.     # __code0__:
#.     nums = [1, 2, 3, 4, 5]
#.     nums.append(9)
#.     print(nums)
#.     # __code1__:
#.     [1, 2, 3, 4, 5, 9]
#.     # __code2__:
#.     [1, 2, 9, 3, 4, 5]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.nums
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.text"
msgstr ""
"找得好！我们再做一个。考虑这个程序：\n"
"\n"
"__code0__\n"
"\n"
"这会改变 `nums`，使其打印：\n"
"\n"
"__code1__\n"
"\n"
"但假设你不想让 9 在最后，你想让它在第二个和第三个元素之间，所以输出是：\n"
"\n"
"__code2__\n"
"\n"
"将中间那行 `nums.append(9)` 替换为正确的函数/方法调用来实现这一点。"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.sum_list
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.hints.0.text"
msgstr "在你的搜索查询中使用“python”和“list”这两个词。"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.sum_list
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.hints.1.text"
msgstr "用一个词来说，`91` 在列表 `[21, 55, 4, 91, 62, 49]` 中有什么特别之处？"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.sum_list
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.hints.2.text"
msgstr "'最大' 或 '最大的'"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.sum_list
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.hints.3.text"
msgstr "'python 列表中最大值'"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.requirements"
msgstr ""
"运行类似于 `sum([21, 55, 4, 91, 62, 49])` 的代码，但将 `sum` 替换为另一个特定函数的名称。\n"
"只有一个正确答案可以使用哪个函数。你需要在线搜索以找出哪个。\n"
"这是 Python 中一个常用的内置函数。"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.text"
msgstr ""
"知道我们刚刚讨论的函数是很有用的，但学习所有函数并不容易，还有很多其他函数。更重要的技能是能够查找信息。例如，如果你忘记了这些函数的名称，这里有一些典型的搜索方式：\n"
"\n"
"- `append`\n"
"    - python 向列表添加元素\n"
"    - python 在列表末尾添加项目\n"
"- `len`\n"
"    - python 列表的大小\n"
"    - python 列表中的元素数量\n"
"    - python 字符串中有多少个字符\n"
"- `sum`\n"
"    - python 添加数字列表\n"
"    - python 数字的总和\n"
"- `in`\n"
"    - python 检查列表是否包含值\n"
"    - python 测试列表是否有元素\n"
"- `index`\n"
"    - python 获取元素的位置\n"
"    - python 获取值的索引\n"
"\n"
"现在让我们练习这个技能。找一个函数/方法，它返回列表中比其他任何值都大的值。例如，给定列表 `[21, 55, 4, 91, 62, 49]`，它将返回 `91`。你应该在命令行中写下这个答案，作为一个小表达式。例如，如果你在寻找函数 `sum`，你可以写 `sum([21, 55, 4, 91, 62, 49])`。不要手动用循环来解决这个问题。注意，你要找的函数在这里之前没有提到过。"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid "pages.HowToFindInformationWithGoogleAndMore.title"
msgstr "如何使用 Google 查找信息，以及更多"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.0.text"
msgstr "你已经学会了完成这个任务所需的所有工具。我相信你！看看之前的程序获取灵感吧。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.1.text"
msgstr "你需要一个循环来逐个字符构建新的句子。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.2.text"
msgstr "你需要一个 `if/else` 来决定是添加大写字母还是小写字母。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.3.text"
msgstr "你的 `if/else` 需要根据循环的不同迭代执行不同的代码块。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.4.text"
msgstr "这意味着你的 `if` 条件需要是一个在循环内改变的变量。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.5.text"
msgstr "在第一次迭代中你需要一个大写字母。在接下来的迭代中你需要一个小写字母。"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.capitalise.text"
msgstr ""
"该挑战开始了！\n"
"\n"
"写一个程序，给定一个字符串 `sentence`，打印一个修改后的版本，\n"
"其中第一个字母大写，其余字母小写。\n"
"例如，无论输入 `sentence = 'hello world'`\n"
"还是 `'HELLO WORLD'`，输出都应该是 `Hello world`。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.0.text"
msgstr "不要改变已经存在的内容，只需添加一点代码。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.1.text"
msgstr "`else` 需要紧接在 `if` 代码块之后，中间不要有其他内容。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.2.text"
msgstr "`sentence += char` 无论 `excited` 是 `True` 还是 `False` 都需要执行。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.3.text"
msgstr "你 *可以* 在 `if` 和 `else` 块中都有一份 `sentence += char`，但有更好的方法。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.4.text"
msgstr "使用 `else` 来为 `char` 赋一个不同的值。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.5.text"
msgstr "如果 `excited` 是 `False`，那么 `char` 应该是 `'.'` 而不是 `'!'`。"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.else_full_stop.text"
msgstr ""
"如果 `excited` 为真，那么 `char` 被定义，一切运行正常。但如果不是，\n"
"`char` 从未被赋值，因此在 `sentence += char` 中使用它会失败。\n"
"\n"
"通过向 `if` 添加一个 `else` 子句来修复这个问题，这样如果 `excited` 为假，句子的末尾就会添加一个句号（`.`）而不是感叹号（`!`）。"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.final_text.text"
msgstr "完美！花点时间为你所取得的成就感到自豪。你能感觉到你的大脑在成长吗？"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.first_if_else.text"
msgstr ""
"一个 `if` 语句可以选择性地有一个 `else` 部分。运行这个例子：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.first_if_else_false.requirements"
msgstr "运行上一步的相同程序，但将 `True` 替换为 `False`，使得 `condition = False`。"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.first_if_else_false.text"
msgstr "现在将第一行改为 `condition = False` 并再次运行它。"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.if_upper_else_lower.text"
msgstr ""
"将 `else` 理解为“否则”或“否则的话”。这意味着如果 `if` 中的条件\n"
"为假，那么 `else` 的代码块将会执行。无论条件是真还是假，\n"
"两个代码块中恰好有一个会执行。\n"
"\n"
"这是一个更有趣的例子可以运行：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.if_upper_else_lower_false.requirements"
msgstr "运行上一步的相同程序，但将 `True` 替换为 `False`，使得 `excited = False`。"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.if_upper_else_lower_false.text"
msgstr ""
"`sentence.upper()` 是一种我们还没有遇到的新表达式。这里发生的事情是 `sentence` 是一个字符串，字符串有各种 *方法* 让你方便地计算出新的值，包括 `upper` 和 `lower`。这些名称指的是大写字母（大写字母）和小写字母（小写字母）。`'Hello World'.upper()` 的结果是 `'HELLO WORLD'`。不过，它不会改变 `sentence` 的内容，因此你必须再次用 `sentence = sentence.upper()` 赋值。\n"
"\n"
"现在将 `excited` 改为 `False` 并再次运行它。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
msgid "pages.IfAndElse.steps.spongebob.hints.0.text"
msgstr "这与之前的练习类似。不同之处在于你设置条件变量的时间和位置。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
msgid "pages.IfAndElse.steps.spongebob.hints.1.text"
msgstr "你需要有一个布尔变量，它在每次迭代时都会改变。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
msgid "pages.IfAndElse.steps.spongebob.hints.2.text"
msgstr ""
"首先写一个小程序，接受一个布尔变量并翻转它，也就是说，如果变量是 `True`，它变为 `False`，如果它最开始是 `False`，则变为 "
"`True`。不需要循环，只需一个 `if/else`。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
msgid "pages.IfAndElse.steps.spongebob.hints.3.text"
msgstr "你需要在 `if` 条件中使用这个变量，并且在代码块中也要对同一个变量赋值。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
msgid "pages.IfAndElse.steps.spongebob.hints.4.text"
msgstr "将这个翻转的 `if/else` 与选择大写或小写字母的那个结合起来。"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.spongebob.text"
msgstr ""
"太棒了！！！\n"
"\n"
"再来一个练习，然后你就可以放松了。\n"
"\n"
"写一个程序，以嘲讽的方式打印 `sentence`，例如：\n"
"\n"
"    OnE MoRe eXeRcIsE, aNd tHeN YoU CaN ReLaX.\n"
"\n"
"每隔一个字符应该是小写，其余的应该是大写。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char
msgid "pages.IfAndElse.steps.undefined_char.output_prediction_choices.0"
msgstr "Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char
msgid "pages.IfAndElse.steps.undefined_char.output_prediction_choices.1"
msgstr "Hello World!"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.undefined_char.requirements"
msgstr ""
"复制上面的程序。如果你想，可以按原样运行它。然后将 `excited = True` 改为 `excited = False` 并再次运行它。"

#. https://futurecoder.io/course/#IfAndElse
#.     # __code0__:
#.     sentence = 'Hello World'
#.     excited = True
#.     if excited:
#.         char = '!'
#.     sentence += char
#.     print(sentence)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Hello+World%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.excited
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.sentence
msgid "pages.IfAndElse.steps.undefined_char.text"
msgstr ""
"这是一个有问题的程序：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"你能看到问题吗？如果你运行它，一切似乎都很好。可能出什么问题呢？\n"
"\n"
"下面是剧透！你找到了吗？\n"
"\n"
"如果你将 `excited` 改为 `False` 会发生什么？"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.title"
msgstr "`if` 和 `else`"

#. https://futurecoder.io/course/#Indentation
msgid "pages.Indentation.steps.final_text.text"
msgstr ""
"当你缩进时，应该始终缩进4个空格。任何一致的缩进都是可以接受的，但4个空格是几乎所有人遵循的约定。请注意，编辑器通常会让你更容易做到这一点。例如，如果你在编辑器中按下键盘上的'Tab'键，它会为你插入4个空格。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.mismatched_indentations
msgid "pages.Indentation.steps.mismatched_indentations.program"
msgstr ""
"for character in name:\n"
"    print(character)\n"
"  print('---')"

#. https://futurecoder.io/course/#Indentation
msgid "pages.Indentation.steps.mismatched_indentations.text"
msgstr ""
"因为`print('---')`没有缩进，所以它不属于循环体。这意味着它只会在整个循环运行完毕后执行一次。这两个程序都是有效的，只是做的事情不同。\n"
"\n"
"下面的程序是无效的。循环体中的两行都缩进了，但缩进的数量不同。第一行以4个空格开始，第二行以2个空格开始。试着运行它。\n"
"\n"
"__program_indented__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.missing_indentation
msgid "pages.Indentation.steps.missing_indentation.program"
msgstr ""
"for character in name:\n"
"print(character)"

#. https://futurecoder.io/course/#Indentation
#.     # __code1__:
#.     for character in name:
#.         print(character)
#.     # __code0__:
#.     for character in name: print(character)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.character
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.Indentation.steps.missing_indentation.text"
msgstr ""
"这个示例循环：\n"
"\n"
"__code0__\n"
"\n"
"可以运行，但实际上通常（并且应该）写成这样：\n"
"\n"
"__code1__\n"
"\n"
"具体来说，要重复的代码（称为*主体*）在冒号（`:`）后开始新的一行，并且必须*缩进*，即在前面有一些空格。下面没有缩进的代码是无效的，运行它来看看：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#Indentation
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Indentation.steps.one_indented_line.text"
msgstr ""
"有两行缩进，所以它们都是主体的一部分，因此`---`在每个字符后都会被打印出来。现在尝试运行相同的代码，但最后一行没有缩进：\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#Indentation
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Indentation.steps.two_indented_lines.text"
msgstr ""
"空格是必需的，以告诉Python哪些代码行属于for循环的主体。当循环包含多行代码时，这一点至关重要，循环通常会这样做。例如，运行以下代码：\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#Indentation
msgid "pages.Indentation.title"
msgstr "缩进"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.0.text"
msgstr "`input()` 总是返回一个字符串。"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.1.text"
msgstr "看起来像数字的字符串仍然是字符串，而不是数字。"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.2.text"
msgstr "在 `super_secret_number = 7` 中，`7` 是一个数字，而不是字符串。"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.3.text"
msgstr "这使得 `super_secret_number` 也是一个数字。"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.4.text"
msgstr "字符串不能等于数字。"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.5.text"
msgstr "要检查两个值是否相等，首先确保它们是相同类型的。"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.6.text"
msgstr "所以要比较一个数字和一个字符串，首先将数字转换为字符串，或者将字符串转换为数字。"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.7.text"
msgstr "你在上一页学会了如何在字符串和数字之间转换。"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.8.text"
msgstr "使用 `int()` 将其转换为整数（整数）或使用 `str()` 将其转换为字符串。"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#.     # __code0__:
#.     super_secret_number = 7
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Amazing%21+Are+you+psychic%3F%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Nope%21%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22What+number+am+I+thinking+of%3F%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.guess
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.super_secret_number
msgid "pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text"
msgstr ""
"你输入的内容（不包括最后按下的 Enter）会从 `input()` 函数返回为字符串。\n"
"\n"
"理解 `input()` ***总是返回一个字符串*** 是至关重要的，无论用户输入了什么。\n"
"你需要将这个字符串转换为你需要的类型。\n"
"忘记这一点是导致混淆错误的常见原因。\n"
"\n"
"例如，这个程序乍一看似乎没问题，但如果你尝试一下，你会发现它实际上并不工作：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"修复程序，使得当用户输入 `super_secret_number` 的值（在这个例子中是 `7`）时，\n"
"程序按预期打印 `Amazing! Are you psychic?`。\n"
"当 `super_secret_number` 是任何整数（`int`）时，它应该可以工作。"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#.     # __code0__:
#.     if int(guess) == super_secret_number:
#.     # __code1__:
#.     if guess == str(super_secret_number):
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.guess
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.super_secret_number
msgid "pages.InteractiveProgramsWithInput.steps.final_text.text"
msgstr ""
"完美！\n"
"\n"
"这里有两个主要的修复方法。你可以将输入转换为数字：\n"
"\n"
"__code0__\n"
"\n"
"或者将正确答案转换为字符串：\n"
"\n"
"__code1__\n"
"\n"
"这两种方法之间一个重要的区别是，第一种方法会在用户输入不是数字的内容时引发错误，这可能是你想要的，也可能不是。"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.InteractiveProgramsWithInput.steps.first_input.text"
msgstr ""
"到目前为止，我们编写的程序都不是互动的。\n"
"为了制作我们的互动井字棋游戏，我们需要一种接收玩家输入的方法。\n"
"Python 允许我们使用内置的 `input` 函数来做到这一点。运行这个程序：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"当 `name = input()` 运行时，程序实际上会停止并等待你在 shell 中输入并按 Enter，\n"
"所以你需要输入字符后回车才能结束这个语句。"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
msgid "pages.InteractiveProgramsWithInput.title"
msgstr "使用 `input()` 的互动程序"

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise
msgid "pages.IntroducingAnd.steps.AndExercise.hints.0.text"
msgstr "如果你有类似 `x < 0 and x > 100` 的条件，那你就走错了方向。这对于 *任何* 值的 `x` 都会是 `False`！"

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise
msgid "pages.IntroducingAnd.steps.AndExercise.hints.1.text"
msgstr "使用 `and` 的解决方案与使用 `or` 的解决方案在几个方面是不同的。"

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise
msgid "pages.IntroducingAnd.steps.AndExercise.hints.2.text"
msgstr "我们使用 `or` 的解决方案首先判断 `x` 是否是一个无效的百分比，否则得出有效性。使用 `and` 将会反过来做这个判断。"

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise
msgid "pages.IntroducingAnd.steps.AndExercise.hints.3.text"
msgstr "你需要相应地反转 `return` 语句。"

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise
msgid "pages.IntroducingAnd.steps.AndExercise.hints.4.text"
msgstr "你也需要更改比较运算符。"

#. https://futurecoder.io/course/#IntroducingAnd
#.     # __code0__:
#.     def is_valid_percentage(x):
#.         if x < 0 or x > 100:
#.             return False
#.         else:
#.             return True
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.is_valid_percentage
msgid "pages.IntroducingAnd.steps.AndExercise.text"
msgstr ""
"现在让我们练习一下。之前我们使用 `or` 写了一个函数 `is_valid_percentage`。这是一个例子\n"
"解决方案：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"请将这个函数重写为使用 `and`。"

#. https://futurecoder.io/course/#IntroducingAnd
msgid "pages.IntroducingAnd.steps.FalseAndFalse.text"
msgstr ""
"最后，试试：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.0.text"
msgstr "这个列表将始终包含 3 个元素。"

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.1.text"
msgstr "这意味着你不需要使用循环。"

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.2.text"
msgstr "记得你可以使用 `row[0]` 获取第一个元素。"

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.3.text"
msgstr "第一个元素、第二个元素和第三个元素都需要相等。"

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.4.text"
msgstr "这意味着第一个元素应该等于第二个元素，同时也等于第三个元素。"

#. https://futurecoder.io/course/#IntroducingAnd
#.     # __code5__:
#.     def all_equal(row):
#.         ...
#.     assert_equal(all_equal(["X", "X", "X"]), True)
#.     assert_equal(all_equal(["O", "O", "O"]), True)
#.     assert_equal(all_equal(["X", "O", "X"]), False)
#.     # __code0__:
#.     def is_valid_percentage(x):
#.         if 0 <= x and x <= 100:
#.             return True
#.         else:
#.             return False
#.     # __code1__:
#.     def is_valid_percentage(x):
#.         return 0 <= x and x <= 100
#.     # __code4__:
#.     def is_valid_percentage(x):
#.         return 0 <= x <= 100
#.     # __code2__:
#.     a < b and b < c
#.     # __code3__:
#.     a < b < c
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.all_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.is_valid_percentage
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.text"
msgstr ""
"太棒了！这是一个可能的解决方案：\n"
"\n"
"__code0__\n"
"\n"
"和之前一样，我们可以将这个解决方案简化为：\n"
"\n"
"__code1__\n"
"\n"
"还有一个技巧可以进一步改进，叫做比较链。任何这样的条件：\n"
"\n"
"__code2__\n"
"\n"
"可以通过去掉多余的 `and b` 简化为：\n"
"\n"
"__code3__\n"
"\n"
"这适用于任何比较运算符，包括 `==`，而且这两个运算符甚至可以是不同的。\n"
"所以解决方案可以简化为：\n"
"\n"
"__code4__\n"
"\n"
"下一个练习：给定一个包含三个元素的列表，检查这三个元素是否相等。\n"
"\n"
"    __copyable__\n"
"__code5__"

#. https://futurecoder.io/course/#IntroducingAnd
msgid "pages.IntroducingAnd.steps.TrueAndFalse.text"
msgstr ""
"好的，现在试试：\n"
"\n"
"__program_indented__\n"
"\n"
"你期待什么？"

#. https://futurecoder.io/course/#IntroducingAnd
msgid "pages.IntroducingAnd.steps.TrueAndTrue.text"
msgstr ""
"在 Python 中另一个布尔运算符是 `and`。\n"
"表达式 `A and B` 只有在 `A` 和 `B` 都为 `True` 时才为 `True`。否则就是 `False`。\n"
"在 shell 中试试：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingAnd
#.     # __code0__:
#.     def all_equal(row):
#.         return row[0] == row[1] and row[0] == row[2]
#.     # __code2__:
#.         return row == [row[0], row[0], row[0]]
#.     # __code1__:
#.         return row[0] == row[1] == row[2]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.all_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
msgid "pages.IntroducingAnd.steps.final_text.text"
msgstr ""
"干得好。这里有许多可能的正确解决方案：\n"
"\n"
"__code0__\n"
"\n"
"或者再次使用比较链：\n"
"\n"
"__code1__\n"
"\n"
"或者检查它是否等于一个包含第一个元素三次的列表：\n"
"\n"
"__code2__"

#. https://futurecoder.io/course/#IntroducingAnd
msgid "pages.IntroducingAnd.title"
msgstr "介绍 `and`"

#. https://futurecoder.io/course/#IntroducingBirdseye
#.     # __code3__:
#.     __program_indented__
#.     # __code1__:
#.     (a * b) + (c * d)
#.     # __code2__:
#.     ((a * b) + c) * d
#.     # __code0__:
#.     a * b + c * d
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingBirdseye.steps.birdseye_loop_example.text"
msgstr ""
"虽然其他工具展示代码逐行运行和变量的值，但 `birdseye` 会显示程序中每个表达式的值。这让你看到一个复杂表达式是如何被分解成更小的子表达式\n"
"以及每个子表达式的值是什么。\n"
"\n"
"将鼠标悬停在程序最后一行的各种框住的表达式上。\n"
"当每个框被高亮时，它的值会在屏幕底部显示。点击框会将其固定在面板上，这样你可以同时查看多个表达式的值，并自由移动鼠标。\n"
"\n"
"在这种情况下，`birdseye` 显示表达式：\n"
"\n"
"__code0__\n"
"\n"
"被分解为\n"
"\n"
"__code1__\n"
"\n"
"而不是\n"
"\n"
"__code2__\n"
"\n"
"换句话说，Python 遵循数学中的常规运算顺序，而不是仅仅从左到右进行计算。\n"
"\n"
"请注意，有些表达式 `birdseye` 不会放在框中。在这种情况下，`2`、`3`、`4`、`5` 和 `print` 也是表达式，但它们的值是显而易见的，框住它们只会造成混乱。\n"
"\n"
"这是一个更复杂的例子可以尝试：\n"
"\n"
"    __copyable__\n"
"__code3__"

#. https://futurecoder.io/course/#IntroducingBirdseye
msgid "pages.IntroducingBirdseye.steps.final_text.text"
msgstr ""
"请注意：\n"
"\n"
"1. 在 for 循环旁边有一对箭头。点击它们可以在循环中导航，查看不同迭代中的发生情况。\n"
"2. 因为 `if` 而在某次迭代中未运行的代码会被灰色显示。内部的表达式没有值，因为它们没有被计算。\n"
"3. 表达式 `vowels` 和 `consonants` 记录的值取决于你查看的框。在循环后的行中，它们包含所有字母，但在循环内部它们只包含一些，具体有多少取决于你处于哪个迭代。\n"
"4. 在 `vowels.append(letter)` 中，你看到那些变量的值是 *在那个时刻*。这意味着 `letter` 即将被添加到 `vowels` 中，但这还没有发生，所以 `vowels` 不包含 `letter`。"

#. https://futurecoder.io/course/#IntroducingBirdseye
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingBirdseye.steps.first_birdseye_example.text"
msgstr ""
"你已经见过 `snoop` 和 Python Tutor。futurecoder 还提供了一个最后的工具来分析程序运行时的情况，叫做 `birdseye`。\n"
"\n"
"这是一个可以运行的示例程序。将其复制到编辑器中，然后点击 `birdseye` 按钮。这将打开一个新的浏览器标签页，显示可视化内容。\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingBirdseye
msgid "pages.IntroducingBirdseye.title"
msgstr "使用 `birdseye` 理解程序"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid ""
"pages.IntroducingDictionaries.steps.dict_access.special_messages.bad_french_value.text"
msgstr "哎呀，你需要先设置 `french = {'apple': 'pomme', 'box': 'boite'}`，才能继续。"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access.text"
msgstr ""
"`french` 是一个包含两个键值对的字典：\n"
"\n"
"- `'apple': 'pomme'`，其中 `'apple'` 是键，`'pomme'` 是值。\n"
"- `'box': 'boite'`，其中 `'box'` 是键，`'boite'` 是值。\n"
"\n"
"和列表一样，逗号 (`,`) 用于分隔各个项目（键值对）。冒号 (`:`) 用于分隔键和值。\n"
"请注意，使用大括号 (`{}`) 来创建字典，而不是在编写列表时使用的方括号 (`[]`)。\n"
"\n"
"记住，对于列表，你是根据它们的 *索引* 来获取值的，也就是它们在列表中的位置。\n"
"所以如果 `words = ['apple', 'box']`，那么 `words[0]` 是 `'apple'`，`words[1]` 是 `'box'`。\n"
"在 shell 中尝试这个：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid ""
"pages.IntroducingDictionaries.steps.dict_access2.special_messages.bad_french_value.text"
msgstr "哎呀，你需要先设置 `french = {'apple': 'pomme', 'box': 'boite'}`，才能继续。"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access2.text"
msgstr ""
"这不行，因为字典中项目的位置通常并不重要。\n"
"你通常不关心字典中的第 2 个或第 5 个或第 100 个单词，\n"
"你只想找到一个特定的单词，比如 'apple'。所以试试这个：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access3.requirements"
msgstr "在 shell 中运行与上一步相同的代码 (`french['apple']`)，但将 `'apple'` 替换为 `'box'`。"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid ""
"pages.IntroducingDictionaries.steps.dict_access3.special_messages.bad_french_value.text"
msgstr "哎呀，你需要先设置 `french = {'apple': 'pomme', 'box': 'boite'}`，才能继续。"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access3.text"
msgstr ""
"这样更好！\n"
"\n"
"现在在 shell 中运行类似的代码来查找 `'box'` 的翻译。"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid ""
"pages.IntroducingDictionaries.steps.dict_access4.special_messages.bad_french_value.text"
msgstr "哎呀，你需要先设置 `french = {'apple': 'pomme', 'box': 'boite'}`，才能继续。"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access4.text"
msgstr ""
"现在你既懂 Python 也懂法语了！\n"
"\n"
"现在让我们从法语翻译成英语：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.final_text.text"
msgstr ""
"对不起，你也不能这样做。你只能查找一个键以获取其值，而不能反过来。\n"
"字典 `french` 只有 2 个键：`'apple'` 和 `'box'`。`'pomme'` 是一个值，而不是一个键。\n"
"我们很快就会学习为什么不能直接查找值，以及你可以做些什么。\n"
"\n"
"请注意，`french[0]` 和 `french['pomme']` 都引发了相同类型的错误：`KeyError`。\n"
"这个错误意味着提供的键（在这种情况下是 `0` 或 `'pomme'`）在字典中没有找到。\n"
"并不是说 `french[0]` 不被 *允许*，而是它意味着和往常一样：\n"
"查找与键 `0` 关联的值。在这种情况下，它发现没有这样的键存在。\n"
"但是 `0` *可以* 是一个键，因为许多类型的键都是允许的，包括字符串和数字。"

#. https://futurecoder.io/course/#IntroducingDictionaries
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingDictionaries.steps.first_dict.text"
msgstr ""
"我们见过几种类型：`str`、`int`、`float`、`bool` 和 `list`。\n"
"只有一种类型可以包含多个值：`list`。\n"
"现在我们要学习另一种容器类型：`dict`，即 ***字典***。\n"
"\n"
"想象一下你熟悉的字典，你查找一个单词以找到它的定义或在另一种语言中的翻译。\n"
"Python 中的字典类似，但更通用。你查找一个 *键*（例如一个单词）以获取相关的 *值*（例如定义或翻译）。\n"
"\n"
"例如，这里有一个小字典，将英语单词翻译成法语：\n"
"\n"
"__code0__\n"
"\n"
"在 shell 中运行上面的代码。"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.title"
msgstr "介绍字典"

#. https://futurecoder.io/course/#IntroducingElif
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingElif.steps.dna_example.text"
msgstr ""
"快速的生物学课！你身体中的大多数细胞都包含完整的遗传密码在DNA中。\n"
"这由称为核苷酸的分子单位链组成，分为四种类型：\n"
"腺嘌呤、胞嘧啶、鸟嘌呤和胸腺嘧啶，简称为ACGT。\n"
"所以单链的一部分可能是这样的：\n"
"\n"
"    AGTAGCGTCCTTAGTTACAGGATGGCTTAT...\n"
"\n"
"这将与另一条链配对，其中A被T替换，反之亦然，\n"
"C被G替换，反之亦然，例如：\n"
"\n"
"    TCATCGCAGGAATCAATGTCCTACCGAATA...\n"
"\n"
"这两条链被“拉链”在一起形成著名的双螺旋结构，\n"
"通过匹配的A-T和C-G配对连接在一起。这些配对在细胞分裂和繁殖时复制DNA时至关重要。双螺旋被解开，代码被转录\n"
"成其相对版本以制作副本。\n"
"\n"
"我们将重复这个过程。让我们尝试一下我们刚刚写的同样类型的程序：\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingElif
msgid "pages.IntroducingElif.steps.dna_example_with_elif.requirements"
msgstr ""
"从本页第一步复制程序，但将那里的4个`if`块替换为这里的`if`和`elif`块的组合。换句话说，将最后三个`if`替换为`elif`，但保留第一个`if`不变。"

#. https://futurecoder.io/course/#IntroducingElif
#.     # __code0__:
#.     if char == 'A':
#.         char = 'T'
#.     elif char == 'T':
#.         char = 'A'
#.     elif char == 'G':
#.         char = 'C'
#.     elif char == 'C':
#.         char = 'G'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
msgid "pages.IntroducingElif.steps.dna_example_with_elif.text"
msgstr ""
"太棒了！你模仿了你自己细胞不断在做的事情。\n"
"\n"
"在`else`内部的`if`可以用一个单一的关键字`elif`替换。例如，\n"
"之前的代码可以改成这样：\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingElif
#.     # __code0__:
#.     if char == 'A':
#.         char = 'T'
#.     if char == 'T':
#.         char = 'A'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else
msgid "pages.IntroducingElif.steps.dna_example_with_else.hints.0.text"
msgstr ""
"改变：\n"
"\n"
"__code0__\n"
"\n"
"使其看起来像修订后的代码片段。这只是一个小改动，做的时候不要复制粘贴。"

#. https://futurecoder.io/course/#IntroducingElif
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else
msgid "pages.IntroducingElif.steps.dna_example_with_else.hints.1.text"
msgstr "现在对交换G和C的代码做同样的改变。"

#. https://futurecoder.io/course/#IntroducingElif
#.     # __code0__:
#.     if char == 'A':
#.         char = 'T'
#.     else:
#.         if char == 'T':
#.             char = 'A'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
msgid "pages.IntroducingElif.steps.dna_example_with_else.text"
msgstr ""
"哦，天哪，这不太行。`T`被改成了`A`，但`A`没有被改成任何东西。\n"
"你能看出原因吗？\n"
"\n"
"当`char == 'A'`时，`char = 'T'`的代码确实会运行。但这意味着接下来的\n"
"条件`char == 'T'`也会通过，因此`char = 'A'`，我们又回到了起点。\n"
"我们需要仅在`char`不是`A`的情况下将`char`从`T`改为`A`，\n"
"这意味着`char == 'A'`为`False`。我们可以用`else`来做到这一点，如下所示：\n"
"\n"
"__code0__\n"
"\n"
"现在修复程序以正确替换所有字符。"

#. https://futurecoder.io/course/#IntroducingElif
#.     # __code0__:
#.     if X:
#.         ...
#.     else:
#.         if Y:
#.             ...
#.         else:
#.             if Z:
#.                 ...
#.             else:
#.                 ...
#.     # __code1__:
#.     if X:
#.         ...
#.     elif Y:
#.         ...
#.     elif Z:
#.         ...
#.     else:
#.         ...
msgid "pages.IntroducingElif.steps.final_text.text"
msgstr ""
"当你想要运行众多代码块中的一个时，通常会有一串`elif`语句，就像在这个例子中一样。一般来说，这样的代码：\n"
"\n"
"__code0__\n"
"\n"
"可以重写为：\n"
"\n"
"__code1__\n"
"\n"
"这既更简短，又可以避免不愉快的嵌套缩进。\n"
"两者之间的区别只是表面上的：一旦计算机运行这段代码，它无法\n"
"分辨这两个版本之间的差异。\n"
"\n"
"请注意，`elif`后面可以选择性地跟一个最终的`else`。我们在DNA示例中没有包含，但我们可以添加一个来提醒我们输入中任何意外的字符，\n"
"或者如果我们对输入的有效性有信心，可以将`elif char == 'C':`改为`else:`。"

#. https://futurecoder.io/course/#IntroducingElif
msgid "pages.IntroducingElif.title"
msgstr "介绍 `elif`"

#. https://futurecoder.io/course/#IntroducingForLoops
msgid "pages.IntroducingForLoops.steps.final_text.text"
msgstr ""
"你可以几乎像读普通英语一样阅读这段代码：\n"
"\n"
"> 对于字符串 `name` 中的每个字符，打印该字符。\n"
"\n"
"每个字符都是一个普通字符串。 `character` 是一个普通变量，在 `:` 后面的代码运行之前会被赋予一个新值。所以上面的代码等同于：\n"
"\n"
"    __no_auto_translate__\n"
"    name = 'World'\n"
"\n"
"    character = 'W'\n"
"    print(character)\n"
"\n"
"    character = 'o'\n"
"    print(character)\n"
"\n"
"    character = 'r'\n"
"    print(character)\n"
"\n"
"    character = 'l'\n"
"    print(character)\n"
"\n"
"    character = 'd'\n"
"    print(character)\n"
"\n"
"注意，我们可以使用不同的变量名，`character` 只是让它更清晰。\n"
"\n"
"一个 for 循环通常遵循这个结构：\n"
"\n"
"    for <variable> in <collection>: <code to repeat>\n"
"\n"
"`for`、`in` 和 `:` 都是必不可少的。"

#. https://futurecoder.io/course/#IntroducingForLoops
msgid "pages.IntroducingForLoops.steps.first_for_loop.text"
msgstr ""
"好消息！你已经通过了无聊的基础知识。我们可以开始编写一些有趣的程序，享受一些乐趣。编程中最强大的概念之一是 *循环*，它允许你重复同样的代码。Python 有两种循环：`for` 循环和 `while` 循环。这里有一个 for 循环的例子，试着运行这个程序：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingForLoops
msgid "pages.IntroducingForLoops.title"
msgstr "介绍 For 循环"

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
msgid "pages.IntroducingFstrings.steps.basic_f_string_exercise.hints.0.text"
msgstr "这就像给定的 f-string 示例一样。"

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
msgid "pages.IntroducingFstrings.steps.basic_f_string_exercise.hints.1.text"
msgstr "你忘记加 `f` 了吗？"

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
msgid "pages.IntroducingFstrings.steps.basic_f_string_exercise.hints.2.text"
msgstr "你需要多少对花括号？"

#. https://futurecoder.io/course/#IntroducingFstrings
msgid "pages.IntroducingFstrings.steps.basic_f_string_exercise.text"
msgstr ""
"这会失败，因为我们不能在字符串 `\"Hello Alice. You are \"` 和数字 `age` 之间使用 `+`。\n"
"\n"
"通过用一个单独的 f-string 替换所有的字符串连接（+）来修复这个问题。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
msgid ""
"pages.IntroducingFstrings.steps.concatenate_string_number.output_prediction_choices.0"
msgstr "\"Hello \" + name + \". You are \" + age + \" years old.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
msgid ""
"pages.IntroducingFstrings.steps.concatenate_string_number.output_prediction_choices.1"
msgstr "Hello name. You are age years old."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
msgid ""
"pages.IntroducingFstrings.steps.concatenate_string_number.output_prediction_choices.2"
msgstr "Hello Alice. You are 20 years old."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
msgid ""
"pages.IntroducingFstrings.steps.concatenate_string_number.output_prediction_choices.3"
msgstr "Hello 'Alice'. You are 20 years old."

#. https://futurecoder.io/course/#IntroducingFstrings
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingFstrings.steps.concatenate_string_number.text"
msgstr ""
"f-string 的语法以 `f` 开头，后面跟着一个字符串。\n"
"f-string 可以在花括号 `{}` 内包含变量名。\n"
"它们会被替换为那些变量的值，转换为字符串。\n"
"变量可以是任何东西：字符串、数字、列表等等。\n"
"\n"
"因此，f-strings 让你轻松地组合字符串和数字，而这些是不能\n"
"简单地相加在一起的。例如，运行以下程序：\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingFstrings
msgid "pages.IntroducingFstrings.steps.eval_expr_inside_f_string.text"
msgstr ""
"除了变量，f-string 实际上可以在花括号内包含任何 Python 表达式。\n"
"在 shell 中试试这个：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingFstrings
msgid "pages.IntroducingFstrings.steps.final_text.text"
msgstr ""
"太棒了！\n"
"\n"
"从现在开始，鼓励你在可能的情况下使用 f-strings 而不是 `+` 来构建字符串。"

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.0.text"
msgstr "`print` 中的表达式有四个问题。"

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.1.text"
msgstr "找到人数的语法有问题。"

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.2.text"
msgstr "然后其中一个字符串的引号有问题。"

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.3.text"
msgstr "还有找到第一个人名字的语法有问题。"

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.4.text"
msgstr "而且你不能把字符串和数字相加！"

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.5.text"
msgstr "你在 f-string 中正确使用花括号了吗？"

#. https://futurecoder.io/course/#IntroducingFstrings
msgid "pages.IntroducingFstrings.steps.fix_broken_program.text"
msgstr ""
"如你所见，我们也可以使用双引号定义 f-string，就像定义普通字符串一样。\n"
"而且像引号一样，f-string 只是表示法。一旦它们被计算，计算机就会忘记\n"
"使用了 f-string，它只会把最终结果存储为普通字符串。\n"
"\n"
"这里有一个非常糟糕的程序：\n"
"\n"
"    __copyable__\n"
"    people = [\"Alice\", \"Bob\", \"Charlie\"]\n"
"    print('There are' + people.length() + 'people waiting, the first one's name is' + people.1 + '.')\n"
"\n"
"修复它！\n"
"你的解决方案应该适用于任何名为 `people` 的字符串列表。\n"
"例如，在上述情况下，它应该打印：\n"
"\n"
"    There are 3 people waiting, the first one's name is Alice."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.0"
msgstr "f\"{name} went to {meal} with {friend}.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.1"
msgstr "\"{name} went to {meal} with {friend}.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.2"
msgstr "{name} went to {meal} with {friend}."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.3"
msgstr "'name' went to 'meal' with 'friend'."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.4"
msgstr "name went to meal with friend."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.5"
msgstr "\"Alice\" went to \"lunch\" with 'Bob'."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.6"
msgstr "'Alice' went to 'lunch' with 'Bob'."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.7"
msgstr "\"Alice went to lunch with Bob.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.8"
msgstr "Alice went to lunch with Bob."

#. https://futurecoder.io/course/#IntroducingFstrings
#.     # __code0__:
#.     name + " went to " + meal + " with " + friend + '.'
#.     # __code1__:
#.     f"{name} went to {meal} with {friend}."
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22+went+to+%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22+with+%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%22%7Bname%7D+went+to+%7Bmeal%7D+with+%7Bfriend%7D.%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.friend
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.meal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingFstrings.steps.introduce_f_strings.requirements"
msgstr ""
"运行上面的程序，但在 `print()` 内替换这段代码：\n"
"\n"
"__code0__\n"
"\n"
"用：\n"
"\n"
"__code1__"

#. https://futurecoder.io/course/#IntroducingFstrings
#.     # __code0__:
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
#.     # __code1__:
#.     print(f"{name} went to {meal} with {friend}.")
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22+went+to+%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22+with+%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22lunch%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Bob%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%22%7Bname%7D+went+to+%7Bmeal%7D+with+%7Bfriend%7D.%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.friend
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.meal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingFstrings.steps.introduce_f_strings.text"
msgstr ""
"到目前为止，我们一直通过使用 `+` 来连接字符串，例如：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"然而，这有点繁琐。我们可以使用 *f-string* 更优雅地写同样的东西。\n"
"用下面的行替换上面程序的最后一行并运行它。\n"
"确保在字符串前加上 `f`。\n"
"\n"
"__code1__"

#. https://futurecoder.io/course/#IntroducingFstrings
msgid "pages.IntroducingFstrings.title"
msgstr "f-strings"

#. https://futurecoder.io/course/#IntroducingIfStatements
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise
msgid ""
"pages.IntroducingIfStatements.steps.excited_confused_exercise.hints.0.text"
msgstr "你只需要在现有程序中添加几行代码。所有现有的代码都应该保持不变。"

#. https://futurecoder.io/course/#IntroducingIfStatements
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise
msgid ""
"pages.IntroducingIfStatements.steps.excited_confused_exercise.hints.1.text"
msgstr "你添加的代码应该与现有代码非常相似。"

#. https://futurecoder.io/course/#IntroducingIfStatements
#.     # __code0__:
#.     sentence = 'Hello World'
#.     excited = False
#.     confused = True
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Hello+World%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.confused
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.excited
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.sentence
msgid "pages.IntroducingIfStatements.steps.excited_confused_exercise.text"
msgstr ""
"现在是练习时间。修改上面的程序，添加一个额外的\n"
"布尔参数 `confused`，程序应该像这样开始：\n"
"\n"
"__code0__\n"
"\n"
"(`sentence` 可以是任何字符串，两个布尔值可以是 `True` 或 `False`)\n"
"\n"
"当 `confused` 为真时，打印的句子应该在末尾添加一个问号。\n"
"如果 `confused` 和 `excited` 都为真，句子应该以 `!?` 结束。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_example
msgid ""
"pages.IntroducingIfStatements.steps.excited_example.output_prediction_choices.0"
msgstr "Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_example
msgid ""
"pages.IntroducingIfStatements.steps.excited_example.output_prediction_choices.1"
msgstr "Hello World!"

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.excited_example.text"
msgstr ""
"注意第一个 `if` 语句中的代码运行了，但第二个没有。\n"
"\n"
"一般来说，`if` 语句看起来像这样：\n"
"\n"
"    if <condition>:\n"
"        <body>\n"
"\n"
"其中 `<condition>` 是任何计算为布尔值的表达式，而 `<body>` 是一个 **缩进的** 语句列表\n"
"可以包含一个或多个语句。这个结构与 `for` 循环非常相似。注意冒号 (`:`)，这是必不可少的。\n"
"\n"
"当计算机看到 `if <condition>:` 时，它会检查 `<condition>` 是否为 `True`。如果是，它就会执行主体。\n"
"如果不是，它会跳过并继续执行程序的其余部分。\n"
"\n"
"这是一个更有趣的例子供你运行：\n"
"\n"
"__program_indented__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_false_example
msgid ""
"pages.IntroducingIfStatements.steps.excited_false_example.output_prediction_choices.0"
msgstr "Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_false_example
msgid ""
"pages.IntroducingIfStatements.steps.excited_false_example.output_prediction_choices.1"
msgstr "Hello World!"

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.excited_false_example.requirements"
msgstr "运行上一步的程序，但将 `True` 替换为 `False`，所以 `excited = False`。"

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.excited_false_example.text"
msgstr ""
"（记住 `sentence += '!'` 意味着 `sentence = sentence + '!'`）\n"
"\n"
"将 `excited = True` 改为 `excited = False`，然后再次运行程序，看看有什么不同。"

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.final_text.text"
msgstr ""
"做得好！这个程序可以根据你如何组合 `excited`\n"
"和 `confused` 来做 4 件不同的事情。如果你想的话，可以尝试一下。"

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.first_if_statements.text"
msgstr ""
"布尔值是用于 *if 语句*（有时也称为 *条件语句*）中的。\n"
"\n"
"这里有一个简单的例子供你运行：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.introducing_booleans.text"
msgstr ""
"现在我们要学习如何告诉计算机做出决策，并且只在某些条件下运行代码。为此，我们需要一种新的值类型。你已经见过\n"
"数字和字符串，现在来认识一下 *布尔值*。布尔值只有两个：\n"
"`True` 和 `False`。试试这个程序：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.title"
msgstr "介绍 if 语句"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.can_contain_anything.text"
msgstr ""
"列表是一个 *序列*（有序的集合/容器），可以包含任意数量的值。\n"
"这些值通常被称为 *元素*。\n"
"它们可以是任何东西：数字、字符串、布尔值，甚至是列表！它们也可以是不同类型的混合。\n"
"\n"
"要直接创建一个列表，就像上面那样：\n"
"\n"
"1. 写一些方括号： `[]`\n"
"2. 如果你不想要一个空列表，就在里面写一些表达式作为元素。\n"
"3. 用逗号（`,`）分隔元素。\n"
"\n"
"这里还有一个创建列表的例子：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.final_text.text"
msgstr ""
"恭喜你！这很棘手！一种解决方案是这样的：\n"
"\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"    separator = ' - '\n"
"    total = ''\n"
"    not_first = False\n"
"\n"
"    for word in words:\n"
"        if not_first:\n"
"            total += separator\n"
"        total += word\n"
"        not_first = True\n"
"\n"
"    print(total)"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.first_list
msgid "pages.IntroducingLists.steps.first_list.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"\n"
"for word in words:\n"
"    print(word)"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.first_list.text"
msgstr ""
"现在是学习一种强大的新值类型 *列表* 的时候了。这里有一个例子：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.numbers_sum.text"
msgstr ""
"正如你在上面看到的，列表是 *可迭代的*，这意味着你可以用 `for loop` 遍历它们。\n"
"这里有一个程序可以将列表中的所有数字相加：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
msgid "pages.IntroducingLists.steps.strings_sum.hints.0.text"
msgstr "这与之前你做的逐个字符构建字符串的练习非常相似。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
msgid "pages.IntroducingLists.steps.strings_sum.hints.1.text"
msgstr "解决方案与添加数字的程序非常相似。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
msgid "pages.IntroducingLists.steps.strings_sum.hints.2.text"
msgstr "事实上，如果你尝试用一个字符串列表运行那个程序，会发生什么呢？"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
msgid "pages.IntroducingLists.steps.strings_sum.hints.3.text"
msgstr "问题在于 0。你不能将 0 加到字符串上，因为数字和字符串是不兼容的。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
msgid "pages.IntroducingLists.steps.strings_sum.hints.4.text"
msgstr "在字符串中是否有类似于 0 的概念？一个空的初始值？"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.strings_sum.text"
msgstr ""
"现在修改程序，使其可以将字符串列表相加，而不是数字。\n"
"例如，给定：\n"
"\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"\n"
"它应该打印：\n"
"\n"
"    __no_auto_translate__\n"
"    Thisisalist"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.0.text"
msgstr "这与之前的练习相似。你可以从那个解决方案开始。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.1.text"
msgstr "这个练习不需要任何花哨的东西，最终的解决方案可以非常简单。但要正确完成它很棘手，你需要仔细考虑方法。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.10.text"
msgstr "你 *可以* 编写一个程序来检查你是否在循环的 *第一次* 迭代中。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.11.text"
msgstr "只需创建一个布尔变量来跟踪这一点。无需任何比较运算符或数字。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.12.text"
msgstr "我们在[这里](#UnderstandingProgramsWithSnoop)看过做类似事情的程序。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.13.text"
msgstr "所以如果你只在第一次迭代中跳过添加分隔符，你将会有 `n - 1` 个分隔符。现在你只需要仔细考虑如何确保分隔符在正确的位置。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.14.text"
msgstr "暂时忘记循环，你需要按以下顺序将其添加到字符串中：第一个单词、分隔符、第二个单词、分隔符、第三个单词，等等。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.15.text"
msgstr ""
"这意味着在第一次迭代中，你只需添加第一个单词。在第二次迭代中，添加分隔符，然后是第二个单词。在第三次迭代中，添加分隔符，然后是第三个单词。依此类推。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.16.text"
msgstr "所以在你的循环中，先添加分隔符，然后再添加单词。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.17.text"
msgstr "通过检查一个布尔变量来跳过在第一次迭代中添加分隔符。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.18.text"
msgstr "在循环之前创建布尔变量，然后在循环内更改它。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.19.text"
msgstr "只在检查后在循环中更改它，否则你将无法跳过第一次迭代。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.2.text"
msgstr "在每次迭代中，除了列表中的一个单词外，你还必须添加分隔符。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.3.text"
msgstr "但你不想在添加列表中的最后一个单词后添加分隔符。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.4.text"
msgstr "不幸的是，字符串之间没有“减法”；你不能添加最后一个分隔符然后将其移除。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.5.text"
msgstr "让我们回顾一下。最终结果应该包含每个单词，以及 `n - 1` 个分隔符，其中 `n` 是单词的数量。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.6.text"
msgstr "所以你想在每次迭代中添加一个分隔符，除了一个。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.7.text"
msgstr "你可以使用 `if` 语句跳过在某一次迭代中添加分隔符。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.8.text"
msgstr "以后你将学习一种方法来遍历列表并检查你是否在最后一次迭代中，但现在你没有办法做到这一点。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.9.text"
msgstr "然而，你跳过的迭代不必是最后一次！"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.strings_sum_bonus.text"
msgstr ""
"太棒了！\n"
"\n"
"如果你愿意，你现在可以继续到[下一页](#BuildingNewLists)。\n"
"\n"
"作为一个可选的额外挑战：扩展程序以在每个单词 *之间* 插入一个分隔符字符串。\n"
"例如，给定\n"
"\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"    separator = ' - '\n"
"\n"
"它将输出：\n"
"\n"
"    __no_auto_translate__\n"
"    This - is - a - list"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.title"
msgstr "介绍列表"

#. https://futurecoder.io/course/#IntroducingNestedLists
msgid "pages.IntroducingNestedLists.steps.double_subscripting.requirements"
msgstr "运行 `print(strings[1][0])` 或类似的代码，使用 `birdseye` 来查看它是如何工作的。"

#. https://futurecoder.io/course/#IntroducingNestedLists
#.     # __code0__:
#.     string = strings[1]
#.     print(string[0])
#.     # __code1__:
#.     print(strings[1][0])
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.string
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
msgid "pages.IntroducingNestedLists.steps.double_subscripting.text"
msgstr ""
"你可能这样解决了这个问题：\n"
"\n"
"__code0__\n"
"\n"
"还有更简洁的方法。`strings[1]` 是一个表达式，像其他任何表达式一样，索引操作 `[0]`\n"
"可以用于任何表达式，而不仅仅是变量。\n"
"所以你可以跳过中间变量，直接用一行代码来完成：\n"
"\n"
"__code1__\n"
"\n"
"仔细看看这个语法。如果它看起来新奇又复杂，其实并不是。\n"
"这只是常见的索引语法，重复应用了两次。\n"
"在 `birdseye` 中尝试一下，看看 Python 是如何将其分解成更小的部分的。"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.0.text"
msgstr "这与之前的练习非常相似。"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.1.text"
msgstr "你还记得如何访问列表的最后一个位置（不使用 `len`）吗？"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.2.text"
msgstr "同样，你如何访问列表中的倒数第二个位置？"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.3.text"
msgstr "如果你想不起来，可以用谷歌搜索一下！"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.4.text"
msgstr "索引在列表和字符串上是类似的。"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.5.text"
msgstr "你遇到 `index out of range` 错误了吗？是字符串的问题，还是列表的问题？为什么？"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.6.text"
msgstr "确保你没有混淆列表索引和字符串索引的顺序。"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.7.text"
msgstr "如果你遇到困难，可以使用 `birdseye`。"

#. https://futurecoder.io/course/#IntroducingNestedLists
msgid "pages.IntroducingNestedLists.steps.double_subscripting_exercise.text"
msgstr ""
"使用这个语法，修改程序以打印列表 `strings` 中倒数第二个字符串的最后一个字母。\n"
"你必须像上面那样使用单个表达式，并且不允许使用 `len`。\n"
"你的解决方案应该适用于任何非空的字符串列表。\n"
"对于之前的示例输入，它应该打印 `f`。"

#. https://futurecoder.io/course/#IntroducingNestedLists
#.     # __code0__:
#.     strings[1].append("today?")
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22today%3F%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
msgid "pages.IntroducingNestedLists.steps.final_text.text"
msgstr ""
"太棒了！你现在非常了解嵌套索引。\n"
"\n"
"我们仍然可以使用之前学习的所有列表方法和函数。\n"
"例如，我们可以用 `append` 向 `strings` 的最后一个子列表添加一个新单词，\n"
"使其出现在 `'you'` 之后：\n"
"\n"
"__code0__\n"
"\n"
"毕竟，子列表 `strings[1]` 仍然是一个和其他列表一样的列表！\n"
"\n"
"在下一页，我们将学习如何遍历嵌套列表。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.0"
msgstr "hello"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.1"
msgstr "there"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.10"
msgstr "a"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.2"
msgstr "how"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.3"
msgstr "are"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.4"
msgstr "you"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.5"
msgstr "['hello', 'there']"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.6"
msgstr "['how', 'are', 'you']"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.7"
msgstr "h"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.8"
msgstr "t"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.9"
msgstr "e"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid "pages.IntroducingNestedLists.steps.first_nested_list_example.program"
msgstr ""
"strings = [['hello', 'there'], ['how', 'are', 'you']]\n"
"print(strings[1][0])"

#. https://futurecoder.io/course/#IntroducingNestedLists
msgid "pages.IntroducingNestedLists.steps.first_nested_list_example.text"
msgstr ""
"干得好！\n"
"\n"
"应用两次索引可以更强大。\n"
"我们不仅可以在字符串列表上使用它，还可以在 *列表的列表* 上使用。\n"
"例如，以下程序会打印什么？\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
msgid "pages.IntroducingNestedLists.steps.string_list_exercise.hints.0.text"
msgstr "你如何访问列表中的第二个字符串？"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
msgid "pages.IntroducingNestedLists.steps.string_list_exercise.hints.1.text"
msgstr "那么你如何访问字符串中的特定字母？"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
msgid "pages.IntroducingNestedLists.steps.string_list_exercise.hints.2.text"
msgstr "记住，列表和字符串的索引非常相似。"

#. https://futurecoder.io/course/#IntroducingNestedLists
#.     # __code0__:
#.     strings = ["abc", "def", "ghi"]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22abc%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22def%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22ghi%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
msgid "pages.IntroducingNestedLists.steps.string_list_exercise.text"
msgstr ""
"练习：给定一个字符串列表，打印列表中第二个字符串的第一个字母。例如，给定：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"你应该打印 `d`。"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.0.text"
msgstr "这与之前的练习非常相似。"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.1.text"
msgstr "你需要使用多少次索引？"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.2.text"
msgstr "首先你需要访问一个子列表。"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.3.text"
msgstr "然后访问该子列表中的一个字符串。"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.4.text"
msgstr "然后访问该字符串中的一个字母。"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.5.text"
msgstr "如果你遇到困难，可以使用 `birdseye`。"

#. https://futurecoder.io/course/#IntroducingNestedLists
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.text"
msgstr ""
"正如你所看到的，Python 允许我们使用 *嵌套列表*：一个每个元素都是另一个列表的列表（我们称它们为 *子列表*）。\n"
"\n"
"我们可以使用多于两次的索引。\n"
"写一个程序，接受像上面那样的嵌套列表 `strings`，\n"
"并打印 **第二个子列表中的第三个字符串的第一个字母**。\n"
"仅使用一个表达式，像在之前的练习中一样。\n"
"例如，对于上面的列表，它应该打印 `y`。"

#. https://futurecoder.io/course/#IntroducingNestedLists
msgid "pages.IntroducingNestedLists.title"
msgstr "介绍嵌套列表"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.0.text"
msgstr "想想你如何手动并系统地做到这一点，使用铅笔和纸。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.1.text"
msgstr "密码必须是四个字母长这一点非常重要。如果密码可以是任意长度，解决起来会困难得多。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.2.text"
msgstr "但是字符串 `letters` 可能包含任意数量的字符。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.3.text"
msgstr ""
"如果有 `n` 个不同的字母，那么可能的密码数量是 `n^4 == n*n*n*n`，因为每个位置都有 `n` 个可能的字母，并且它们都是独立的。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.4.text"
msgstr ""
"假设 `letters = \"ABCD\"`。想象一下你有所有可能的三字母密码。现在对每一个，添加一个 A 到末尾，或者添加一个 B，或者 C，或者 "
"D。这就是你获得所有可能的四字母密码的方法。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.5.text"
msgstr "记住，一个 for 循环可以包含任何语句，包括另一个 for 循环。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.6.text"
msgstr "这适用于所有的 for 循环。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.7.text"
msgstr "一个 for 循环嵌套在另一个 for 循环中已经不够了。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.8.text"
msgstr "你需要更深入。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#.     # __code0__:
#.     letters = "ABCD"
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22ABCD%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.letters
msgid "pages.IntroducingNestedLoops.steps.crack_password_exercise.text"
msgstr ""
"在下一个练习中，你需要破解一个密码。你知道它正好是四个字母长，并且只有几个可能的字母，你已经写下来了：\n"
"\n"
"__code0__\n"
"\n"
"你需要打印出所有可能的密码：\n"
"\n"
"    AAAA\n"
"    AAAB\n"
"    AAAC\n"
"    AAAD\n"
"    AABA\n"
"    AABB\n"
"    ...跳过一些...\n"
"    DDDA\n"
"    DDDB\n"
"    DDDC\n"
"    DDDD"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#.     # __code0__:
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Alice%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Bob%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Charlie%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Dylan%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27%7Bplayers%5Bi%5D%7D+vs+%7Bplayers%5Bj%5D%7D%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.players
msgid "pages.IntroducingNestedLoops.steps.final_text.text"
msgstr ""
"太棒了！解决方案如下：\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingNestedLoops
msgid "pages.IntroducingNestedLoops.steps.first_nested_loop.text"
msgstr ""
"你已经看到，`if` 或循环的缩进体可以包含任何类型的语句，包括更多的 `if` 语句和循环。特别是一个循环可以包含另一个循环。这里有一个例子：\n"
"\n"
"__program_indented__\n"
"\n"
"这被称为 *嵌套循环*。它没有什么新鲜的，只是值得好好理解，因为它对于编写有趣的程序非常有用。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.0.text"
msgstr "你需要像之前那样在一个 for 循环中嵌套另一个 for 循环。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.1.text"
msgstr "这次像 `for player1 in players:` 这样的语句将不够。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid ""
"pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.10.text"
msgstr "你需要使用比较运算符。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid ""
"pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.11.text"
msgstr "一旦你弄清楚了关系，你可以用 `if` 语句来表达它。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.2.text"
msgstr "你的程序需要使用列表中玩家的 *位置*。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.3.text"
msgstr "这意味着你需要遍历位置并使用索引（下标）来访问列表条目。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.4.text"
msgstr "要遍历位置，使用 `range`..."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.5.text"
msgstr "...和 `len`。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.6.text"
msgstr "看看期望的输出：`Charlie vs Alice`：`Charlie` 在 `players` 列表中排在 `Alice` 之前。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.7.text"
msgstr "我们不想打印 `Alice vs Charlie`，因为 `Alice` 在 `players` 中排在 `Charlie` 之后。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.8.text"
msgstr "我们只想打印那些左侧玩家在列表中排在右侧玩家之前的配对。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.9.text"
msgstr "我们如何用两个 for 循环的列表索引来表达这种关系？"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#.     # __code0__:
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Alice%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Bob%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Charlie%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Dylan%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.players
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text"
msgstr ""
"哇，你也是个艺术家！\n"
"\n"
"如果你愿意，你可以现在继续到 [下一页](#IntroducingBirdseye)。或者你可以做一个额外的挑战！\n"
"\n"
"像之前的练习一样，你正在组织一个游戏的锦标赛。你有一个玩家名字的列表：\n"
"\n"
"__code0__\n"
"\n"
"这次，每对玩家只应出现一次。具体来说，只打印那些在 `players` 中按从左到右的顺序排列的配对，从包含 `players` 中最左侧的人的配对开始，向右移动。例如，对于上面的内容，你的程序应该打印\n"
"\n"
"    Charlie vs Alice\n"
"    Charlie vs Dylan\n"
"    Charlie vs Bob\n"
"    Alice vs Dylan\n"
"    Alice vs Bob\n"
"    Dylan vs Bob"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.player_vs_player_exercise.hints.0.text"
msgstr "想想你如何手动并系统地做到这一点，使用铅笔和纸。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.player_vs_player_exercise.hints.1.text"
msgstr "你需要在一个 for 循环中嵌套另一个 for 循环。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.player_vs_player_exercise.hints.2.text"
msgstr "你需要一个 `if` 语句来检查两个玩家不是同一个人。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#.     # __code0__:
#.     players = ["Alice", "Bob", "Charlie"]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Charlie%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.players
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_exercise.text"
msgstr ""
"完美！\n"
"\n"
"下一个练习：你正在组织一个游戏的锦标赛，比如国际象棋或网球。你有一个玩家名字的列表：\n"
"\n"
"__code0__\n"
"\n"
"每个玩家将与其他每个玩家比赛两次：一次是他们占优势（例如，先移动或发球），一次则不是。打印出所有比赛组合，如下所示：\n"
"\n"
"    Alice vs Bob\n"
"    Alice vs Charlie\n"
"    Bob vs Alice\n"
"    Bob vs Charlie\n"
"    Charlie vs Alice\n"
"    Charlie vs Bob\n"
"\n"
"注意，“Alice vs Bob”和“Bob vs Alice”都在列表中，但没有“Alice vs Alice”——我们不希望任何人和自己比赛。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.0.text"
msgstr "你需要在一个 for 循环中嵌套另一个 for 循环。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.1.text"
msgstr "你需要从 1 到 12 的数字。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.2.text"
msgstr "每当你需要一系列连续的数字时，使用 `range`。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.3.text"
msgstr "你想要类似 `for x in range(n):` 的东西。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.4.text"
msgstr "这将以 `x = 0` 开始，但有一个简单的解决方法。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.5.text"
msgstr "你可以直接给 `x` 加 1。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.6.text"
msgstr "使用 `*` 来乘数字。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.7.text"
msgstr "使用一个包含多个变量的 f-string。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.8.text"
msgstr "记得在每个部分后打印出正确数量的破折号。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.9.text"
msgstr "确保每一行在正确的循环中，并且有正确的缩进量。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.times_table_exercise.messages.added_str_and_int.text"
msgstr "你不能将字符串和数字相加。使用 f-string。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.times_table_exercise.messages.adding_one_in_wrong_loop.text"
msgstr ""
"你在错误的地方将 1 加到了外部循环变量上！\n"
"你应该在哪里做这个以修复它？"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.times_table_exercise.messages.too_long.text"
msgstr ""
"你的解决方案太长了。对于这个问题，你只需要几行代码。\n"
"使用嵌套循环，这样你就不需要重复自己。\n"
"计算机会为你完成重复的工作！"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.times_table_exercise.messages.used_times_instead_of_x.text"
msgstr ""
"这几乎是正确的！确保在你的表中显示正确的字符 `x`。\n"
"例如，你的解决方案应该显示 `3 x 4 = 12` 而不是 `3 * 4 = 12`。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
msgid ""
"pages.IntroducingNestedLoops.steps.times_table_exercise.special_messages.multiply_with_x.text"
msgstr "要乘数字，使用 `*`"

#. https://futurecoder.io/course/#IntroducingNestedLoops
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.text"
msgstr ""
"确保你完全理解发生了什么。`print(letter)` 和 `print('---')` 各运行 3 次，因为它们的缩进将它们放在 *外部循环* 中。`print(f'{letter} {number}')` 被调用了 3 × 4 = 12 次，因为它在 *内部循环* `for number in range(4):` 中，该循环有 4 次迭代，但它本身在外部循环中，所以它运行了 3 次。\n"
"\n"
"让我们来利用这个！假设你是一名老师，你需要为你的学生打印出从 1 到 12 的所有乘法表。你不想手动写它们，但你可以写一个程序来为你完成这项工作！你的程序输出应该如下所示，包括破折号的行：\n"
"\n"
"    1 x 1 = 1\n"
"    1 x 2 = 2\n"
"    1 x 3 = 3\n"
"    1 x 4 = 4\n"
"    1 x 5 = 5\n"
"    1 x 6 = 6\n"
"    1 x 7 = 7\n"
"    1 x 8 = 8\n"
"    1 x 9 = 9\n"
"    1 x 10 = 10\n"
"    1 x 11 = 11\n"
"    1 x 12 = 12\n"
"    ---\n"
"    2 x 1 = 2\n"
"    2 x 2 = 4\n"
"    2 x 3 = 6\n"
"    2 x 4 = 8\n"
"    2 x 5 = 10\n"
"    2 x 6 = 12\n"
"    2 x 7 = 14\n"
"    2 x 8 = 16\n"
"    2 x 9 = 18\n"
"    2 x 10 = 20\n"
"    2 x 11 = 22\n"
"    2 x 12 = 24\n"
"    ---\n"
"    3 x 1 = 3\n"
"    3 x 2 = 6\n"
"    3 x 3 = 9\n"
"    （你明白了...）\n"
"    11 x 10 = 110\n"
"    11 x 11 = 121\n"
"    11 x 12 = 132\n"
"    ---\n"
"    12 x 1 = 12\n"
"    12 x 2 = 24\n"
"    12 x 3 = 36\n"
"    12 x 4 = 48\n"
"    12 x 5 = 60\n"
"    12 x 6 = 72\n"
"    12 x 7 = 84\n"
"    12 x 8 = 96\n"
"    12 x 9 = 108\n"
"    12 x 10 = 120\n"
"    12 x 11 = 132\n"
"    12 x 12 = 144\n"
"    ---"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.0.text"
msgstr "你会如何描述手动输入这个三角形的步骤？"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.1.text"
msgstr ""
"打印一行 `size` 个加号，然后是 `size - 1` 个加号，依此类推直到 1 个加号。例如打印 5 个 `+`，然后 4 个 `+`，然后 "
"3，2，和 1。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.2.text"
msgstr "将这个分解成子问题。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.3.text"
msgstr "你如何打印给定长度的 `+` 的一行，以及如何遍历所有长度？"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.4.text"
msgstr "构建一行字符应该是你之前练习中非常熟悉的，唯一的区别是你必须使其达到给定长度，而不是仅仅与另一个字符串的长度相同。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.5.text"
msgstr "一种简单的方法可以让你做某件事情 `n` 次，就是循环遍历 `range(n)`。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.6.text"
msgstr "你需要在一个循环里面再用一个循环。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.7.text"
msgstr ""
"你需要倒数的数字，比如 5, 4, 3, 2, 1。可以用 `range` "
"来做到这一点，你可以很容易地查找，但也可以使用普通的范围，并做一些非常简单的数学运算，把递增的数字转换为递减的数字。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.8.text"
msgstr "什么公式可以把 0 转换成 5，1 转换成 4，2 转换成 3，等等？"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#.     # __code0__:
#.     size = 5
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.size
msgid "pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.text"
msgstr ""
"哇，你现在基本上就是一个黑客了！\n"
"\n"
"再来一个练习。给定一个大小：\n"
"\n"
"__code0__\n"
"\n"
"打印出一个由加号 `+` 组成的“倒三角”，其边长与给定的大小相等，例如：\n"
"\n"
"    +++++\n"
"    ++++\n"
"    +++\n"
"    ++\n"
"    +"

#. https://futurecoder.io/course/#IntroducingNestedLoops
msgid "pages.IntroducingNestedLoops.title"
msgstr "介绍嵌套循环"

#. https://futurecoder.io/course/#IntroducingNotPage
msgid "pages.IntroducingNotPage.steps.IntroducingNot.text"
msgstr ""
"与其他两个布尔运算符 `and` 和 `or` 不同，\n"
"它们用于两个布尔值之间（称为 *二元* 运算符），\n"
"`not` 仅在一个布尔值之前使用（称为 *一元* 运算符）。\n"
"它否定所应用的表达式，有点像负号。试试在 shell 中：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingNotPage
msgid "pages.IntroducingNotPage.steps.NotFalse.text"
msgstr ""
"现在尝试以下内容：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingNotPage
#.     # __code0__:
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.jpg%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.png%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22cat.jpg%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22dog.png%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22invoice.pdf%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.filename
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.valid_image
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.0.text"
msgstr ""
"如果你被要求简化这个相关但相反的函数会怎样？\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingNotPage
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.1.text"
msgstr "在这种情况下，有一个标准的简化技巧可以应用，我们在几页前讨论过。"

#. https://futurecoder.io/course/#IntroducingNotPage
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.2.text"
msgstr ""
"特别是 `returns` 是多余的，因为 `filename.endswith(\".png\") or "
"filename.endswith(\".jpg\")` 已经是所需的布尔值。"

#. https://futurecoder.io/course/#IntroducingNotPage
#.     # __code0__:
#.     def valid_image(filename):
#.         return filename.endswith(".png") or filename.endswith(".jpg")
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.jpg%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.png%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.filename
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.valid_image
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.3.text"
msgstr ""
"所以你可以直接写：\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingNotPage
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.4.text"
msgstr "对于真实的练习，你可以做类似的事情。"

#. https://futurecoder.io/course/#IntroducingNotPage
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.5.text"
msgstr "真实练习中的区别是结果是反转的。"

#. https://futurecoder.io/course/#IntroducingNotPage
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.6.text"
msgstr "也就是说，当 `valid_image` 返回 `False` 时，`invalid_image` 返回 `True`，反之亦然。"

#. https://futurecoder.io/course/#IntroducingNotPage
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.7.text"
msgstr "记得 `not` 是做什么的吗？"

#. https://futurecoder.io/course/#IntroducingNotPage
#.     # __code7__:
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#.     # __code6__:
#.     if invalid_image(filename):
#.         print("I can't process " + filename)
#.     # __code1__:
#.     (not True) or True
#.     # __code2__:
#.     not (True or True)
#.     # __code0__:
#.     not True or True
#.     # __code4__:
#.     (-1) + 2
#.     # __code5__:
#.     -(1 + 2)
#.     # __code3__:
#.     -1 + 2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.jpg%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.png%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22I+can%27t+process+%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22cat.jpg%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22dog.png%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22invoice.pdf%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.filename
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.invalid_image
msgid "pages.IntroducingNotPage.steps.NotPriority.text"
msgstr ""
"你可以在 `birdseye` 中看到\n"
"\n"
"__code0__\n"
"\n"
"被 Python 解释为\n"
"\n"
"__code1__\n"
"\n"
"而不是：\n"
"\n"
"__code2__\n"
"\n"
"所以，如果没有括号，`not` 的优先级高于 `or`。这就像\n"
"\n"
"__code3__\n"
"\n"
"意味着：\n"
"\n"
"__code4__\n"
"\n"
"而不是\n"
"\n"
"__code5__\n"
"\n"
"`not` 的优先级也高于 `and`。\n"
"\n"
"再次强调，主要要记住的是在不确定时使用括号或额外的变量。\n"
"\n"
"练习：假设你正在编写一个处理图像的程序。只有某些类型的文件可以被处理。\n"
"如果用户给你一个无法处理的文件，你想显示一个错误：\n"
"\n"
"__code6__\n"
"\n"
"假设 .png 和 .jpg 文件可以被处理，但其他文件类型不能。\n"
"这里有一个示例函数来做到这一点：\n"
"\n"
"    __copyable__\n"
"__code7__\n"
"\n"
"这比需要的要长。重写 `invalid_image` 使得主体是一行 `return <expression>`，\n"
"即没有 `if` 语句。它应该通过相同的测试。"

#. https://futurecoder.io/course/#IntroducingNotPage
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingNotPage.steps.NotTrueOrTrue.text"
msgstr ""
"`not` 的优先级与 `and` 和 `or` 相比如何？在 `birdseye` 中尝试以下内容：\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingNotPage
#.     # __code0__:
#.     def invalid_image(filename):
#.         return not (filename.endswith(".png") or filename.endswith(".jpg"))
#.     def invalid_image(filename):
#.         return not filename.endswith(".png") and not
#. filename.endswith(".jpg")
#.     # __code1__:
#.     if x:
#.         return False
#.     else:
#.         return True
#.     # __code2__:
#.     return not x
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.jpg%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.png%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.filename
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.invalid_image
msgid "pages.IntroducingNotPage.steps.final_text.text"
msgstr ""
"干得好！这里有两个有效的解决方案：\n"
"\n"
"__code0__\n"
"\n"
"（如果你感兴趣，这两个是等效的，因为有一个叫做德摩根定律的东西）\n"
"\n"
"还要注意，这是另一个可以简化的一般模式：如果你的代码的形式是：\n"
"\n"
"__code1__\n"
"\n"
"其中 `x` 本身是一个布尔值，那么可以简化为：\n"
"\n"
"__code2__"

#. https://futurecoder.io/course/#IntroducingNotPage
msgid "pages.IntroducingNotPage.title"
msgstr "介绍 `not`"

#. https://futurecoder.io/course/#IntroducingOr
#.     # __code0__:
#.     return name == "Alice" or name == "Bob"
#.     # __code1__:
#.     return name == "Alice" or "Bob"
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingOr.steps.ACommonMistake.requirements"
msgstr ""
"运行上一步的程序，但将:\n"
"\n"
"__code0__\n"
"\n"
"替换为:\n"
"\n"
"__code1__"

#. https://futurecoder.io/course/#IntroducingOr
#.     # __code0__:
#.     return name == "Alice" or name == "Bob"
#.     # __code1__:
#.     return name == "Alice" or "Bob"
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingOr.steps.ACommonMistake.text"
msgstr ""
"请仔细注意我们是如何写条件的:\n"
"\n"
"__code0__\n"
"\n"
"一个常见的错误是写成这样:\n"
"\n"
"__code1__\n"
"\n"
"如果你用英语来读它，这样是有道理的:\n"
"\n"
"> `return` whether `name` is equal to either `\"Alice\"` or `\"Bob\"`\n"
"\n"
"但 Python 不是英语，`or` 不是这样工作的。\n"
"\n"
"用上面的行替换代码中的 `return` 行，然后再试着运行它。"

msgid "pages.IntroducingOr.steps.AnExercise.disallowed.3.label"
msgstr "比较链"

#. https://futurecoder.io/course/#IntroducingOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.0.text"
msgstr "记住，你可以使用比较运算符 `<, >, <=, >=, ==` 来生成布尔值。"

#. https://futurecoder.io/course/#IntroducingOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.1.text"
msgstr "你需要检查 `x` 与 0 的比较以及与 100 的比较。"

#. https://futurecoder.io/course/#IntroducingOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.2.text"
msgstr "你需要将这两个比较结合成一个布尔值，使用 `or`。"

#. https://futurecoder.io/course/#IntroducingOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.3.text"
msgstr "上面我们使用了一个技巧，使整个函数体只是 `return <comparison> or <comparison>`。但在这里不行！"

#. https://futurecoder.io/course/#IntroducingOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.4.text"
msgstr "你需要使用 `if` 语句。"

#. https://futurecoder.io/course/#IntroducingOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.5.text"
msgstr "你需要有一个 `return False` 和一个 `return True`。"

#. https://futurecoder.io/course/#IntroducingOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.6.text"
msgstr ""
"如果你有像 `x >= 0 or x <= 100` 这样的东西，你就走错了方向。这对 *任何* 值的 `x` 都会成立。毕竟，101 大于 0！"

#. https://futurecoder.io/course/#IntroducingOr
#.     # __code4__:
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
#.     # __code3__:
#.     return name in ["Alice", "Bob", "Charlie"]
#.     # __code2__:
#.     (name == "Alice") or ("Bob")
#.     # __code1__:
#.     name == ("Alice" or "Bob")
#.     # __code0__:
#.     name == "Alice" or "Bob"
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Charlie%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.is_valid_percentage
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingOr.steps.AnExercise.text"
msgstr ""
"当我们用 `birdseye` 检查它时，我们可以看到:\n"
"\n"
"__code0__\n"
"\n"
"并没有像我们用英语思考的那样翻译成\n"
"\n"
"__code1__\n"
"\n"
"而是:\n"
"\n"
"__code2__\n"
"\n"
"当 `name == \"Alice\"` 为 `False` 时，它的值是 `\"Bob\"`。\n"
"\n"
"也许你会觉得这样:\n"
"\n"
"[![我现在有更多问题](https://i.imgur.com/jN57tGt.png)](https://imgur.com/a/icKzI)\n"
"\n"
"你需要知道的唯一一件事是: 在你知道自己在做什么之前，始终\n"
"确保在 `or` 的两边放置布尔值，因为它是一个布尔运算符。\n"
"`name == \"Alice\" or \"Bob\"` 违反了这个规则。\n"
"\n"
"如果你感到好奇，答案在下面，但如果你想可以跳过它们，继续下面的练习。\n"
"\n"
"----\n"
"\n"
"> 为什么 `(name == \"Alice\") or (\"Bob\")` 等于 `\"Bob\"`？为什么它等于任何东西？`\"Bob\"` 甚至不是布尔值！\n"
"\n"
"定义 \"`A or B` 是 `True` 如果 `A` 或 `B` 为 `True`\" 是一种简化。它是思考 `or` 的最简单方式，尤其是在编写 `if` 语句时。\n"
"真正的定义是，如果 `A` 为真，那么 `A or B` 就是 `A`（实际上 `B` 甚至不会被计算），\n"
"否则就是 `B`。\n"
"你可以自己看到，如果 `A` 和 `B` 是布尔值，那么这两个定义是等价的。\n"
"在这个例子中 `A` 是 `name == \"Alice\"`，它是 `False`，所以 `A or B` 是 `B`，即 `\"Bob\"`。\n"
"\n"
"> 有没有更好的方法来写条件，而不每次都重复 `name ==`？\n"
"\n"
"有的！在 [列表的函数和方法](#FunctionsAndMethodsForLists) 中我们提到过 `in`\n"
"运算符，你可以这样与列表一起使用:\n"
"\n"
"__code3__\n"
"\n"
"但你不能总是像那样去掉 `or`。\n"
"\n"
"----\n"
"\n"
"练习: 编写一个名为 `is_valid_percentage` 的函数，接受一个数值参数 `x`。\n"
"如果 `x` 在 0 到 100 之间（包括 0 和 100），则返回 `True`，否则返回 `False`。\n"
"你的函数应该使用 `or`，并通过这些测试:\n"
"\n"
"    __copyable__\n"
"__code4__"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.FalseOrFalse.text"
msgstr ""
"最后，尝试:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingOr
#.     # __code0__:
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#.     # __code1__:
#.     return name == "Alice" or name == "Bob"
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingOr.steps.FurtherImprovement.requirements"
msgstr ""
"运行上一步的程序，但将:\n"
"\n"
"__code0__\n"
"\n"
"替换为:\n"
"\n"
"__code1__"

#. https://futurecoder.io/course/#IntroducingOr
#.     # __code1__:
#.     if x:
#.         return True
#.     else:
#.         return False
#.     # __code0__:
#.     name == "Alice" or name == "Bob"
#.     # __code2__:
#.     return x
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingOr.steps.FurtherImprovement.text"
msgstr ""
"我们可以做得更好。注意到\n"
"\n"
"__code0__\n"
"\n"
"是一个布尔值，而两个 `return` 语句都返回布尔值 `True` 或 `False`。\n"
"这个函数:\n"
"\n"
" - 当 `name == \"Alice\" or name == \"Bob\"` 为 `True` 时返回 `True`，\n"
" - 当 `name == \"Alice\" or name == \"Bob\"` 为 `False` 时返回 `False`。\n"
"\n"
"所以我们可以简单地在这两种情况下返回布尔值 `name == \"Alice\" or name == \"Bob\"` 本身！\n"
"\n"
"这是简化代码的常见模式。如果你发现自己写代码像这样:\n"
"\n"
"__code1__\n"
"\n"
"其中 `x` 本身是一个布尔值，你总是可以将这段代码简化为:\n"
"\n"
"__code2__\n"
"\n"
"自己应用这个简化到代码中，并再次运行它。"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.ImprovingWithOr.requirements"
msgstr "从页面顶部复制程序，然后将函数的前四行更改为使用 `or`，如建议的那样。"

#. https://futurecoder.io/course/#IntroducingOr
#.     # __code0__:
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#.     # __code1__:
#.     if name == "Alice" or name == "Bob":
#.         return True
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingOr.steps.ImprovingWithOr.text"
msgstr ""
"在编辑器中，将:\n"
"\n"
"__code0__\n"
"\n"
"替换为:\n"
"\n"
"__code1__\n"
"\n"
"正如你所看到的，`is_friend` 只有在 `name` 是 Alice 或 Bob 时才会返回 `True`。\n"
"`or` 用于连接两个布尔值 `name == \"Alice\"` 和 `name == \"Bob\"` 之间。"

#. https://futurecoder.io/course/#IntroducingOr
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingOr.steps.InputAliceBob.text"
msgstr ""
"我们在介绍 If 语句时学习了 *布尔值* (`True` 和 `False`)。\n"
"我们还学习了比较运算符 `==`, `<`, `>`, `<=`, `>=`，它们返回布尔值。\n"
"现在我们想要结合布尔值来检查更复杂的条件。\n"
"\n"
"这里有一个简单的例子：想象一下你有两个朋友，Alice 和 Bob。\n"
"下面的函数接受一个参数 `name`，并检查给定名称的人是否是你的朋友。\n"
"复制并运行编辑器中的代码:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.InspectWithBirdseye.requirements"
msgstr "运行与上一步相同的代码，但使用 `birdseye`。"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.InspectWithBirdseye.text"
msgstr ""
"第二个和第三个测试失败了！我们的函数似乎做错了事情:\n"
"当 `name` 是 `\"Bob\"` 或 `\"Charlie\"` 时，它返回 `\"Bob\"`（一个字符串，而不是布尔值！）。发生了什么？\n"
"再次使用 `birdseye` 运行同样有问题的代码。仔细检查每个 `is_friend` 调用的 `return` 语句。\n"
"(使用蓝色箭头按钮)"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.TrueOrFalse.text"
msgstr ""
"好的，现在尝试:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.TrueOrTrue.text"
msgstr ""
"让我们看看是否可以做得更好。\n"
"我们可以使用 **`or`** 结合 `if` 和 `elif` 语句。`or` 是一个 *布尔运算符*，\n"
"意味着它是一个运算符（像 `+` 或 `-`），用于结合两个布尔值（`True` 或 `False`）。\n"
"\n"
"表达式 `A or B` 如果 `A` 或 `B` 为 `True`，即如果 `A` 为 `True` 或 `B` 为 `True`，或两者都为 `True`，则为 `True`。\n"
"只有在 `A` 和 `B` 都为 `False` 时，它才为 `False`。\n"
"\n"
"在 shell 中尝试以下内容。\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.final_text.text"
msgstr "干得好！"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.title"
msgstr "介绍 `or`"

#. https://futurecoder.io/course/#IntroducingStrings
msgid "pages.IntroducingStrings.steps.final_text.text"
msgstr ""
"shell 只是简单地返回相同的内容，因为没有进一步的计算。`'hello'` 只是等于 `'hello'`。\n"
"\n"
"字符串是字符的序列。字符是单个符号，例如字母、数字、标点符号、空格等。在这个例子中，字符串包含 5 个字符 `hello`。引号不是字符串的一部分 - 它们是用来告诉人类和计算机这是一个由引号之间的字符组成的字符串。"

#. https://futurecoder.io/course/#IntroducingStrings
msgid "pages.IntroducingStrings.steps.hello_string.text"
msgstr ""
"Python 让你做的不仅仅是计算。事实上，我们一段时间内不会接触数字或数学。相反，我们将关注 *字符串*。字符串本质上是文本的片段。例如，在 shell 中输入以下内容，包含引号 (`'`)：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingStrings
msgid "pages.IntroducingStrings.title"
msgstr "介绍字符串"

#. https://futurecoder.io/course/#IntroducingTheShell
msgid "pages.IntroducingTheShell.steps.final_text.text"
msgstr "太棒了！继续尝试。当你准备好了，点击“下一步”继续。"

#. https://futurecoder.io/course/#IntroducingTheShell
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTheShell.steps.first_expression
msgid ""
"pages.IntroducingTheShell.steps.first_expression.messages.anything_else.text"
msgstr ""
"很好，你在尝试自己的实验！\n"
"这真是个好兆头。继续保持。\n"
"我只是想让你知道，你最终需要输入 `1+2` 才能继续进行。"

#. https://futurecoder.io/course/#IntroducingTheShell
msgid "pages.IntroducingTheShell.steps.first_expression.text"
msgstr ""
"右边是 *shell*。这是运行小段 Python 代码的地方。只需输入一些代码，按下回车，它就会运行！现在试试：\n"
"\n"
"1. 点击 shell 的任何地方（黑色区域）。\n"
"2. 输入 `__program__`\n"
"3. 按下键盘上的 Enter 键。"

#. https://futurecoder.io/course/#IntroducingTheShell
msgid "pages.IntroducingTheShell.steps.more_calculation.requirements"
msgstr "在 shell 中运行类似于 `1 + 2` 的代码，但将 `+` 替换为 `*`、`/` 或 `-`。"

#. https://futurecoder.io/course/#IntroducingTheShell
#.     # __code0__:
#.     3 * 4
msgid ""
"pages.IntroducingTheShell.steps.more_calculation.special_messages.multiply_with_x.text"
msgstr ""
"我看到一个 'x'。如果你想进行乘法运算，请使用星号，例如：\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingTheShell
msgid "pages.IntroducingTheShell.steps.more_calculation.text"
msgstr ""
"很好！Python 计算了 `1+2` 并得到了结果 `3`，所以 shell 显示了这个结果。\n"
"\n"
"shell 可能是你学习 Python 最重要的工具，你应该花很多时间在里面进行实验和探索。保持好奇心！不断问自己“如果我运行 X，会发生什么？”然后立即通过运行它来回答这个问题。不要害怕尝试任何事情 - 如果你出错了，也不会发生什么坏事。\n"
"\n"
"现在试着做一些更多的计算。你可以用 `*` 乘法，`/` 除法，和 `-` 减法。你还可以使用括号，即 `(` 和 `)`。"

#. https://futurecoder.io/course/#IntroducingTheShell
msgid "pages.IntroducingTheShell.title"
msgstr "介绍 Shell"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.0.text"
msgstr "你可以先模仿上面的 `row_winner`，然后修改它以使其适用于列。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.1.text"
msgstr "你不能像遍历 `board` 的行那样简单地遍历列。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.10.text"
msgstr "为每一列定义一个布尔值，然后在内部循环中相应地更新它。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.11.text"
msgstr "剩下的逻辑与 `row_winner` 非常相似。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.12.text"
msgstr "注意 `' '`。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.13.text"
msgstr "如果需要，记得在最后返回 `False`。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.2.text"
msgstr "嵌套列表的列是什么？第一列由第一行的第一个元素、第二行的第一个元素等组成。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.3.text"
msgstr "遍历所有列意味着查看每一行的第一个元素，然后是每一行的第二个元素，依此类推。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.4.text"
msgstr "所以你需要先遍历表示位置的数字，第一、第二等。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.5.text"
msgstr "如何找到 `board` 中的列数？"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.6.text"
msgstr "这涵盖了外部循环，它遍历每一列。然后你需要一个内部循环来遍历列中的每个元素。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.7.text"
msgstr "列的不同条目不在同一行。那么你如何访问它们呢？"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.8.text"
msgstr "你可以遍历棋盘的行，找到与该行和当前列对应的元素。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.9.text"
msgstr "要访问第 5 列的所有条目，你可以遍历所有行，并访问每一行的第 5 个元素。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#.     # __code0__:
#.     def column_winner(board):
#.         ...
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' '],
#.                 ['X', 'O', ' '],
#.                 ['O', 'X', ' ']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' ', 'X'],
#.                 [' ', 'O', 'X', 'O'],
#.                 ['O', 'O', 'X', 'X'],
#.                 ['O', 'O', 'X', ' ']
#.             ]
#.         ),
#.         True
#.     )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.text"
msgstr ""
"干得好！\n"
"\n"
"现在写一个类似的函数 `column_winner`，检查是否有获胜的 *列*（垂直线）：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"这里 `O` 在第二个棋盘的第二列获胜。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.0.text"
msgstr "在任意大小的方形棋盘上有多少条对角线？"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.1.text"
msgstr "即使棋盘的大小发生变化，对角线的数量也保持不变！"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.10.text"
msgstr "你可以使用一个循环同时检查两个对角线。或者你可以为每个对角线使用一个循环。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.2.text"
msgstr ""
"这次你不能像 `middle == board[0][0] and middle == board[2][2]` 这样做，因为你不知道对角线的长度。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.3.text"
msgstr "此外，这两个对角线可能没有像 `middle` 这样的共同元素。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.4.text"
msgstr "首先，关注从左上到右下的对角线。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.5.text"
msgstr "你如何通过双重下标访问这些条目？"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.6.text"
msgstr "你在这些双重下标中看到模式了吗？拿出纸和笔，尝试在一些例子上计算一下。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.7.text"
msgstr "现在关注另一条对角线（从右上到左下）。下标中又有一个模式，但稍微复杂一些。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.8.text"
msgstr "你还记得负索引吗？这可能在这里有帮助。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.9.text"
msgstr "一旦你掌握了这些模式，就可以使用之前的相同思路来检查所有条目是否相等。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#.     # __code1__:
#.     def diagonal_winner(board):
#.         ...
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O', 'X'],
#.                 [' ', 'O', 'X', ' '],
#.                 ['X', 'X', ' ', 'X'],
#.                 ['X', ' ', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', ' '],
#.                 ['X', ' ', 'O'],
#.                 [' ', 'O', 'O']
#.             ]
#.         ),
#.         False
#.     )
#.     # __code0__:
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.middle
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.text"
msgstr ""
"很棒！这很有挑战性。\n"
"\n"
"最后，我们需要检查获胜的对角线。你已经在上一章中写了一个函数来完成这个任务，适用于 3x3 的棋盘：\n"
"\n"
"__code0__\n"
"\n"
"现在写一个适用于任意大小方形棋盘的 `diagonal_winner`：4x4、5x5，等等...\n"
"\n"
"    __copyable__\n"
"__code1__\n"
"\n"
"在第一个例子中，`X` 在从左下到右上的对角线上获胜。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
msgid "pages.IntroducingTicTacToe.steps.final_text.text"
msgstr ""
"干得好！\n"
"\n"
"现在我们有了确定棋盘上获胜状态的代码。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.0.text"
msgstr "你需要检查棋盘中的每一行，所以你需要一个循环来实现这一点。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.1.text"
msgstr "你如何检查一行中的所有条目是否相等？"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.10.text"
msgstr "如果没有获胜的行，请确保返回 `False`"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.2.text"
msgstr "这是一个独立的问题。你可以先忘记整个棋盘，只检查一行。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.3.text"
msgstr "你甚至可以写一个只做这个的函数，虽然你不必这样做。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.4.text"
msgstr "由于行的大小可能不同，你需要遍历整个行。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.5.text"
msgstr "对于每一行，定义一个布尔值。然后遍历该行，相应地更新布尔值。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.6.text"
msgstr "你可以使用行中的第一个条目 `row[0]` 来与所有行条目进行比较。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.7.text"
msgstr "仔细考虑布尔值的初始值应该是什么，以及在什么条件下应该更改它的值。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.8.text"
msgstr "在遍历一行后，如果你确定所有条目都相等，则返回 `True`（提前结束外部循环）。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.9.text"
msgstr "确保你不会因为一行全是空格而返回 `True`。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid ""
"pages.IntroducingTicTacToe.steps.intro_row_winner.messages.catch_empty_row.text"
msgstr "请记住，有些条目可能是 `' '`。空行不是获胜行。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#.     # __code2__:
#.     def row_winner(board):
#.         ...
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['A', 'A', 'B', 'A'],
#.                 [' ', ' ', ' ', ' '],
#.                 ['A', ' ', ' ', 'A'],
#.                 ['B', ' ', 'B', 'A']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'X'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     # __code1__:
#.     board = [
#.         ['A', 'B', 'A', 'A'],
#.         ['B', ' ', ' ', 'A'],
#.         [' ', 'A', 'B', 'B'],
#.         [' ', 'A', 'B', ' ']
#.     ]
#.     # __code0__:
#.     board = [
#.         ['X', 'O', 'X'],
#.         ['O', ' ', ' '],
#.         [' ', 'X', 'O']
#.     ]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.text"
msgstr ""
"你已经完成了许多短小的练习，解决一个个小问题。现在我们将处理一个更大、更复杂的\n"
"项目，这将真正考验你的知识，并需要将许多小部分结合在一起。\n"
"这将会非常有趣！\n"
"\n"
"你将开发一个基于文本的互动井字棋游戏，由两个玩家进行游戏。\n"
"以下是完成的游戏在进行中的小预览：\n"
"\n"
"      1 2 3\n"
"    1  | |\n"
"      -+-+-\n"
"    2  | |\n"
"      -+-+-\n"
"    3  | |\n"
"\n"
"    X 进行游戏：\n"
"    1\n"
"    1\n"
"\n"
"      1 2 3\n"
"    1 X| |\n"
"      -+-+-\n"
"    2  | |\n"
"      -+-+-\n"
"    3  | |\n"
"\n"
"    O 进行游戏：\n"
"    2\n"
"    2\n"
"\n"
"      1 2 3\n"
"    1 X| |\n"
"      -+-+-\n"
"    2  |O|\n"
"      -+-+-\n"
"    3  | |\n"
"\n"
"    X 进行游戏：\n"
"    1\n"
"    3\n"
"\n"
"      1 2 3\n"
"    1 X| |X\n"
"      -+-+-\n"
"    2  |O|\n"
"      -+-+-\n"
"    3  | |\n"
"\n"
"我们将把这个项目分解成几个小函数，这将是练习。\n"
"\n"
"你将使用到你迄今为止学到的许多概念：字符串、\n"
"嵌套列表、嵌套循环、`range`、在函数内调用函数、比较和布尔值。\n"
"\n"
"在这个过程中，你还将学习一些新概念，包括换行符、类型和 `input()`。\n"
"\n"
"以下是项目的大致轮廓：\n"
"\n"
"- 三个函数 `row_winner`、`column_winner`、`diagonal_winner`，检查整个棋盘的获胜行、列和对角线\n"
"- 一个函数 `winner`，检查整个棋盘是否有获胜者，结合上述函数\n"
"- 一个函数 `format_board`，显示游戏的当前状态\n"
"- 一个函数 `play_move`，接受用户输入以进行移动，\n"
"- 最后一个 `play_game` 函数，将所有内容组合在一起并互动运行游戏。\n"
"- 之后我们将添加进一步的改进。\n"
"\n"
"让我们开始吧！\n"
"\n"
"和上一章一样，我们将把井字棋棋盘表示为一个嵌套的字符串列表。\n"
"对于典型的游戏，这将是一个 3x3 的列表，即 3 个列表，每个包含 3 个字符串，玩家用 `'X'` 或 `'O'` 表示。\n"
"空方格将用一个空格表示，即 `' '`。例如：\n"
"\n"
"__code0__\n"
"\n"
"但是为了让事情更有趣，你的代码需要适用于任意大小的方形棋盘\n"
"(4x4、5x5 等)，玩家可以用任何字符串表示，例如：\n"
"\n"
"__code1__\n"
"\n"
"编写一个函数 `row_winner`，如果 `board` 包含\n"
"一个获胜的行，即所有条目中都有相同的字符（除了 `' '`），则返回 `True`：\n"
"\n"
"    __copyable__\n"
"__code2__\n"
"\n"
"在第二个例子中，`O` 在底行获胜。"

msgid "pages.IntroducingTicTacToe.steps.winner.disallowed.0.message"
msgstr ""
"你的解决方案应该通过调用这三个函数来工作。`winner` 本身不应该进行任何\n"
"循环、下标等操作。它应该非常简短。\n"
"\n"
"复制 `row_winner` 和其他函数，并保持它们原样。不要将代码从它们复制到 `winner` 函数中，只需调用这些函数。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
msgid "pages.IntroducingTicTacToe.steps.winner.hints.0.text"
msgstr "解决方案非常简短！只需正确使用这三个函数。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
msgid "pages.IntroducingTicTacToe.steps.winner.hints.1.text"
msgstr "考虑可能的情况。什么时候 `winner(board)` 返回 `False`？什么时候返回 `True`？"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
msgid "pages.IntroducingTicTacToe.steps.winner.hints.2.text"
msgstr "你如何将这三个函数和布尔运算符结合使用，以获得所需的结果？"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#.     # __code0__:
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.col
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.column
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.column_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.entry
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.piece
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.winning_line
msgid "pages.IntroducingTicTacToe.steps.winner.text"
msgstr ""
"太棒了！这很难。\n"
"\n"
"现在我们可以把这三个函数组合在一起！写一个函数 `winner`，接受参数 `board`，如前所述，\n"
"如果 `board` 包含获胜的行、列或对角线，则返回 `True`，否则返回 `False`。\n"
"\n"
"你的解决方案应该通过调用这三个函数来工作。`winner` 本身不应该进行任何\n"
"循环、下标等操作。\n"
"\n"
"以下是 `row_winner`、`column_winner` 和 `diagonal_winner` 的一些代码，以及 `winner` 的一些测试。\n"
"点击复制按钮，并填写 `winner` 函数的空白部分。\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingTicTacToe
msgid "pages.IntroducingTicTacToe.title"
msgstr "检查棋盘上的获胜者"

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.steps.final_text.text"
msgstr ""
"答案是 `sunshine` 看起来像一个变量，所以 Python 尝试查找它的值，但由于我们从未定义过这个名字的变量，因此我们会得到一个错误。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.sunshine_undefined_check
msgid ""
"pages.IntroducingVariables.steps.sunshine_undefined_check.output_prediction_choices.0"
msgstr "sunshine"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.sunshine_undefined_check
msgid ""
"pages.IntroducingVariables.steps.sunshine_undefined_check.output_prediction_choices.1"
msgstr "'sunshine'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.sunshine_undefined_check
msgid ""
"pages.IntroducingVariables.steps.sunshine_undefined_check.output_prediction_choices.2"
msgstr "Hello"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.sunshine_undefined_check
msgid ""
"pages.IntroducingVariables.steps.sunshine_undefined_check.output_prediction_choices.3"
msgstr "'Hello'"

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.steps.sunshine_undefined_check.text"
msgstr ""
"如你所见，引号使一切变得不同。`'word'` 仅仅是 `'word'`，因此它被称为 *字符串字面量*。另一方面，`word` 是一个变量，它的值可以是任何东西。\n"
"\n"
"同样，`'sunshine'` 是 `'sunshine'`，但没有引号的 `__program__` 是什么呢？"

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.steps.word_assign.text"
msgstr ""
"要制作有趣的程序，我们不能总是操作相同的值。我们需要一种方法来引用那些未知且可以改变的值——可以变化的值。这些被称为 *变量*。\n"
"\n"
"运行这段代码：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingVariables
msgid ""
"pages.IntroducingVariables.steps.word_check.special_messages.bad_word.text"
msgstr "哎呀，你需要先设置 `word = 'Hello'`，然后我们才能继续。"

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.steps.word_check.text"
msgstr ""
"这创建了一个名为 `word` 的变量，它引用字符串值 `'Hello'`。\n"
"\n"
"现在看看当你单独在 shell 中运行 `__program__` 时会发生什么。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_string_check
msgid ""
"pages.IntroducingVariables.steps.word_string_check.output_prediction_choices.0"
msgstr "word"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_string_check
msgid ""
"pages.IntroducingVariables.steps.word_string_check.output_prediction_choices.1"
msgstr "'word'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_string_check
msgid ""
"pages.IntroducingVariables.steps.word_string_check.output_prediction_choices.2"
msgstr "Hello"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_string_check
msgid ""
"pages.IntroducingVariables.steps.word_string_check.output_prediction_choices.3"
msgstr "'Hello'"

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.steps.word_string_check.text"
msgstr "很好。为了比较，单独在 shell 中运行 `__program__`，带上引号。"

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.title"
msgstr "介绍变量"

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid "pages.LoopingOverNestedLists.steps.final_text.text"
msgstr ""
"你已经掌握了嵌套列表以及如何将它们与嵌套循环结合起来。\n"
"太棒了！你现在在你的工具箱中拥有了非常强大的编程工具。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.0.text"
msgstr "这与之前的练习非常相似。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.1.text"
msgstr "你应该什么时候打印布尔值？"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.2.text"
msgstr "记住你只想打印一次。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.3.text"
msgstr "不要为每个子列表定义一个布尔值，而是为整个列表定义一个布尔值。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.4.text"
msgstr "你应该什么时候以及如何修改布尔值？"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#.     # __code0__:
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Python%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22goodbye+world%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+there%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+world%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22how+are+you%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
msgid "pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text"
msgstr ""
"干得好！\n"
"\n"
"接下来，只打印一个布尔值来指示`word`是否存在于整个嵌套列表中的任何字符串中。例如，如果\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"你的程序应该打印`False`。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid ""
"pages.LoopingOverNestedLists.steps.nested_list_loop_python_tutor.requirements"
msgstr ""
"运行一个由上述两个部分组合而成的单一程序。\n"
"它们被分开是为了让你不需要输入`numbers = [...]`部分，\n"
"但输入嵌套循环部分对学习是最好的。\n"
"确保缩进正确。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid "pages.LoopingOverNestedLists.steps.nested_list_loop_python_tutor.text"
msgstr ""
"现在在Python Tutor中再次运行相同的程序。\n"
"\n"
"检查`numbers`的样子，以及`numbers[0]`到`numbers[3]`是什么。\n"
"看看`sublist`和`num`变量是如何推进的。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid ""
"pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.requirements"
msgstr ""
"运行一个由上述两个部分组合而成的单一程序。\n"
"它们被分开是为了让你不需要输入`numbers = [...]`部分，\n"
"但输入嵌套循环部分对学习是最好的。\n"
"确保缩进正确。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#.     # __code1__:
#.     for sublist in numbers:
#.         for num in sublist:
#.             print(num)
#.         print('---')
#.     # __code0__:
#.     numbers = [[1, 2, 3], [4, 5], [6], []]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.num
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.sublist
msgid ""
"pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.text"
msgstr ""
"你可以使用嵌套循环来遍历嵌套列表的每个元素和子元素。\n"
"例如，考虑这个嵌套列表。\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"点击按钮将列表复制到编辑器中，然后输入以下嵌套循环。\n"
"\n"
"__code1__\n"
"\n"
"仔细查看代码。注意外层循环创建了一个变量`sublist`\n"
"而内层循环遍历同一个变量。这是一个常见的模式。\n"
"现在运行代码。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.0.text"
msgstr "你如何检查一个字符串是否包含一个单词？"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.1.text"
msgstr "确保检查**字符串**是否包含该单词，而不是子列表。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.2.text"
msgstr "你如何访问嵌套列表中每个子列表的每个字符串？"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.3.text"
msgstr "你需要使用嵌套循环。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.4.text"
msgstr "循环应该遵循页面开头示例的相同模式。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#.     # __code0__:
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22goodbye+world%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+there%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+world%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22how+are+you%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
msgid "pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text"
msgstr ""
"现在让我们使用这种循环解决一些问题。\n"
"\n"
"假设我们有一个像下面这样的字符串嵌套列表，\n"
"我们想在列表中深处搜索一个特定的`word`。\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"你可以想象`strings`代表一本书，其中每个子列表是一页，每个字符串是该页中的一行。\n"
"它也可以代表一个图书馆，其中每个列表是一本书，每个字符串是一页。\n"
"\n"
"编写一个程序，打印每个包含`word`的字符串。\n"
"它应该适用于任何`word`和`strings`。对于上面的示例，它应该打印\n"
"\n"
"    hello there\n"
"    hello world\n"
"\n"
"记住，有一种特定的方法来检查一个字符串是否包含另一个字符串。如果你记不起来，谷歌一下吧！"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.0.text"
msgstr "为每个子列表定义一个布尔值。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.1.text"
msgstr "遍历一个子列表，相应地更新布尔值。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.2.text"
msgstr "只为每个子列表打印一次布尔值。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.3.text"
msgstr "布尔值的初始值应该是什么？"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.4.text"
msgstr "如果其中一个子列表是空的，你应该为那个子列表打印什么？"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.5.text"
msgstr "如果你在一个字符串中找到了这个单词，布尔值应该设置为`True`。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.6.text"
msgstr "如果一个字符串不包含这个单词怎么办？"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.7.text"
msgstr "没关系！这并不改变其他字符串是否可能包含这个单词。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.8.text"
msgstr "换句话说，除了在开始时，不要将布尔值设置为`False`。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#.     # __code0__:
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
#.     # __code1__:
#.     False
#.     True
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22goodbye%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22goodbye+world%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+there%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+world%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22how+are+you%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
msgid "pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text"
msgstr ""
"很好！\n"
"\n"
"现在让我们稍微改变一下练习。这次输出应该告诉我们哪些*sublists*包含`word`，\n"
"而不是哪些内部字符串。特别是，我们想为每个子列表打印一个布尔值：\n"
"`True`如果子列表在其任何字符串中包含该单词，`False`如果根本不在。\n"
"\n"
"给定这些示例输入：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"那么你的程序应该打印\n"
"\n"
"__code1__\n"
"\n"
"注意`word in sublist`是行不通的。例如，`\"hello\" in [\"hello there\", \"how are you\"]`是`False`\n"
"因为`\"hello\"`并不*等于*该列表的两个元素中的任何一个，即使它在其中一个元素中。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.0.text"
msgstr "由于字符串的长度可能不同，这有点棘手。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.1.text"
msgstr "这次你的外层循环应该持续多久？"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.2.text"
msgstr "在处理字符串之前，先找出最长字符串的长度可能是个好主意。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.3.text"
msgstr "其余部分与之前的练习非常相似。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.4.text"
msgstr "唯一的区别是现在你必须确定是从字符串中添加一个字母，还是一个空格。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid "pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.text"
msgstr ""
"很好！如果你愿意，你现在可以继续到[下一页](#DefiningFunctions)。\n"
"或者你可以做一个额外的挑战！\n"
"\n"
"现在让我们将之前的练习推广到不等长的字符串。再次给你一个字符串列表。\n"
"像之前一样，编写一个程序，打印每个字符串的第一个字母在一行上，\n"
"然后第二个字母在下一行上，依此类推。\n"
"但这次，如果一个字符串没有足够的字母，它应该打印一个空格。\n"
"\n"
"例如，如果\n"
"\n"
"    __no_auto_translate__\n"
"    strings = [\"abcqwe\", \"def\", \"ghiq\"]\n"
"\n"
"你的程序应该打印\n"
"\n"
"    adg\n"
"    beh\n"
"    cfi\n"
"    q q\n"
"    w\n"
"    e"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.0.text"
msgstr "这与本页之前的练习不相似。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.1.text"
msgstr "想想当只有两个字符串时的解决方案。你如何将其推广到字符串列表？"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.2.text"
msgstr "你需要遍历第一个字母，然后是第二个字母，依此类推。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.3.text"
msgstr "你必须使用一个循环，但这个循环应该持续多久？"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.4.text"
msgstr "记住列表中的字符串长度是相等的。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.5.text"
msgstr "为每个位置（第一个、第二个等）定义一个新字符串。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.6.text"
msgstr "那个字符串最初应该是什么？"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.7.text"
msgstr "对于每个位置（第一个、第二个等），你必须遍历列表中的每个字符串。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.8.text"
msgstr "你需要在你已有的循环内部再加一个循环。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#.     # __code0__:
#.     strings = ["abc", "def", "ghi"]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22abc%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22def%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22ghi%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
msgid "pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.text"
msgstr ""
"很好！\n"
"\n"
"[在课程早些时候](#GettingElementsAtPositionExercises)有一个练习\n"
"打印两个字符串并排垂直显示，如下所示：\n"
"\n"
"    H W\n"
"    e o\n"
"    l r\n"
"    l l\n"
"    o d\n"
"\n"
"现在我们要将其推广到字符串列表，而不仅仅是两个。\n"
"\n"
"在这个练习中，你将获得一个**相等长度**的字符串列表。\n"
"编写一个程序，打印每个字符串的第一个字母在一行上，\n"
"然后每个字符串的第二个字母在下一行上，依此类推。例如，如果\n"
"\n"
"__code0__\n"
"\n"
"那么你的程序应该打印\n"
"\n"
"    __no_auto_translate__\n"
"    adg\n"
"    beh\n"
"    cfi\n"
"\n"
"你的程序应该适用于任何这样的列表。特别是，如果你使用以下列表，\n"
"你将发现来自Python Zen的隐藏信息！\n"
"\n"
"    __copyable__\n"
"    __no_auto_translate__\n"
"    strings = [\"  b n\", \"f ete\", \"liths\", \"astat\", \"t ene\", \"  r d\"]\n"
"\n"
"注意这次你不应该在输出中添加字母之间的空格。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid "pages.LoopingOverNestedLists.title"
msgstr "遍历嵌套列表"

#. https://futurecoder.io/course/#MakingTheBoard
#.     # __code2__:
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
#.     # __code0__:
#.     def make_board(size):
#.         board = []
#.         for _ in range(size):
#.             row = []
#.             for _ in range(size):
#.                 row.append(' ')
#.             board.append(row)
#.         return board
#.     # __code1__:
#.     board.append(row.copy())
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.cube
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.make_board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.make_cube
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.size
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.test
msgid "pages.MakingTheBoard.steps.final_text.text"
msgstr ""
"做得好！\n"
"\n"
"这个问题可以通过将第一个循环放入第二个循环中来解决，每次都创建一个新的 `row`：\n"
"\n"
"__code0__\n"
"\n"
"另一种方法是每次都复制 `row`，例如保留原始代码但更改一行：\n"
"\n"
"__code1__\n"
"\n"
"你也可以用 `row[:]` 或 `list(row)` 来复制 `row`。但重要的是要知道\n"
"所有这些方法都会对列表进行*浅拷贝*。\n"
"这意味着它们只复制列表的顶层，而不复制每个元素。\n"
"在这种情况下，`row` 只包含无法修改的字符串，\n"
"所以不需要复制。但如果元素是可变对象，比如列表，\n"
"就像 `board` 的情况，你可能会再次遇到同样的问题。\n"
"这里有一个例子：\n"
"\n"
"    __copyable__\n"
"__code2__\n"
"\n"
"这里 `cube` 的每个元素都是一个单独的列表，是 `board` 的副本。\n"
"在每个副本中，每个元素也是一个单独的列表，是 `row` 的副本。\n"
"但是 `board` 的浅拷贝都具有相同的第一个元素（第一个 `row` 的副本），\n"
"相同的第二个元素，依此类推。\n"
"改变 `make_board` 不会解决任何问题，解决方案是：\n"
"\n"
"- 每次调用 `make_board` 来创建一个新的 `board`，或者\n"
"- 使用 `deepcopy` 函数，而不是 `board.copy()`。\n"
"`deepcopy` 会在每个嵌套对象的每个层级进行拷贝。\n"
"\n"
"如果你仍然感到困惑，不用担心。\n"
"这只是让你为将来处理代码行为异常做好准备。\n"
"你现在不需要理解这一点，这节课仍然会很有价值。\n"
"\n"
"无论如何，我们准备好制作完整的游戏了。你可以做到的！"

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.0.text"
msgstr "现有的代码几乎是正确的。"

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.1.text"
msgstr "有几种方法可以解决这个问题。"

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.2.text"
msgstr "一些解决方案涉及添加一些小东西。"

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.3.text"
msgstr "你也可以在不添加或删除任何东西（除了空格）的情况下重新排列代码。"

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.4.text"
msgstr "问题在于一个单独的列表 `row` 被多次使用。"

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.5.text"
msgstr "所以一个解决方案是制作 `row` 的副本，这样它们都是独立的。"

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.6.text"
msgstr "另一个解决方案是每次从头开始创建一个新的 `row`。"

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.7.text"
msgstr "在 Python 中，有几种方法可以用一点代码复制列表。"

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.8.text"
msgstr "每次创建一个新的行可以通过简单地重新排列代码来完成。"

#. https://futurecoder.io/course/#MakingTheBoard
msgid ""
"pages.MakingTheBoard.steps.fix_make_board.special_messages.not_separate.text"
msgstr "然而，结果中的子列表并不是所有独立的对象。"

#. https://futurecoder.io/course/#MakingTheBoard
#.     # __code0__:
#.     board[0][0] = 'X'
#.     board[1][0] = 'X'
#.     board[2][0] = 'X'
#.     # __code4__:
#.     board[1][0] = 'X'
#.     board[2][0] = 'X'
#.     # __code1__:
#.     board = [row, row, row]
#.     # __code2__:
#.     board[0][0] = 'X'
#.     # __code3__:
#.     row[0] = 'X'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
msgid "pages.MakingTheBoard.steps.fix_make_board.text"
msgstr ""
"你能看出发生了什么吗？\n"
"\n"
"每一行的第一个位置都得到了一个 `'X'`！\n"
"就好像代码实际上是这样做的：\n"
"\n"
"__code0__\n"
"\n"
"尝试自己找出问题所在。\n"
"但再说一次，这很棘手，所以不要让自己太烦恼。\n"
"\n"
"如果你想，这里有一些提示：\n"
"\n"
" - 尝试通过一些调试工具运行代码。\n"
" - 进行实验。对代码进行更改，看看会发生什么。\n"
" - 不，代码没有像我上面建议的那样进行 3 次赋值。只有一次列表赋值。\n"
" - 没有隐藏的循环或其他东西。\n"
" - `board` 包含多少个列表？3个？\n"
" - 前一页有一个微妙的提示，说明发生了什么。\n"
" - 有一页来自之前的章节，直接解释了这种问题。\n"
" - 具体来说是[这一页](#EqualsVsIs)。\n"
" - 尝试用 Python Tutor 运行代码。\n"
"\n"
"好的，如果你准备好了，这里是答案。\n"
"\n"
"列表 `row` 只创建了一次，并被多次重用。\n"
"`board` 包含相同的列表三次。不是副本，只是在三个地方的一个列表。\n"
"就像它这样做：\n"
"\n"
"__code1__\n"
"\n"
"这意味着这段代码：\n"
"\n"
"__code2__\n"
"\n"
"等同于：\n"
"\n"
"__code3__\n"
"\n"
"这影响了 `board` 中的“所有列表”，因为它们都是同一个列表 `row`。\n"
"换句话说，上面的行*也*等同于这两行中的每一行：\n"
"\n"
"__code4__\n"
"\n"
"因为 `row` 同时是 `board[0]`、`board[1]` 和 `board[2]`。\n"
"\n"
"你现在的任务是修复 `make_board`，使其没有这个问题。\n"
"它仍然应该返回一个长度为 `size` 的列表，其中每个\n"
"元素也是一个长度为 `size` 的列表，每个元素都是字符串 `' '`。\n"
"子列表应该都是独立的列表对象，而不是同一个\n"
"列表的重复。"

#. https://futurecoder.io/course/#MakingTheBoard
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.MakingTheBoard.steps.naive_make_board.text"
msgstr ""
"到目前为止，棋盘已经作为嵌套列表提供给你。\n"
"但对于完整的程序，你需要自己创建它。\n"
"应该很简单，对吧？这里有一些代码可以做到这一点：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"这很接近，但它有一个微妙的问题。\n"
"确保你理解代码，\n"
"如果你能找到这个错误，额外加分！\n"
"如果没有，不要感到沮丧，也不要浪费太多时间。"

#. https://futurecoder.io/course/#MakingTheBoard
msgid "pages.MakingTheBoard.title"
msgstr "制作棋盘"

#. https://futurecoder.io/course/#ModifyingWhileIterating
msgid "pages.ModifyingWhileIterating.steps.final_text.text"
msgstr ""
"重申一下，***在迭代时绝不要修改任何东西***。你的选择有：\n"
"\n"
"- 修改一个副本\n"
"- 在副本上迭代\n"
"- 不修改任何东西，而是创建一个新版本。"

#. https://futurecoder.io/course/#ModifyingWhileIterating
#.     # __code1__:
#.     for number in numbers.copy():
#.     # __code0__:
#.     for number in numbers:
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.number
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
msgid "pages.ModifyingWhileIterating.steps.make_copy.requirements"
msgstr ""
"运行与上面相同的程序，但更改第二行：\n"
"\n"
"__code0__\n"
"\n"
"改为：\n"
"\n"
"__code1__\n"
"\n"
"也就是说，在 `numbers` 后面加上 `.copy()`，但在 `:` 之前。"

#. https://futurecoder.io/course/#ModifyingWhileIterating
#.     # __code0__:
#.     for number in numbers.copy():
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.number
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
msgid "pages.ModifyingWhileIterating.steps.make_copy.text"
msgstr ""
"但事实证明，这几乎做了同样的事情 - 它没有出错，但仍然没有删除 7 或 3。\n"
"这发生的原因是 - 迭代列表时，底层仍然会遍历索引。\n"
"\n"
"这里的教训是***在迭代时绝不要修改任何东西***。保持变更和循环分开。\n"
"\n"
"好消息是，有很多方法可以解决这个问题。你可以选择在副本上循环，如下所示：\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#ModifyingWhileIterating
msgid "pages.ModifyingWhileIterating.steps.make_copy2.text"
msgstr ""
"现在，被修改的列表和被迭代的列表是独立的对象，即使它们最开始的内容相同。\n"
"\n"
"同样，你可以在原始列表上循环并修改一个副本：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#ModifyingWhileIterating
msgid "pages.ModifyingWhileIterating.steps.make_new_list.text"
msgstr ""
"或者你可以从头开始构建一个新列表。在这种情况下，我们在一个练习中已经做过类似的事情：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#ModifyingWhileIterating
msgid "pages.ModifyingWhileIterating.steps.remove_instead_of_pop.text"
msgstr ""
"当它运行时，它显然连 7 或 3 都没有查看就跳过了，并且在最后尝试访问一个过高的索引时失败。你能看出这是为什么吗？\n"
"\n"
"索引变量 `i` 按照正常的值 0, 1, 2, ... 运行，但随着列表的变化，这些不再是我们想要的位置。例如，在第一次迭代中 `i` 是 0，`number` 是 10，这个数字被移除了。这使得其余的数字向左移动一个位置，所以现在 7 在位置 0。但在下一次迭代中 `i` 是 1，而 `numbers[i]` 是 8。7 被跳过了。\n"
"\n"
"我们可以尝试编写程序使用 `remove` 而不是 `pop`，这样我们就不必使用索引。这种方式看起来甚至更好。\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#ModifyingWhileIterating
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.ModifyingWhileIterating.steps.run_broken_with_python_tutor.text"
msgstr ""
"考虑这个程序。它循环遍历一个数字列表，并移除小于 10 的数字。或者至少，它是这样尝试的。\n"
"用 Python Tutor 运行它。\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"(记住 `numbers.pop(i)` 会从 `numbers` 中移除索引为 `i` 的元素)"

#. https://futurecoder.io/course/#ModifyingWhileIterating
msgid "pages.ModifyingWhileIterating.title"
msgstr "在迭代时修改"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.hints.0.text"
msgstr ""
"你的解决方案应该有正好三条语句：`x = [15, 12, -6, 3]`，`y = `后面跟着从列表中精确复制的一行，以及`print(y)`。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.hints.1.text"
msgstr "如果你不确定，可以查一下如何计算平均值/均值。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.hints.2.text"
msgstr "要计算`x`中数字的平均值，我们需要两个东西。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.hints.3.text"
msgstr "哪两个函数/方法能给你这两个东西？"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.hints.4.text"
msgstr "你如何将这两个东西结合起来计算平均值？"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.requirements"
msgstr ""
"复制上面的三行，然后用上面长列表中的一行精确替换`(insert_one_line_from_above)`。中间的行仍然应该以`y = `开头。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     x = [15, 12, -6, 3]
#.     y = (insert_one_line_from_above)
#.     print(y)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.text"
msgstr ""
"干得好！在下一个练习中，从这个不完整的程序开始：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"将`y = `后面的部分替换为上面列表中的一行。\n"
"最终程序应该打印出`x`中数字的平均值（严格来说是*均值*）。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum
msgid ""
"pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.hints.0.text"
msgstr ""
"你的解决方案应该有正好三条语句：`x = ['a', 'b', 'c']`，`y = `后面跟着从列表中精确复制的一行，以及`print(y)`。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum
msgid ""
"pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.hints.1.text"
msgstr "什么时候`1 in x`为真？"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum
msgid ""
"pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.hints.2.text"
msgstr "当`1`在`x`中时！"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum
msgid ""
"pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.hints.3.text"
msgstr "`1`可能在`x`中出现一次、两次或三次..."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum
msgid ""
"pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.hints.4.text"
msgstr "...但不能出现零次！"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid ""
"pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.requirements"
msgstr ""
"复制上面的三行，然后用上面长列表中的一行精确替换`1 in x`。中间的行仍然应该以`y = `开头。你选择的行应该与`1 in "
"x`有相同的效果，以便程序打印出`True`。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     sum(len(x))
#.     sum(range(x))
#.     sum(range(len(x)))
#.     sum(len(range(x)))
#.     sum(range(x)) + 1
#.     sum(range(x + 1))
#.     sum(x) / len(x)
#.     sum(x) / range(x)
#.     sum(x) / range(len(x))
#.     sum(x) / len(range(x))
#.     sorted(x)[1]
#.     sorted(x)[2]
#.     sorted(x)[-1]
#.     sorted(x)[-2]
#.     x.count(1) >= 0
#.     x.count(1) > 0
#.     x.count(1) > 1
#.     # __code1__:
#.     x = [1, 2, 0, 3]
#.     y = 1 in x
#.     print(y)
msgid "pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.text"
msgstr ""
"你可能会认出其中一些来自你的练习。我向你保证，那些练习并不是毫无意义的，\n"
"因为你现在已经学到了有价值的基本技能。例如，你可以使用`in`来检查列表中是否包含5，\n"
"但没有类似简单的方法来检查一个大于5的数字。\n"
"\n"
"现在你将解决另一组涉及这些新概念的四个练习。\n"
"同样，正确和错误的代码行混合在一起，\n"
"你必须从列表中选择正确的行。\n"
"\n"
"__code0__\n"
"\n"
"这是一个程序：\n"
"\n"
"    __copyable__\n"
"__code1__\n"
"\n"
"将`1 in x`的部分替换为上面列表中的一行（保留`y = `），以完成相同的功能。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     some_list.count(value)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value
msgid "pages.MoreListFunctionsAndMethods.steps.count_predict_exercise.text"
msgstr ""
"**`count`**：使用以下语法返回参数在列表中出现的次数\n"
"\n"
"__code0__\n"
"\n"
"例如在终端中运行这一行：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid "pages.MoreListFunctionsAndMethods.steps.final_text.text"
msgstr "恭喜你！你现在已经掌握了列表方法和函数！"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     value in some_list
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value
msgid "pages.MoreListFunctionsAndMethods.steps.in_predict_exercise.text"
msgstr ""
"**`in`**：一个比较运算符，用于检查一个值是否在列表中，使用以下语法\n"
"\n"
"__code0__\n"
"\n"
"例如运行这个程序：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.hints.0.text"
msgstr ""
"你的解决方案应该有正好三条语句：`x = [12, -6, 2, -1, 3]`，`y = `后面跟着从列表中精确复制的一行，以及`print(y)`。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.hints.1.text"
msgstr "`x`中的数字似乎都是乱的。你能做点什么吗？"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.hints.2.text"
msgstr "如果你搞定了那部分，试着在终端中使用那个函数来玩玩。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.hints.3.text"
msgstr "你如何使用那个函数来获取列表中的最小值？那最大的呢？"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.hints.4.text"
msgstr "在那之后，你如何获取*第二*小的值？"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid ""
"pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.requirements"
msgstr ""
"复制上面的三行，然后用上面长列表中的一行精确替换`(insert_one_line_from_above)`。中间的行仍然应该以`y = `开头。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     x = [12, -6, 2, -1, 3]
#.     y = (insert_one_line_from_above)
#.     print(y)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid ""
"pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.text"
msgstr ""
"很好。最后一个：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"将`y = `后面的部分替换为上面列表中的一行。\n"
"最终程序应该打印出`x`中的*第二小的值*。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     sorted(some_list)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid "pages.MoreListFunctionsAndMethods.steps.sorted_predict_exercise.text"
msgstr ""
"这里有一些更有用的函数/方法。\n"
"\n"
"**`sorted`**：接受一个可迭代对象，并返回一个从小到大的元素列表，使用以下语法\n"
"\n"
"__code0__\n"
"\n"
"例如在终端中运行这一行：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     sum(some_list)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid "pages.MoreListFunctionsAndMethods.steps.sum_predict_exercise.text"
msgstr ""
"**`sum`**：使用以下语法将一个可迭代的数字相加\n"
"\n"
"__code0__\n"
"\n"
"例如在终端中运行这一行：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_range_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.hints.0.text"
msgstr "你的解决方案应该有正好三条语句：`x = 100`，`y = `后面跟着从列表中精确复制的一行，以及`print(y)`。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_range_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.hints.1.text"
msgstr "什么函数/方法可以用来加总？"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_range_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.hints.2.text"
msgstr "哪个函数/方法给我们数字`1, 2, 3, ..., x`？"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_range_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.hints.3.text"
msgstr "你必须做一个小调整，否则最后一个数字`x`将被遗漏。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid ""
"pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.requirements"
msgstr ""
"复制上面的三行，然后用上面长列表中的一行精确替换`(insert_one_line_from_above)`。中间的行仍然应该以`y = `开头。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     x = 100
#.     y = (insert_one_line_from_above)
#.     print(y)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid "pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.text"
msgstr ""
"干得好！在下一个练习中，从这个不完整的程序开始：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"将`y = `后面的部分替换为上面列表中的一行。\n"
"最终程序应该打印出从`1`到`x`（包括`x`）的所有数字的和，即`1 + 2 + 3 + ... + x`。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid "pages.MoreListFunctionsAndMethods.title"
msgstr "更多列表函数和方法"

#. https://futurecoder.io/course/#MoreOnReturn
msgid "pages.MoreOnReturn.steps.break_vs_return.requirements"
msgstr "运行与上一步相同的代码，但将函数的最后一行（`return letter`）替换为仅 `break`。"

#. https://futurecoder.io/course/#MoreOnReturn
msgid "pages.MoreOnReturn.steps.break_vs_return.text"
msgstr ""
"和之前一样，`return` ***会停止整个函数***，包括所有循环。\n"
"\n"
"之前我们展示了 [如何用 `break` 停止一个循环](#UsingBreak)。\n"
"将 `return letter` 改为 `break`，看看有什么不同。"

#. https://futurecoder.io/course/#MoreOnReturn
#.     # __code0__:
#.     if condition:
#.         return value1
#.     else:
#.         return value2
#.     # __code1__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.condition
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value2
msgid "pages.MoreOnReturn.steps.cannot_return_multiple_values.text"
msgstr ""
"一旦执行了 `return` 语句，函数将停止，后面的代码将被忽略。\n"
"这意味着在同一个代码块中，`return` 后面的任何代码都是 *不可达* 的：\n"
"`return 2` 无论我们运行这个函数多少次都 *永远* 不会被到达！\n"
"\n"
"***每次函数调用只能执行一个 `return`，然后执行停止。***\n"
"\n"
"多个 `return` 语句在适当使用时仍然很有用，例如在 `if-else` 块中：\n"
"\n"
"__code0__\n"
"\n"
"一个常见的错误是误解 `return` 在 `for` 循环中的作用。试试以下代码：\n"
"\n"
"    __copyable__\n"
"__code1__"

#. https://futurecoder.io/course/#MoreOnReturn
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.MoreOnReturn.steps.double_return_in_one_function.text"
msgstr ""
"有时 `return` 对新学习者来说可能是混淆和错误的来源。\n"
"让我们更多地了解它是如何工作的。\n"
"\n"
"运行这段代码：\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#MoreOnReturn
msgid "pages.MoreOnReturn.steps.final_text.text"
msgstr ""
"与 `return` 不同，`break` 只会停止它所使用的最内层循环，在这个例子中是 `for number in range(3):`。\n"
"以下是确切发生的事情：\n"
"\n"
"- 对于 `letter = b`，`print(f\"{letter} {number}\")` 这一行只在 `number = 0` 时执行，\n"
"- 然后内层循环被 `break` 停止，但\n"
"- 外层循环继续执行，转到下一个字母 `c`\n"
"- 这个字母会完全执行，因为它没有触发 `break` 语句。"

#. https://futurecoder.io/course/#MoreOnReturn
#.     # __code0__:
#.     def double_numbers(numbers):
#.         doubles = []
#.         for x in numbers:
#.             doubles.append(x * 2)
#.         return doubles
#.     assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
#.     # __code1__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.double_numbers
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.doubles
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
msgid "pages.MoreOnReturn.steps.return_ends_whole_function.text"
msgstr ""
"起初，在 `for` 循环中对每次迭代 `return` 一个值看起来很直观。\n"
"但并不是这样工作的！\n"
"如果你用 `snoop` 或 Python tutor 检查代码，你会看到函数在第一次\n"
"循环迭代中返回 2，然后立即结束。\n"
"\n"
"即使只有一个 `return` 语句，它也只会执行一次并返回一个值。\n"
"如果你想返回多个值，可以返回一个列表：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"如果有嵌套循环会发生什么？试试以下函数：\n"
"\n"
"    __copyable__\n"
"__code1__"

#. https://futurecoder.io/course/#MoreOnReturn
msgid "pages.MoreOnReturn.title"
msgstr "`return` 结束函数调用"

#. https://futurecoder.io/course/#MultiLineExpressions
msgid "pages.MultiLineExpressions.steps.final_text.text"
msgstr "所以如果你遇到神秘的 `SyntaxError`，请确保你没有错误地拆分任何行！"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MultiLineExpressions.steps.invalid_multiline
msgid "pages.MultiLineExpressions.steps.invalid_multiline.program"
msgstr ""
"is_friend = name == \"Alice\" or\n"
"            name == \"Bob\""

#. https://futurecoder.io/course/#MultiLineExpressions
msgid "pages.MultiLineExpressions.steps.invalid_multiline.text"
msgstr ""
"我们的代码行开始变得相当长了。\n"
"幸运的是，Python提供了几种方法来将一个语句分散到多行中，\n"
"但这不是自动的。你必须确保Python明白你正在做什么。\n"
"例如，这段代码是无效的语法，会给你一个错误：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#MultiLineExpressions
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.MultiLineExpressions.steps.valid_multiline.text"
msgstr ""
"Python试图将这解释为两行独立的代码，并感到困惑。你需要告诉它\n"
"第一行是继续到第二行的。\n"
"\n"
"一种方法是在行末添加 `\\` 来“转义”换行符。\n"
"\n"
"另一种方法是确保换行符包含在某种括号内。这样，行\n"
"的延续是隐含的，因为Python会等到所有括号都关闭后，\n"
"才会认为一行是完整的。如果你已经有括号了，比如你在调用一个函数\n"
"或者创建一个列表，你可能不需要做任何事情！否则，你可以在任何表达式中添加括号\n"
"来暗示行的延续。\n"
"\n"
"这里有一些例子。请仔细注意细节。\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#MultiLineExpressions
msgid "pages.MultiLineExpressions.title"
msgstr "多行语句"

#. https://futurecoder.io/course/#NavigatingShellHistory
msgid "pages.NavigatingShellHistory.steps.final_text.text"
msgstr ""
"这里有个小提示：你经常会想要重新运行之前输入的代码，或者稍微修改过的版本。你可以复制和粘贴，但这很繁琐，会妨碍你进行实验。一个更好的方法是按下键盘上的上箭头键。这会将之前的代码行插入到命令行中。继续按它可以向更早的历史记录回溯，如果你回溯得太远，可以按下箭头键向前移动。现在试试看吧。"

#. https://futurecoder.io/course/#NavigatingShellHistory
msgid "pages.NavigatingShellHistory.title"
msgstr "浏览命令行历史"

#. https://futurecoder.io/course/#NestedListAssignment
msgid "pages.NestedListAssignment.steps.final_text.text"
msgstr "太棒了！你快要把所有内容整合在一起了，继续加油！"

#. https://futurecoder.io/course/#NestedListAssignment
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.NestedListAssignment.steps.modify_list_in_function.text"
msgstr ""
"我们已经看到如何从用户那里获取输入，现在让我们用这些输入来实际在棋盘上放置棋子\n"
"并进行游戏。首先，试试这段代码：\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.0.text"
msgstr "你的函数需要调用 `input()` 两次。输入不会作为参数传递给 `play_move`。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.1.text"
msgstr "`input()` 总是返回一个字符串。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.10.text"
msgstr "一旦你得到了两个数字，你需要用它们来修改嵌套列表 `board`。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.11.text"
msgstr "这段代码在上面已经给你展示过了。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.12.text"
msgstr "你只需要使用用户输入的数字，而不是硬编码的 1 和 0。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.13.text"
msgstr "你可以在一行中使用嵌套下标，或者分两步来完成。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.2.text"
msgstr "看起来像数字的字符串仍然是字符串，而不是数字。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.3.text"
msgstr "列表索引必须是数字，而不是字符串。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.4.text"
msgstr "如果棋盘是 3x3，用户可能会为每个坐标输入 1、2 或 3。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.5.text"
msgstr "长度为 3 的列表的有效索引是什么？"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.6.text"
msgstr "你需要将输入的 1、2 或 3 转换为 0、1 或 2。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.7.text"
msgstr "你还需要能够处理更大的棋盘，比如 9x9 或更大。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.8.text"
msgstr "你不能用字符串进行数学运算，只能用数字。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.9.text"
msgstr "你如何将字符串转换为数字？"

#. https://futurecoder.io/course/#NestedListAssignment
msgid "pages.NestedListAssignment.steps.nested_assignment_input.requirements"
msgstr "你的函数应该修改 `board` 参数。它不需要 `return` 或 `print` 任何内容。"

#. https://futurecoder.io/course/#NestedListAssignment
#.     # __code3__:
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#.     # __code0__:
#.     row = board[1]
#.     row[0] = player
#.     # __code1__:
#.     board[1][0] = player
#.     # __code2__:
#.     2
#.     1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%5Cn%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27%5CnO+to+play%3A%5Cn%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27%5CnX+to+play%3A%5Cn%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.first_row
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.joined_row
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.joined_rows
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.play_game
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.play_move
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.player
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
msgid "pages.NestedListAssignment.steps.nested_assignment_input.text"
msgstr ""
"这两行：\n"
"\n"
"__code0__\n"
"\n"
"可以合并成一行：\n"
"\n"
"__code1__\n"
"\n"
"这两段代码几乎完全等价。Python 首先计算\n"
"`board[1]` 来 *获取* 内部列表，而 `[0] = ...` 则设置 `board[1]` 的一个元素。\n"
"你可以在 `birdseye` 中看到 `board[1]` 的值，因为它是一个表达式，\n"
"你实际上可以用任何其他表达式替换它。\n"
"\n"
"现在你知道如何在嵌套列表中设置元素，是时候让这个游戏互动起来了！\n"
"写你自己的 `play_move` 版本，从用户那里获取输入\n"
"来确定在哪里下棋，而不是总是下在 `board[1][0]`。\n"
"它应该调用 `input()` 两次，这样用户可以分别输入行和列\n"
"作为两个单独的数字。此外，我们的用户不是程序员，所以他们从 1 开始计数，\n"
"而不是从 0 开始。\n"
"\n"
"例如，如果用户输入这些内容：\n"
"\n"
"__code2__\n"
"\n"
"这意味着他们想在第二行和第一列下棋，这与我们的原始示例相同。\n"
"\n"
"这里有一些起始代码：\n"
"\n"
"    __copyable__\n"
"__code3__\n"
"\n"
"这会调用 `play_move` 两次，因此用户需要输入两对数字。\n"
"以下是一个“游戏”应该是什么样子的示例：\n"
"\n"
"     123\n"
"    1\n"
"    2\n"
"    3\n"
"\n"
"    X 下棋：\n"
"\n"
"__code2__\n"
"     123\n"
"    1\n"
"    2X\n"
"    3\n"
"\n"
"    O 下棋：\n"
"\n"
"    1\n"
"    3\n"
"     123\n"
"    1  O\n"
"    2X\n"
"    3\n"
"\n"
"你不需要完全使用提供的代码，它只是让你感受一下发生了什么。\n"
"重要的是你的 `play_move` 函数正确地修改 `board` 参数。\n"
"它不需要返回或打印任何内容，这不会被检查。\n"
"\n"
"你可以假设用户总是会输入有效的数字。稍后我们将学习如何处理\n"
"无效输入，比如超出范围的数字或根本不是数字的输入。"

#. https://futurecoder.io/course/#NestedListAssignment
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.NestedListAssignment.steps.nested_assignment_two_lines.text"
msgstr ""
"注意调用 `play_move(game_board, 'X')` 实际上是 *直接修改* `game_board`。\n"
"在调用 `play_move` 时的变量 `board` 和\n"
"在调用 `play_game` 时的变量 `game_board` 指向同一个列表对象。\n"
"没有复制。Python Tutor 很擅长用箭头来显示这一点。\n"
"\n"
"这也意味着在这种情况下 `play_move` 不需要返回任何内容，\n"
"它可以直接修改 `board`，而调用者（在这种情况下是 `play_game`）将看到效果。\n"
"\n"
"然而，我们的棋盘是二维的，由嵌套列表表示。\n"
"所以我们需要将 `player` 分配给内部列表的一个元素，类似于这样：\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#NestedListAssignment
msgid "pages.NestedListAssignment.title"
msgstr "嵌套列表作业：在棋盘上进行移动"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
msgid ""
"pages.NewlinesAndFormatBoard.steps.discovering_newline.special_messages.bad_string.text"
msgstr "哎呀，`string` 的值不正确。请再次运行上一步的程序。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
msgid "pages.NewlinesAndFormatBoard.steps.discovering_newline.text"
msgstr ""
"太棒了！*三重引号字符串*可以跨越多行，并且它们会在输出中显示。\n"
"\n"
"和单引号、双引号一样，三重引号只是另一种表示法，并不是一种新的字符串类型。\n"
"`\"\"\"abc\"\"\"` 和 `\"abc\"` 是一样的。\n"
"\n"
"不过 `string` 确实包含了一些新内容。请在终端中运行 `__program__` 来查看。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
msgid "pages.NewlinesAndFormatBoard.steps.final_text.text"
msgstr ""
"干得好！这真是一个挑战。\n"
"\n"
"现在你已经掌握了如何构建多行文本的字符串，并解决了向玩家显示棋盘的问题。\n"
"\n"
"接下来你将学习更多关于 Python 中的数据类型，以及如何转换它们，如何从玩家那里获取输入。\n"
"你已经完成了项目的一半。继续加油！"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.0.text"
msgstr "有两种类型的行需要显示：一种类型是用 `|` 连接的棋子，另一种类型是用 `-` 连接的 `+`。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.1.text"
msgstr "这两种类型的行都可以通过适当地使用 `join` 来构建。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.10.text"
msgstr "然后对该列表应用 `join`，用 `+-` 行作为分隔符。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.11.text"
msgstr "为了正确地将换行符添加到 `+-` 行，请查看我们提供的测试用例。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.2.text"
msgstr "例如，你如何使用 `join` 将一行 `['X', 'O', 'X']` 转换为 `'X|O|X'`？"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.3.text"
msgstr "同样，你如何使用 `join` 获得 `'-+-+-'`？你应该对哪个列表应用 `join`？"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.4.text"
msgstr "一旦你弄清楚了如何构建这两种类型的行，你如何将它们组合在一起以获得最终结果？"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.5.text"
msgstr "注意，带有 `+-` 符号的行总是相同的。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.6.text"
msgstr "而且每对相邻的棋子行之间都有一行 `+-` 分隔。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.7.text"
msgstr "你可以直接对行本身使用 `join`！"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.8.text"
msgstr "带有棋子的行可以用 `+-` 行连接在一起（在适当的位置添加换行符）。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.9.text"
msgstr "为此，首先你需要在构建它们时将带有棋子的行存储在一个列表中。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#.     # __code0__:
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
#.     # __code3__:
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'X|O|X\n-+-+-\nO| | \n-+-+-\n |X|O'
#.     )
#.     # __code1__:
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
#.     # __code2__:
#.     board = [
#.         ['X', 'O', 'X'],
#.         [' ', 'O', 'O'],
#.         [' ', 'X', ' ']
#.     ]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%5Cn%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27%5Cn%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27X%7CO%7CX%5Cn-%2B-%2B-%5CnO%7C+%7C+%5Cn-%2B-%2B-%5Cn+%7CX%7CO%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.joined_rows
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.result
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
msgid "pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text"
msgstr ""
"很棒！一个典型的解决方案看起来像这样：\n"
"\n"
"__code0__\n"
"\n"
"如果你查阅了 `join` 的用法并在你的解决方案中使用了它，那就太好了！\n"
"你可能用类似这样的方式解决了它：\n"
"\n"
"__code1__\n"
"\n"
"如果你愿意，你可以现在继续到 [下一页](#Types)。或者你可以做一个额外的挑战！\n"
"\n"
"编写一个改进版的 `format_board`，显示行和列的分隔符。例如，如果\n"
"\n"
"__code2__\n"
"\n"
"那么 `print(format_board(board))` 应该打印\n"
"\n"
"    X|O|X\n"
"    -+-+-\n"
"     |O|O\n"
"    -+-+-\n"
"     |X|\n"
"\n"
"它应该适用于任何大小的方形 `board`。\n"
"\n"
"我们强烈鼓励你在这个练习中使用 `join`。我们提供了一个测试，就像之前一样，你可以编写额外的测试：\n"
"\n"
"    __copyable__\n"
"__code3__"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.0.text"
msgstr "仔细查看我们提供的测试用例。它展示了你所需的一切！"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.1.text"
msgstr "你需要构建整个棋盘的字符串。从一个空字符串开始。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.2.text"
msgstr "对于每一行，将该行的字符添加到字符串中。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.3.text"
msgstr "你需要一个嵌套循环。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.4.text"
msgstr "当你到达一行的末尾时，需要在下一行之前添加一个换行符。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.5.text"
msgstr "`'\\n'` 就像任何其他字符一样！你可以像往常一样用 `+` 添加它。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.6.text"
msgstr "注意最后一行的结尾与其他行不同。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.7.text"
msgstr "在添加换行符之前，你需要检查这是否是最后一行。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.8.text"
msgstr "你的外部循环应该遍历棋盘的长度。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.9.text"
msgstr "然后检查你是否在最后一个索引。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#.     # __code0__:
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'XOX\nO  \n XO'
#.     )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27XOX%5CnO++%5Cn+XO%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.text"
msgstr ""
"现在使用换行符编写函数 `format_board`（你的解决方案应该适用于任何大小的方形 `board`）：\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.NewlinesAndFormatBoard.steps.introducing_newline.text"
msgstr ""
"这是秘密！\n"
"\n"
"`\\n` 代表一个 ***换行符***。这只是另一个字符，就像字母或空格 (`' '`) 一样。\n"
"它是你通过按下键盘上的 Enter 键输入的两个独立行之间的字符。\n"
"\n"
"再次强调，`\\n` *表示* Python 字符串字面量中的换行符。\n"
"字符串实际上并不包含 `\\` 和 `n`，它只包含一个字符。在终端中检查一下：\n"
"\n"
"__code0__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string
msgid "pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.program"
msgstr ""
"assert_equal(\n"
"    format_board([\n"
"        ['X', 'O', 'X'],\n"
"        [' ', 'O', 'O'],\n"
"        [' ', 'X', ' ']\n"
"    ]),\n"
"    \"XOX\n"
"      OO\n"
"      X \"\n"
")"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#.     # __code1__:
#.     def format_board(board):
#.         ...
#.         return ...
#.     assert_equal(format_board([...]), "...")
#.     # __code0__:
#.     assert_equal(print_board([...]), "...")
#.     # __code2__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_board
msgid "pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text"
msgstr ""
"这是一个好的开始，但理想情况下我们希望有一个 *返回* 字符串的函数，而不是打印它。\n"
"这样其他代码可以以不同的方式轻松使用这个字符串。我们可能想要操作这个字符串\n"
"(例如，给它画一个框或提取前几行)，我们可能想把它发送到屏幕以外的地方\n"
"(例如，一个文件)，而在这个特定情况下我们希望能够用 `assert_equal` 测试它。这是行不通的：\n"
"\n"
"__code0__\n"
"\n"
"因为 `print_board` 不使用 `return`，所以它默认返回 `None`。\n"
"所以我们想要这样的代码：\n"
"\n"
"__code1__\n"
"\n"
"然后 `print(format_board(board))` 应该打印出我们在开始时看到的内容。\n"
"但是我们如何返回一个包含多行的字符串呢？我们如何测试它？我们想做这样的事情：\n"
"\n"
"    __copyable__\n"
"__code2__\n"
"\n"
"看看这怎么不行。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.multi_line_strings_triple_quotes
msgid ""
"pages.NewlinesAndFormatBoard.steps.multi_line_strings_triple_quotes.program"
msgstr ""
"string = \"\"\"First line\n"
"Second line\"\"\"\n"
"print(string)"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
msgid ""
"pages.NewlinesAndFormatBoard.steps.multi_line_strings_triple_quotes.text"
msgstr ""
"通常，字符串字面量必须在一行上，所以这是无效的：\n"
"\n"
"    string = \"First line\n"
"    Second line\"\n"
"    print(string)\n"
"\n"
"但是 Python 提供了一种方法！解决方案是使用 *三重引号*，即三字符连续的引号\n"
"(可以是 `'''` 或 `\"\"\"`) 包围字符串的内容。运行以下代码：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.NewlinesAndFormatBoard.steps.one_way_to_print_board.text"
msgstr ""
"接下来我们想解决显示井字棋棋盘的问题。这是其中一种方法：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"(“`\"\".join` 是什么？去谷歌一下吧！)"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
msgid "pages.NewlinesAndFormatBoard.title"
msgstr "换行符，`format_board`"

#. https://futurecoder.io/course/#OtherComparisonOperators
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.OtherComparisonOperators.steps.brokn_kyboard.text"
msgstr ""
"这是一个使用 `!=` 的可爱小程序：\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.0.text"
msgstr "这几乎和前一步完全一样，只是用字符串而不是数字。"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.1.text"
msgstr "你只需要在命令行中运行一行非常小且简单的代码。"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.2.text"
msgstr "你也可以通过在命令行中运行多行代码来做到这一点，首先定义变量，然后比较它们，但你不需要这样做，这可以在没有变量的情况下完成。"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.3.text"
msgstr "还记得在课程开始时在命令行中添加两个字符串吗？"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.4.text"
msgstr "例如，我们做了 `'hello' + 'world'`"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.5.text"
msgstr "对于这个练习，你基本上需要做的就是比较它们。"

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.steps.comparing_strings.requirements"
msgstr "在命令行中运行任何代码，使用 `<` 或 `>` 比较两个字符串。"

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.steps.comparing_strings.text"
msgstr ""
"你也可以使用这些运算符来比较字符串。Python会从左到右逐个比较每个字符的值，遇到第一个不同字符时，该字符的编码值大小决定字符串大小。自己试试看。"

#. https://futurecoder.io/course/#OtherComparisonOperators
#.     # __code0__:
#.     if x1 < x2:
#.         if x1 < x3:
#.             first = x1
#.         else:
#.             first = x3
#.     else:
#.         if x2 < x3:
#.             first = x2
#.         else:
#.             first = x3
#.     print(first)
#.     # __code1__:
#.     first = x1
#.     if x2 < first:
#.         first = x2
#.     if x3 < first:
#.         first = x3
#.     print(first)
#.     # __code2__:
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Alice%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Bob%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Charlie%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.first
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x3
msgid "pages.OtherComparisonOperators.steps.final_text.text"
msgstr ""
"太棒了！\n"
"\n"
"有很多方法可以解决这个问题。这里有一个解决方案：\n"
"\n"
"__code0__\n"
"\n"
"还有另一个：\n"
"\n"
"__code1__\n"
"\n"
"这些程序（还有你的程序）在处理数字和字符串时都同样有效。所以对于：\n"
"\n"
"__code2__\n"
"\n"
"它们将打印 `Alice`，因为这是按字母顺序排列的第一个字符串。\n"
"\n"
"`<` 和 `>` 在比较值相等时会返回 False。例如，\n"
"3 不小于 3，因此 `3 < 3` 和 `3 > 3` 都是 False。\n"
"要允许相等的值，请使用 `<=` 和 `>=`。\n"
"再说一次，如果你眯着眼睛看，它们看起来有点像 ≤ 和 ≥。\n"
"注意 `=` 是第二个出现的 - 没有 `=<` 或 `=>` 这样的运算符。\n"
"要记住这一点，可以大声读出它们为“少于或等于”和“大于或等于”。\n"
"\n"
"总之，主要的比较运算符是 `==`、`!=`、`<`、`>`、`<=` 和 `>=`。\n"
"如果你对它们的作用有任何疑问，可以在命令行中试试它们！"

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.steps.grades_example.text"
msgstr ""
"这是一个实际的 `<` 运算符示例，供你尝试：\n"
"\n"
"__program_indented__\n"
"\n"
"记住 `elif percentage < 60` 在 `if percentage < 40` 之后意味着“如果百分比不小于 40 并且也小于 60”，所以它将适用于从 40 到 59 的所有数字（包括 40 和 59）。类似地，'B' 是指 60 到 79 的百分比，而 'A' 是指任何 80 及以上的数字。"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.introducing_less_than
msgid ""
"pages.OtherComparisonOperators.steps.introducing_less_than.hints.0.text"
msgstr "你只需要在命令行中运行一行非常小且简单的代码。"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.introducing_less_than
msgid ""
"pages.OtherComparisonOperators.steps.introducing_less_than.hints.1.text"
msgstr "你会如何在命令行中添加两个数字？"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.introducing_less_than
msgid ""
"pages.OtherComparisonOperators.steps.introducing_less_than.hints.2.text"
msgstr "例如，尝试 `123 + 456`"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.introducing_less_than
msgid ""
"pages.OtherComparisonOperators.steps.introducing_less_than.hints.3.text"
msgstr "对于这个练习，你基本上需要做的就是比较它们。"

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid ""
"pages.OtherComparisonOperators.steps.introducing_less_than.requirements"
msgstr "在命令行中运行任何代码，使用 `<` 或 `>` 比较两个数字。"

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.steps.introducing_less_than.text"
msgstr ""
"其他有用的运算符是 `<`（小于）和 `>`（大于）。例如，`a < b` 意思是 \"`a` 小于 "
"`b`\"。尝试在命令行中使用其中一个来比较两个数字。"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise
msgid "pages.OtherComparisonOperators.steps.min_three_exercise.hints.0.text"
msgstr "尝试编写一个程序，打印出 `x1` 和 `x2` 中的最小值。"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise
msgid "pages.OtherComparisonOperators.steps.min_three_exercise.hints.1.text"
msgstr "你只需要几次使用 `<`、`if`，也许还有 `else`。"

#. https://futurecoder.io/course/#OtherComparisonOperators
#.     # __code0__:
#.     x1 = 30
#.     x2 = 10
#.     x3 = 20
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x3
msgid "pages.OtherComparisonOperators.steps.min_three_exercise.text"
msgstr ""
"现在进行一个练习：编写一个程序，接受三个变量 `x1`、`x2` 和 `x3`，并打印出最小的那个值。所以对于：\n"
"\n"
"__code0__\n"
"\n"
"它应该打印 `10`。"

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.steps.try_not_equals.text"
msgstr ""
"等于运算符 `==` 的相反是 *不等于* 运算符 `!=`。如果你眯着眼睛看，它有点像 ≠。当两个值不相等时，它的值为 "
"`True`。在命令行中尝试一下 `__program__`。"

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.title"
msgstr "其他比较运算符"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#.     # __code0__:
#.     def quadruple(x):
#.         x = double(x)
#.         x = double(x)
#.         return x
#.     def quadruple(x):
#.         return double(double(x))
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.double
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quadruple
msgid "pages.ReturningValuesFromFunctions.steps.final_text.text"
msgstr ""
"做得好！这里有两种可能的解决方案：\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
msgid "pages.ReturningValuesFromFunctions.steps.first_return.text"
msgstr ""
"当函数*返回*值而不仅仅是打印它们时，它们特别有用。试试这个例子：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
msgid "pages.ReturningValuesFromFunctions.steps.losing_return_value.text"
msgstr ""
"在这里，我们将 `number`（其值为 `5`）作为参数 `x` 传递给函数 `double`，而 `double` *返回*\n"
"`x * 2`，即 `5 * 2`，即 `10`，这成为变量 `twice` 的值。特殊关键字 `return` 在\n"
"`double` 内部使得 `double(number)` 成为一个有值的表达式 - 特别是返回的值。\n"
"这有点像 `twice = double(number)` 等价于 `twice = number * 2`，尽管这并不是\n"
"确切发生的事情。\n"
"\n"
"注意，`double(number)` *并没有改变 `number`*。最后，`number` 仍然是 `5`。相反，`double(number)`\n"
"返回了一个新值。程序利用了这个返回值，这里是通过将其存储\n"
"在一个变量中。立即用 `print(double(number))` 打印它也可以。另一方面，\n"
"试试这个：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.0.text"
msgstr "要乘以 4，可以先乘以 2 两次。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.1.text"
msgstr "这意味着你需要调用 `double` 两次。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.10.text"
msgstr "查看 `double` 的定义以获取示例。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.11.text"
msgstr "确保你不要在 `quadruple` 的函数体内调用 `quadruple`。检查你的缩进。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.2.text"
msgstr "确保每次都使用 `double` 返回的值。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.3.text"
msgstr "确保你有函数定义的所有部分。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.4.text"
msgstr "这包括 `def`、`()` 和 `:`。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.5.text"
msgstr "确保你的函数命名为 `quadruple`。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.6.text"
msgstr "确保它在括号 `()` 中接受一个名为 `x` 的参数。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.7.text"
msgstr "在函数体内使用这个参数。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.8.text"
msgstr "确保函数体是缩进的。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.9.text"
msgstr "确保你在最后返回某个值。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.messages.used_multiply.text"
msgstr ""
"你不能在 `quadruple` 内部使用 `*`、`+`，甚至任何数字。\n"
"你必须调用 `double` 来解决这个问题。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.requirements"
msgstr "编写一个程序，定义一个名为 `quadruple` 的函数，如上所述。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
msgid "pages.ReturningValuesFromFunctions.steps.quadruple_exercise.text"
msgstr ""
"在这里，`double(number)` 仍然返回 `10`，但我们没有利用这个值，所以它被丢失了。`number` 仍然是 `5`。\n"
"\n"
"编写一个函数 `quadruple`，它接受一个参数 `x` 并返回该参数乘以 4 的值。\n"
"你只能使用 `double` 函数 - 在 `quadruple` 的主体中不允许直接使用数字或乘法。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
msgid "pages.ReturningValuesFromFunctions.title"
msgstr "从函数返回值"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise.hints.0.text"
msgstr "你应该如何定义这个字符串？"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise.hints.1.text"
msgstr "用单引号，还是用双引号？"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise.hints.2.text"
msgstr "你只需要一个字符串。"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise.hints.3.text"
msgstr "不需要把字符串拼接在一起。"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid "pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise.text"
msgstr ""
"正如你所看到的，Python认为用单引号或双引号定义的相同字符串是一样的。\n"
"\n"
"现在写一个程序，打印出以下来自Python之禅的文本：\n"
"\n"
"    __copyable__\n"
"    Special cases aren't special enough to break the rules.\n"
"\n"
"这个程序应该是一行代码，使用`print()`，不使用变量。"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid "pages.SingleAndDoubleQuotesInStrings.steps.double_quotes.text"
msgstr ""
"所以我们不能在单引号的字符串中随意使用撇号。\n"
"撇号被视为单引号，因此作为字符串定义的*结束引号*，例如`'Alice'`。\n"
"然后剩下的文本`s Diner'`是无效的语法，Python无法理解。\n"
"\n"
"幸运的是，Python允许我们用另一种方式定义字符串，使用双引号`\"`代替：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid "pages.SingleAndDoubleQuotesInStrings.steps.final_text.text"
msgstr ""
"做得好！\n"
"\n"
"在大多数情况下，你可以使用单引号或双引号来定义字符串，随你喜欢。\n"
"但是如果你的字符串包含`'`，那么就用`\"`来定义它，反之亦然。"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.single_double_quotes_equal.text"
msgstr ""
"记住，引号只是人类表示字符串的一部分。\n"
"它们并不作为字符串的实际部分存储。\n"
"在命令行中试试这个：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise.hints.0.text"
msgstr "想简单点！你通常会怎么做？"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise.hints.1.text"
msgstr "如果一个字符串包含一个撇号，我们必须用双引号来定义它。"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise.hints.2.text"
msgstr "如果字符串包含双引号呢？"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid "pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise.text"
msgstr ""
"很棒！\n"
"\n"
"现在准确地打印出以下引号（包括双引号）：\n"
"\n"
"    __copyable__\n"
"    \"Talk is cheap. Show me the code.\" - Linus Torvalds\n"
"\n"
"这个程序应该是一行代码，使用`print()`，不使用变量。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quotes_apostrophe
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.single_quotes_apostrophe.program"
msgstr "print('Alice's Diner')"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#.     # __code0__:
#.     name = 'Alice'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Alice%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.single_quotes_apostrophe.text"
msgstr ""
"到目前为止，我们一直在用单引号定义字符串，例如：\n"
"\n"
"__code0__\n"
"\n"
"如果我们想定义一个包含撇号的字符串，会发生什么呢？试试这个：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid "pages.SingleAndDoubleQuotesInStrings.title"
msgstr "字符串中的单引号和双引号"

#. https://futurecoder.io/course/#StoringCalculationsInVariables
msgid "pages.StoringCalculationsInVariables.steps.final_text.text"
msgstr ""
"与电子表格中公式自动更新不同，像 `sentence` 这样的变量不会记住它是如何计算的，如果基础值 `word` 或 `name` "
"被更改，它也不会改变。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.output_prediction_choices.0"
msgstr ""
"Hello World\n"
"Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.output_prediction_choices.1"
msgstr ""
"Hello World\n"
"Goodbye World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.output_prediction_choices.2"
msgstr ""
"Goodbye World\n"
"Goodbye World"

#. https://futurecoder.io/course/#StoringCalculationsInVariables
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.requirements"
msgstr "运行一个程序，包含前一步的四行代码，后面跟着这里的两行。"

#. https://futurecoder.io/course/#StoringCalculationsInVariables
#.     # __code0__:
#.     word = 'Goodbye'
#.     print(sentence)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Goodbye%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.sentence
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
msgid "pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.text"
msgstr ""
"现在 `sentence` 的值是 `'Hello World'`，可以多次使用。请注意，它会一直保持这个值，直到被直接重新赋值，例如用另一个语句 `sentence = <something>`。例如，将这两行添加到程序的末尾：\n"
"\n"
"__code0__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.0"
msgstr "sentence"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.1"
msgstr "word + ' ' + name"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.2"
msgstr "Hello + ' ' + World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.3"
msgstr "'Hello' + ' ' + 'World'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.4"
msgstr "Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.5"
msgstr "'Hello World'"

#. https://futurecoder.io/course/#StoringCalculationsInVariables
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.text"
msgstr ""
"通常你会使用变量来存储计算的结果。这将有助于构建更复杂的程序。例如，试试这个程序：\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#StoringCalculationsInVariables
msgid "pages.StoringCalculationsInVariables.title"
msgstr "在变量中存储计算结果"

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
#.     # __code0__:
#.     if word.lower() == 'yes':
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27yes%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
msgid "pages.StringMethodsUnderstandingMutation.steps.final_text.text"
msgstr ""
"请注意，`sentence.upper()` 并不会改变原始的 `sentence`。\n"
"\n"
"你也可以在更大的表达式中立即使用 `word.lower()`，例如：\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid ""
"pages.StringMethodsUnderstandingMutation.steps.mutation_string_append.text"
msgstr ""
"这两个方法在字符串上也像在列表上一样有效。\n"
"`index` 返回搜索词 `'the'` 在更长字符串\n"
"`'feed the dog and the cat'` 中的 *起始索引*，即 `5`。\n"
"\n"
"|  0   |  1   |  2   |  3   |  4   | **5** |  6   |  7   |  8   | ...  |\n"
"| :--: | :--: | :--: | :--: | :--: | :---: | :--: | :--: | :--: | :--: |\n"
"|  f   |  e   |  e   |  d   |      | **t** |  h   |  e   |      | ...  |\n"
"\n"
"请注意，在大多数情况下，*就地修改列表* 的方法（`append`、`insert`、`remove`）仅返回 `None`，\n"
"而其他函数/方法则返回一个新的有用值，而不改变原始参数。\n"
"唯一的例外是 `pop` 方法。\n"
"\n"
"直接修改一个值被称为 *变动* (mutation) - 可以被变异的值类型是 *可变的* (mutable)，\n"
"而不能被变异的则是 *不可变的* (immutable)。列表是可变的。\n"
"字符串是不可变的 - 它们没有像 `append` 或甚至下标赋值这样的任何方法。\n"
"自己看看：\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_count_index
msgid ""
"pages.StringMethodsUnderstandingMutation.steps.string_count_index.program"
msgstr ""
"string = 'feed the dog and the cat'\n"
"print(string.count('the'))\n"
"print(string.index('the'))"

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.StringMethodsUnderstandingMutation.steps.string_count_index.text"
msgstr ""
"`in` 在字符串上的工作方式与在列表上相同！命令返回了 `True`，因为 `the` 在 `feed the dog and the cat` 中作为 *子字符串* 出现。\n"
"那么 `count` 和 `index` 呢？\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_in_step
msgid "pages.StringMethodsUnderstandingMutation.steps.string_in_step.program"
msgstr "print('the' in 'feed the dog and the cat')"

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.StringMethodsUnderstandingMutation.steps.string_in_step.text"
msgstr ""
"你已经看到 `len` 和下标在字符串上是如何工作的，字符串有点像字符的列表。\n"
"字符串还支持我们学到的一些新方法，不仅适用于字符，也适用于任何子字符串。\n"
"例如，试试以下内容：\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
#.     # __code1__:
#.     __program_indented__
#.     # __code0__:
#.     word.lower()
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
msgid "pages.StringMethodsUnderstandingMutation.steps.string_lower_upper.text"
msgstr ""
"你根本无法改变一个字符串 - 你只能创建新的字符串并使用它们。\n"
"这意味着单独来看这是一个无用的语句：\n"
"\n"
"__code0__\n"
"\n"
"由 `word` 引用的字符串没有被修改，而是 `word.lower()` 返回了一个新的字符串，但这个字符串立即被丢弃了。\n"
"如果你想改变 `word` 引用的值，你必须给变量赋一个新值：\n"
"\n"
"    __copyable__\n"
"__code1__"

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
msgid "pages.StringMethodsUnderstandingMutation.title"
msgstr "字符串方法与不可变性"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.0.text"
msgstr "`string` 应该在每边加一个空格和 `level` 个感叹号 (`!`)。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.1.text"
msgstr "在你的程序中包含之前的 `surround` 定义，并在 `alert` 中调用它。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.10.text"
msgstr "想想你如何使用 `+=` 来构建字符串。重复更新同一个变量，逐步构建你的结果。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.11.text"
msgstr "也就是说，在你的循环中写 `something = surround(something, '!')`。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.12.text"
msgstr "确保在 `alert` 的最后返回某个值。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.13.text"
msgstr "确保你不要在循环内部 `return`，而是在循环之后。检查你的缩进。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.14.text"
msgstr "确保你不要在 `alert` 的函数体内调用 `alert`。检查你的缩进。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.2.text"
msgstr "使用 `surround` 来处理空格。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.3.text"
msgstr "使用 `surround` 来处理感叹号。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.4.text"
msgstr "你不能把多个感叹号合并成一个字符串，所以要多次调用 `surround`。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.5.text"
msgstr "也就是说，对于每对感叹号调用一次 `surround`。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.6.text"
msgstr "所以多次调用 `surround(..., '!')`。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.7.text"
msgstr "使用循环多次调用它。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.8.text"
msgstr "使用 `range(n)` 让你的循环有 `n` 次迭代。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.9.text"
msgstr "确保你使用 `surround` 的返回值。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid ""
"pages.TestingFunctions.steps.alert_exercise.messages.catch_return_inside_loop.text"
msgstr ""
"在 `alert` 函数中，你把 `return` 语句放在了错误的位置！\n"
"注意你在 `alert` 中的缩进。你可能过早地用 `return` 结束了一个循环。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.messages.used_format.text"
msgstr ""
"你不能在 `alert` 中使用字符串连接/格式化/插值/乘法或 f-strings。\n"
"你必须调用 `surround` 来解决这个问题。"

#. https://futurecoder.io/course/#TestingFunctions
#.     # __code0__:
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
#.     # __code1__:
#.     def alert(string, level):
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%21%21%21%21+DANGER+%21%21%21%21%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%21%21+Warning+%21%21%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22DANGER%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Warning%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.alert
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.level
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.string
msgid "pages.TestingFunctions.steps.alert_exercise.text"
msgstr ""
"完美！现在写一个函数 `alert`，使其通过这些测试：\n"
"\n"
"__code0__\n"
"\n"
"`alert` 的主体不允许包含 `+`。请使用 `surround`。你的函数应该像这样开始：\n"
"\n"
"__code1__"

#. https://futurecoder.io/course/#TestingFunctions
msgid "pages.TestingFunctions.steps.complete_quadruple_tests.requirements"
msgstr ""
"输入上面的程序。\n"
"然后通过为每个 `assert_equal` 调用添加一个参数来更改最后两行，以使测试通过。\n"
"不要触碰函数定义。"

#. https://futurecoder.io/course/#TestingFunctions
#.     # __code0__:
#.     def double(x):
#.         return x * 2
#.     def quadruple(x):
#.         return double(double(x))
#.     assert_equal(quadruple(2))
#.     assert_equal(quadruple(5))
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.double
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quadruple
msgid "pages.TestingFunctions.steps.complete_quadruple_tests.text"
msgstr ""
"很好！我们的测试失败了！当然，这通常不是好事，但它告诉我们测试正在\n"
"发挥作用。它们将确保我们实现的 `double` 是正确的。\n"
"\n"
"让我们练习这个新概念。下面是之前的函数 `quadruple` 和一些不完整的测试。\n"
"通过为 `assert_equal` 添加缺失的参数来修复程序。\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#TestingFunctions
msgid "pages.TestingFunctions.steps.final_text.text"
msgstr "干得好！这些工具在接下来的章节中会非常有用。"

#. https://futurecoder.io/course/#TestingFunctions
#.     # __code0__:
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22OK%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.actual
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.expected
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%22Error%21+%7Brepr%28actual%29%7D+%21%3D+%7Brepr%28expected%29%7D%22
msgid "pages.TestingFunctions.steps.introducing_assert_equal.text"
msgstr ""
"编写程序的重要部分是测试它们是否正确工作。你可以手动进行测试，例如通过检查\n"
"`print(double(5))` 是否打印 `10`，但这种方式很快就会变得乏味。\n"
"实际上编写测试你程序的程序是很有帮助的。这被称为 *自动化测试*，\n"
"这些程序被称为 *测试*。\n"
"\n"
"这里有一个简单的函数 `assert_equal` 来帮助我们编写测试：\n"
"\n"
"__code0__\n"
"\n"
"\n"
"(那个函数 `repr` 是什么？试试 `print(f\"{'abc'} {repr('abc')}\")` 来看看一个区别，但不要太担心。)\n"
"\n"
"这不是 Python 的标准部分（虽然类似的函数是），但我们已经将它添加到你的编码环境中，\n"
"所以你可以随时使用它。这里有一个例子供你尝试：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#TestingFunctions
msgid "pages.TestingFunctions.steps.make_tests_fail.requirements"
msgstr "运行上一步的程序，但将 `x * 2` 替换为 `x * 3`。保持其余部分不变。"

#. https://futurecoder.io/course/#TestingFunctions
msgid "pages.TestingFunctions.steps.make_tests_fail.text"
msgstr ""
"OK 表示测试通过。我们的 `double` 函数似乎工作正常。将其更改为返回\n"
"`x * 3`，然后看看会发生什么。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
msgid "pages.TestingFunctions.steps.surround_exercise.hints.0.text"
msgstr "参数 `sides` 应该在 `string` 前后添加。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
msgid "pages.TestingFunctions.steps.surround_exercise.hints.1.text"
msgstr "使用字符串连接来做到这一点。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
msgid "pages.TestingFunctions.steps.surround_exercise.hints.2.text"
msgstr "确保主体有正确的缩进。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
msgid "pages.TestingFunctions.steps.surround_exercise.hints.3.text"
msgstr "确保在最后返回某个值。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
msgid "pages.TestingFunctions.steps.surround_exercise.hints.4.text"
msgstr "确保你不要在 `surround` 的函数体内调用 `surround`。检查你的缩进。"

#. https://futurecoder.io/course/#TestingFunctions
#.     # __code0__:
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
#.     # __code1__:
#.     def surround(string, sides):
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%2B%2Bmore%2B%2B%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%3Dthe+same%3D%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22more%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22the+same%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.sides
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.string
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.surround
msgid "pages.TestingFunctions.steps.surround_exercise.text"
msgstr ""
"测试的另一个有用之处在于，任何人都可以阅读它们并看到清晰、明确的示例\n"
"说明函数的作用。当一个函数复杂且难以用英语描述时，这非常有帮助。\n"
"\n"
"例如，这里有一些测试：\n"
"\n"
"__code0__\n"
"\n"
"我不需要解释 `surround` 的作用，你可以自己看到。\n"
"\n"
"写一个函数 `surround`，使其通过这些测试，并像这样开始：\n"
"\n"
"__code1__"

#. https://futurecoder.io/course/#TestingFunctions
msgid "pages.TestingFunctions.title"
msgstr "测试函数"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.equality_vs_assignment
msgid "pages.TheEqualityOperator.steps.equality_vs_assignment.program"
msgstr "print(1 + 2 = 3)"

#. https://futurecoder.io/course/#TheEqualityOperator
msgid "pages.TheEqualityOperator.steps.equality_vs_assignment.requirements"
msgstr "运行上一步的程序，但将任何 `==` 替换为 `=`。"

#. https://futurecoder.io/course/#TheEqualityOperator
msgid "pages.TheEqualityOperator.steps.equality_vs_assignment.text"
msgstr ""
"正如你所看到的，如果值相等，等式表达式的结果为 `True`，\n"
"否则为 `False`。\n"
"\n"
"注意等号操作符 `==` 和单个 `=` 之间的区别，它们有不同的含义，\n"
"特别是在你到目前为止看到的赋值语句中。如果你尝试\n"
"从之前的程序中移除一个 `=` 会发生什么？"

#. https://futurecoder.io/course/#TheEqualityOperator
msgid "pages.TheEqualityOperator.steps.final_text.text"
msgstr "做得好！"

#. https://futurecoder.io/course/#TheEqualityOperator
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.TheEqualityOperator.steps.if_equals_replacing_characters.text"
msgstr ""
"让我们在 `if` 语句中使用 `==`。在这个程序中，只有当 `c` 是字符 `'s'` 时，`if` 的主体才会运行。你自己看看吧。\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#TheEqualityOperator
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters_exercise
msgid ""
"pages.TheEqualityOperator.steps.if_equals_replacing_characters_exercise.hints.0.text"
msgstr "你只需要添加几行与现有代码非常相似的代码。"

#. https://futurecoder.io/course/#TheEqualityOperator
msgid ""
"pages.TheEqualityOperator.steps.if_equals_replacing_characters_exercise.text"
msgstr "现在扩展程序，使其还将 `e` 替换为 `3`，将 `a` 替换为 `@`。"

#. https://futurecoder.io/course/#TheEqualityOperator
msgid "pages.TheEqualityOperator.steps.introducing_equality.text"
msgstr ""
"有几种方法可以获得布尔值而不直接赋值，\n"
"这使你能够构建非常有用的 `if` 语句。特别是有许多 *比较操作符* 用于比较两个表达式的值。\n"
"最常见的是等号操作符，它检查两个值是否相等。\n"
"它用两个等号表示： `==`。试着运行这个：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#TheEqualityOperator
msgid "pages.TheEqualityOperator.title"
msgstr "等号操作符"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
msgid "pages.TheFullTicTacToeGame.steps.final_text.text"
msgstr ""
"### ***祝贺你!!!***\n"
"\n"
"你做到了！"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.0.text"
msgstr ""
"你应该在某处使用所有的函数 `winner`、`format_board`（不包括在 `play_move` "
"中的使用）、`play_move`、`make_board`、`print_winner` 和 `print_draw`。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.1.text"
msgstr "你只需要在代码中提到每个函数一次，尽管其中一些函数在程序运行时会被多次调用。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.10.text"
msgstr "无论哪个函数被调用，它必须被调用一次且仅一次。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.11.text"
msgstr "确保你不多次调用一个函数的一个简单方法是将它放在任何循环之外调用。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.12.text"
msgstr "我们已经学习了两种让循环停止的方法。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.13.text"
msgstr "一种方法是 `break`，它专门结束一个循环，不再继续。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.14.text"
msgstr "第二种方法不仅结束循环，还结束整个函数调用。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.15.text"
msgstr "第二种方法是 `return`。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.16.text"
msgstr ""
"不要在示例代码中成对地进行移动，比如 `play_move(board, player1)` 和 `play_move(board, "
"player2)`。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.17.text"
msgstr "相反，每次循环迭代应该只进行一次移动。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.18.text"
msgstr "你需要一个变量来跟踪轮到哪个玩家。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.19.text"
msgstr "每次循环迭代时应该切换玩家。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.2.text"
msgstr "你需要一个 for 循环来重复进行移动。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.20.text"
msgstr "一个 `if` 语句是一个很好的方法来做到这一点。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.21.text"
msgstr "特别是与 `else` 结合使用时。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.22.text"
msgstr "确保 `player1` 先进行第一次移动。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.23.text"
msgstr "只有在用 `if` 语句检查 `winner` 后才调用 `print_winner`。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.24.text"
msgstr "你需要在循环内检查赢家，因为你不知道哪个玩家可能会获胜。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.25.text"
msgstr "一旦你调用了 `print_winner`，你可以使用 `return` 来结束函数。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.26.text"
msgstr "仅仅 `return` 就可以，`play_game` 不需要返回一个值。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.27.text"
msgstr "在检查赢家后，不要使用 `else` 来调用 `print_draw`，如果没有赢家的话。仅仅因为没有人获胜并不意味着已经平局。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.28.text"
msgstr "`print_draw` 只有在所有移动都已进行且仍然没有赢家时才应被调用。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.29.text"
msgstr "所以它应该在循环之后调用，而不是在循环内。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.3.text"
msgstr "你不需要检查棋盘是否已填满，因为你总是可以计算填满棋盘需要多少次移动。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.30.text"
msgstr "检查缩进以确保 `print_draw` 不在 for 循环的主体内。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.4.text"
msgstr "所以你可以使用一个将运行固定次数的循环，并在循环内检查是否需要提前结束循环。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.5.text"
msgstr "在 3x3 的棋盘上最多可以进行多少次移动？4x4 呢？"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.6.text"
msgstr "使用 `range` 的循环是以固定次数迭代的简单方法。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.7.text"
msgstr "所以你可以使用 `for _ in range(N):` 至多进行 `N` 次移动。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.8.text"
msgstr "一旦有赢家，你需要结束循环和游戏。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.9.text"
msgstr "应该调用 `print_winner` 或 `print_draw`，而不是两者都调用。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#.     # __code0__:
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22It%27s+a+draw%21%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board_size
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.col
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.column_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27%5Cn++%7B%22%2B%22.join%28%22-%22+%2A+size%29%7D%5Cn%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27%7Bi+%2B+1%7D+%7B%22%7C%22.join%28row%29%7D%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27%7Bplayer%7D+to+play%3A%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27%7Bplayer%7D+wins%21%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27++%7B%22+%22.join%28str%28i+%2B+1%29+for+i+in+range%28size%29%29%7D%5Cn%7Bline.join%28rows%29%7D%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.line
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.main_diagonal_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.make_board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.play_game
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.play_move
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.player
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.player1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.player2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_draw
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.rows
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.size
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.winning_line
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.text"
msgstr ""
"是时候把所有东西放在一起了！下面是一些开始的代码。\n"
"\n"
"它包括我们在前面的页面中定义的各种函数的实现，用于解决问题的部分\n"
"，使用一些你还没有学过的技巧来使它们更简短。不要更改它们。\n"
"\n"
"你的任务是正确实现 `play_game`。当前的实现展示了游戏开始时应该发生的事情，但显然是不完整的。\n"
"解决方案应该适用于任何棋盘大小，并继续进行游戏直到结束。\n"
"`play_game` 最后应该做的是，如果 `winner(board)` 为真，则调用 `print_winner(player)`\n"
"，或者如果棋盘填满且没有赢家，则调用 `print_draw()`。\n"
"\n"
"你可以假设用户只会输入有效的输入，\n"
"即从 1 到 `board_size` 的数字，以选择一个尚未被占用的棋盘单元。\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
msgid "pages.TheFullTicTacToeGame.title"
msgstr "完整的井字棋游戏"

#. https://futurecoder.io/course/#Types
msgid "pages.Types.steps.check_type_manually.text"
msgstr ""
"Python 首先报告 `type('Hello World')` 是 `<class 'str'>`。现在不用担心 `class`。\n"
"`str` 是 *字符串* 的缩写。\n"
"\n"
"然后 `True` 是 `bool`（*布尔值* 的缩写），而 `[1, 2, 3]` 的类型是 `list`。\n"
"\n"
"注意，数字有两种类型：\n"
"\n"
"- `int`，是 '整数' 的缩写，用于表示整数，也就是说没有分数或小数点。\n"
"- `float`，是 '浮点数' 的缩写，用于表示带小数点的数字，可能还有分数部分。\n"
"\n"
"在大多数情况下，你不需要担心数字的不同类型，因为在做数学运算时可以混合使用这两种类型。\n"
"\n"
"类型是可以以各种方式使用的值，就像其他值一样。\n"
"例如，试试在命令行中输入这个：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#Types
msgid "pages.Types.steps.common_type_errors.text"
msgstr ""
"如果你在 `str` 和 `int` 之间使用运算符，会发生什么？试试在命令行中输入：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#Types
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Types.steps.different_types_look_same.text"
msgstr ""
"不同类型的值通常彼此非常不同，但在打印时它们可能看起来相同，\n"
"这可能会让人困惑。试试这个：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"(你可以使用 `print(repr(123))` 和 `print(repr('123'))` 来区分它们。`repr` 是什么？去谷歌一下吧！)"

#. https://futurecoder.io/course/#Types
msgid "pages.Types.steps.final_text.text"
msgstr ""
"太棒了！\n"
"\n"
"顺便说一下，当你需要连接字符串和数字时，记得你也可以\n"
"使用 f-strings。它们通常看起来更好。\n"
"\n"
"你已经学习了 Python 中的类型，以及如何通过转换类型来避免常见错误。\n"
"继续完成项目的其余部分吧！"

#. https://futurecoder.io/course/#Types
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Types.steps.five_different_types.text"
msgstr ""
"到目前为止，我们已经看到了各种数据类型：字符串、列表、数字和布尔值。\n"
"这些被称为 *类型*。每个值都有一个类型，它会影响它的行为\n"
"并可以通过 `type` 函数来揭示：\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid ""
"pages.Types.steps.fixing_type_errors_with_conversion.disallowed.0.label"
msgstr "f-strings"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.0.text"
msgstr "这段代码在哪些地方出错了？"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.1.text"
msgstr "有些值需要转换为不同的类型。"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.2.text"
msgstr "具体来说，有一个 `str` 需要转换为 `int`。"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.3.text"
msgstr "还有一个 `int` 需要转换为 `str`。"

#. https://futurecoder.io/course/#Types
#.     # __code0__:
#.     number = '3'
#.     for i in range(number):
#.         print('Starting... ' + i + 1)
#.     print('Go!')
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Go%21%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Starting...+%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.number
msgid "pages.Types.steps.fixing_type_errors_with_conversion.text"
msgstr ""
"在 `range` 中使用字符串而不是整数，比如 `range('5')`，\n"
"或者在列表下标中使用，比如 `list['3']` 也会导致错误。\n"
"\n"
"大多数这些问题可以通过使用 `int` 函数将字符串转换为整数来解决：\n"
"`int('5')` 将返回整数 `5`。\n"
"类似地，可以使用 `str` 函数将整数转换为字符串：\n"
"`str(5)` 将返回字符串 `'5'`。\n"
"\n"
"利用这些新知识，修复这个损坏的程序：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"正确的程序应该打印：\n"
"\n"
"    Starting... 1\n"
"    Starting... 2\n"
"    Starting... 3\n"
"    Go!\n"
"\n"
"你的解决方案应该适用于变量 `number` 的任何值。"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.0.text"
msgstr "你可以开始使用之前解决方案中的思路来实现 `format_board`。强烈建议使用 `join`！"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.1.text"
msgstr "第一行必须与其余部分分开处理。"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.2.text"
msgstr "记住 `range` 产生的数字是这样的：0, 1, 2, ..."

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.3.text"
msgstr "我们希望第一行的数字是这样的：1, 2, 3..."

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.4.text"
msgstr "每个数字在添加到第一行之前必须转换为字符串！"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.5.text"
msgstr "对于棋盘的行本身，做类似的事情。"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.6.text"
msgstr "从仅包含你上面构建的第一行的列表开始。"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.7.text"
msgstr "将每一行的字符串添加到列表中，然后用换行符连接列表。"

#. https://futurecoder.io/course/#Types
#.     # __code0__:
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         ' 123\n1XOX\n2O  \n3 XO'
#.     )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27+123%5Cn1XOX%5Cn2O++%5Cn3+XO%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
msgid "pages.Types.steps.format_board_with_numbers.text"
msgstr ""
"编写一个改进版的 `format_board`，使其具有行和列数字，如下所示：\n"
"\n"
"     123\n"
"    1XOX\n"
"    2 OO\n"
"    3 X\n"
"\n"
"它应该适用于任何单数字大小的棋盘。以下是一个测试案例：\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#Types
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Types.steps.less_than_has_two_meanings.text"
msgstr ""
"对于两个整数，`+` 表示加法，而对于两个字符串，它表示字符串连接。\n"
"Python 会根据输入的类型自动判断 `+` 的含义。\n"
"类似地，`<` 在两个字符串和两个整数之间的作用不同：\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#Types
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Types.steps.less_than_sorting_strings.text"
msgstr ""
"所以 `<` 在两个整数之间像通常的 '小于' 一样工作，因为 `13` 小于 `120`，\n"
"但在两个字符串之间，它像字典排序一样工作：`13` 在字母顺序上排在 `120` 之后\n"
"因为 `3` 在 `2` 之后。\n"
"\n"
"看看这在排序列表时有什么不同：\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#Types
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Types.steps.plus_has_two_meanings.text"
msgstr ""
"不同类型有不同的方法，并支持不同的运算符。\n"
"相同的方法或运算符也可以有不同的含义。\n"
"例如，看看 `+` 对于 `str` 和 `int` 的不同含义：\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#Types
msgid "pages.Types.title"
msgstr "类型"

#. https://futurecoder.io/course/#UnderstandingProgramsWithPythonTutor
msgid "pages.UnderstandingProgramsWithPythonTutor.steps.final_text.text"
msgstr ""
"请注意，代码会分别运行两次：一次在这里，一次在 pythontutor.com 上。\n"
"根据你的程序，这两次运行可能会产生不同的结果。"

#. https://futurecoder.io/course/#UnderstandingProgramsWithPythonTutor
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid ""
"pages.UnderstandingProgramsWithPythonTutor.steps.run_with_python_tutor.text"
msgstr ""
"现在是时候学习另一个工具来探索程序了。\n"
"将下面的代码复制到编辑器中，然后点击新的“Python Tutor”按钮。\n"
"这个按钮会打开一个新标签页，展示来自 [pythontutor.com](http://pythontutor.com) 的可视化效果。\n"
"在那里，你可以通过“上一个”或“下一个”按钮逐步浏览程序，或者拖动\n"
"滑块向左或向右。你还可以在右侧查看变量的值。\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#UnderstandingProgramsWithPythonTutor
msgid "pages.UnderstandingProgramsWithPythonTutor.title"
msgstr "使用 Python Tutor 理解程序"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
msgid "pages.UnderstandingProgramsWithSnoop.steps.final_text.text"
msgstr "干得好！你正在处理越来越复杂的程序。"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_first_character.hints.0.text"
msgstr "代码应该几乎完全相同，只需做几个小改动。"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_first_character.hints.1.text"
msgstr "确保 `if include:` 里面的代码在循环开始时运行，也就是在第一次迭代时。"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_first_character.hints.2.text"
msgstr "这意味着此时 `include` 应该是 `True`。"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_first_character.hints.3.text"
msgstr "确保 `if include:` 里面的代码在第一次迭代后 *不* 再运行。"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_first_character.hints.4.text"
msgstr "这意味着在第一次迭代后 `include` 应该是 `False`。"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
msgid "pages.UnderstandingProgramsWithSnoop.steps.print_first_character.text"
msgstr ""
"哇！滚动到终端的顶部，让我们一起看看 `snoop` 正在向你展示什么。\n"
"一开始是非常简单的：\n"
"\n"
"        1 | sentence = 'Hello World'\n"
"        3 | include = False\n"
"        4 | new_sentence = ''\n"
"        5 | for char in sentence:\n"
"     ...... char = 'H'\n"
"\n"
"前几行只是向你展示计算机运行的程序行。\n"
"左边是编辑器中看到的行号。\n"
"\n"
"运行 `for char in sentence:` 会给变量 `char` 赋值，所以 `snoop` 会显示这个值。\n"
"以 `......` 开头的行表示一个新变量或现有变量值的变化。\n"
"当这些行是多余的时，它们不会被显示，这就是为什么 `snoop` 的输出不会像这样开始：\n"
"\n"
"        1 | sentence = 'Hello World'\n"
"     ...... sentence = 'Hello World'\n"
"        3 | include = False\n"
"     ...... include = False\n"
"        4 | new_sentence = ''\n"
"     ...... new_sentence = ''\n"
"        5 | for char in sentence:\n"
"     ...... char = 'H'\n"
"\n"
"接下来的两行是：\n"
"\n"
"        6 |     if include:\n"
"        8 |     include = True\n"
"\n"
"这里重要的是没有显示的内容：因为 `include` 是 `False`，所以第 7 行 (`new_sentence += char`) 被跳过。但随后 `include` 被设置为 `True`，所以下一次循环的结果就不同了：\n"
"\n"
"        5 | for char in sentence:\n"
"     ...... char = 'e'\n"
"        6 |     if include:\n"
"        7 |         new_sentence += char\n"
"     .............. new_sentence = 'e'\n"
"\n"
"`new_sentence += char` 第一次运行，变量 `new_sentence` 得到一个新值。\n"
"\n"
"现在修改程序，做相反的事情：只打印第一个字符，省略其余部分。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_tail.output_prediction_choices.0"
msgstr "Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_tail.output_prediction_choices.1"
msgstr "ello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_tail.output_prediction_choices.2"
msgstr "Hello Worl"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_tail.output_prediction_choices.3"
msgstr "H"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_tail.output_prediction_choices.4"
msgstr "d"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.UnderstandingProgramsWithSnoop.steps.print_tail.text"
msgstr ""
"运行这个程序：\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop.requirements"
msgstr "运行上一步的相同程序，但使用 `snoop` 按钮而不是 '运行' 按钮。如果你可能修改过程序，请再次复制程序。"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
msgid "pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop.text"
msgstr ""
"程序开始变得复杂了！\n"
"是时候引入一个新工具来帮助你理解程序了。点击 `snoop` 按钮来运行相同的程序，同时显示发生了什么。"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
msgid "pages.UnderstandingProgramsWithSnoop.title"
msgstr "使用 `snoop` 理解程序"

#. https://futurecoder.io/course/#UsingBreak
#.     # __code0__:
#.     found = False
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.     print(found)
#.     # __code1__:
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.             break
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.found
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.thing
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.thing_to_find
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.things
msgid "pages.UsingBreak.steps.final_text.text"
msgstr ""
"太好了！\n"
"\n"
"一个典型的解决方案看起来像这样：\n"
"\n"
"__code0__\n"
"\n"
"你的解决方案可能类似。这样很好，但有点低效。\n"
"因为即使在列表的开头找到元素，它也会遍历整个列表。\n"
"你可以使用 `break` 语句来停止任何循环，如下所示：\n"
"\n"
"__code1__\n"
"\n"
"这同样是正确的，但一旦找到元素，就会跳过不必要的迭代和检查。\n"
"你可以使用 `snoop` 来查看差异。"

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.0.text"
msgstr "你需要一个循环。"

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.1.text"
msgstr "你需要一个 `if` 语句。"

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.2.text"
msgstr "你需要一个比较运算符。"

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.3.text"
msgstr "具体来说是 `==`。"

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.4.text"
msgstr "你需要一个布尔变量，最后打印出来。"

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.5.text"
msgstr "如果你在列表中找到元素，你应该把那个变量设置为 `True`。"

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.6.text"
msgstr "一旦你找到了元素，就不能再“找不到”它了。"

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.7.text"
msgstr "这意味着一旦你把变量设置为 `True`，之后就不应该再设置为其他任何值。"

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.8.text"
msgstr "不要使用 `else`。"

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.9.text"
msgstr "在循环内部没有理由将变量设置为 `False`。"

#. https://futurecoder.io/course/#UsingBreak
msgid "pages.UsingBreak.steps.list_contains_exercise.text"
msgstr ""
"练习：编写一个程序，接受一个列表和一个值，并检查\n"
"列表是否包含该值。例如，给定：\n"
"\n"
"    __no_auto_translate__\n"
"    things = ['This', 'is', 'a', 'list']\n"
"    thing_to_find = 'is'\n"
"\n"
"它应该打印 `True`，但对于\n"
"\n"
"    __no_auto_translate__\n"
"    thing_to_find = 'other'\n"
"\n"
"它应该打印 `False`。"

#. https://futurecoder.io/course/#UsingBreak
msgid "pages.UsingBreak.title"
msgstr "使用 `break` 提前结束循环"

#. https://futurecoder.io/course/#UsingDictionaries
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.UsingDictionaries.steps.dna_part1.text"
msgstr ""
"不错！但你可能注意到它看起来有点别扭。为什么我们要在 `cart` 和 `quantities` 中都指定 `'dog'` 和 `'box'` 呢？\n"
"在下一页，我们将学习如何直接遍历字典的键，\n"
"这样我们就可以去掉 `cart` 参数。\n"
"\n"
"但首先，让我们再多练习一下我们学到的内容。\n"
"\n"
"[在课程早些时候](#IntroducingElif)，我们学习了如何将一条 DNA 链\n"
"转换为一条具有匹配核苷酸的新链。\n"
"这是使用函数的代码版本。它用不同的字母替换输入 `string` 中的每个字母。\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.0.text"
msgstr "这仍然与之前的练习非常相似，只是使用了字符串而不是数字。"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.1.text"
msgstr "你只需要考虑 `d` 的键和值。"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.2.text"
msgstr "你需要获取正确的值来构建一个字符串以返回。"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.3.text"
msgstr "你基本上可以用一行代码替换整个 `if/elif` 链。"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.4.text"
msgstr "那一行只需要使用 `d` 来获取正确的值。"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.5.text"
msgstr "记住，`d` 的键是 `string` 中的字符。"

#. https://futurecoder.io/course/#UsingDictionaries
#.     # __code0__:
#.     def substitute(string, d):
#.         ...
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G':
#. 'C'}), expected)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27AGTAGCGTCCTTAGTTACAGGATGGCTTAT%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27TCATCGCAGGAATCAATGTCCTACCGAATA%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.expected
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.original
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.string
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.substitute
msgid "pages.UsingDictionaries.steps.dna_part2.text"
msgstr ""
"现在我们可以使用字典使这段代码更简洁、更通用，以便可以用于其他目的。\n"
"\n"
"你的任务是向 `substitute` 函数添加另一个参数：一个名为 `d` 的字典。\n"
"`d` 的键表示在第一个参数 `string` 中应该被 `d` 的对应值替换的字符。例如，`'A': 'T'`\n"
"意味着 `'A'` 应该被 `'T'` 替换：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"这个版本的 `substitute` 应该适用于所有 `string` 中的字符都是 `d` 中的键的参数。\n"
"不再需要 `if` 语句了！"

#. https://futurecoder.io/course/#UsingDictionaries
msgid "pages.UsingDictionaries.steps.final_text.text"
msgstr ""
"很好！这是一个示例，说明这个函数如何用于加密和解密秘密消息：\n"
"\n"
"    __copyable__\n"
"    __no_auto_translate__\n"
"    def substitute(string, d):\n"
"        result = \"\"\n"
"        for letter in string:\n"
"            result += d[letter]\n"
"        return result\n"
"\n"
"    plaintext = 'helloworld'\n"
"    encrypted = 'qpeefifmez'\n"
"    letters = {'h': 'q', 'e': 'p', 'l': 'e', 'o': 'f', 'w': 'i', 'r': 'm', 'd': 'z'}\n"
"    reverse = {'q': 'h', 'p': 'e', 'e': 'l', 'f': 'o', 'i': 'w', 'm': 'r', 'z': 'd'}\n"
"    assert_equal(substitute(plaintext, letters), encrypted)\n"
"    assert_equal(substitute(encrypted, reverse), plaintext)\n"
"\n"
"同一个函数可以在两个方向上工作，我们只需要传递不同的字典。\n"
"\n"
"这两个字典几乎是相同的，我们只是交换了每对中的键和值。\n"
"所以为了加密，我们将 `e` 替换为 `p`，而为了解密，我们将 `p` 改回 `e`。\n"
"\n"
"注意 `'e'` 在 `letters` 中既是一个键也是一个值。\n"
"\n"
"查找 `letters['e']` 意味着我们在询问 `'e'` 作为 *键* 的情况，所以它给出 `'p'`。\n"
"记住，我们不能使用 `letters` 来询问与 `'e'` 作为 *值* 相关联的键。\n"
"但在这种情况下，我们可以使用另一个字典来做到这一点：`reverse['e']` 给出 `'l'`，\n"
"而 `letters['l']` 再次给出 `'e'`。\n"
"\n"
"很快你将编写一个函数来自动创建像 `reverse` 这样的字典，\n"
"即 `reverse = swap_keys_values(letters)`。"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
msgid "pages.UsingDictionaries.steps.shopping_cart1.hints.0.text"
msgstr "记住 `prices` 是一个字典。"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
msgid "pages.UsingDictionaries.steps.shopping_cart1.hints.1.text"
msgstr "要访问字典中的值，你需要一个键。"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
msgid "pages.UsingDictionaries.steps.shopping_cart1.hints.2.text"
msgstr "`prices` 的键是 `cart` 中的项目。"

#. https://futurecoder.io/course/#UsingDictionaries
#.     # __code2__:
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#.     # __code0__:
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#.     # __code1__:
#.     prices = {'apple': 2, 'apple': 3}
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27box%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27cat%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27dog%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.cart
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.item
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.price
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.prices
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.result
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.total_cost
msgid "pages.UsingDictionaries.steps.shopping_cart1.text"
msgstr ""
"让我们看看字典在现实生活中的应用。想象一下你正在构建一个在线购物网站。\n"
"你将所有商品的价格保存在一个字典中：\n"
"\n"
"__code0__\n"
"\n"
"在这里，你可以看到查找字典中值的一个原因可能会出现问题。\n"
"`prices[100]` 会是什么？`'dog'`？`'cat'`？`['dog', 'cat']`？\n"
"同样的值可以在字典中重复任意次数。\n"
"另一方面，键必须是唯一的。想象一下，如果你的价格是这样开始的：\n"
"\n"
"__code1__\n"
"\n"
"一个苹果多少钱？我们知道是 `prices['apple']`，但那是 `2` 还是 `3`？\n"
"显然应该只有一个价格，所以不允许重复键。\n"
"\n"
"无论如何，这是一个正常的商店，东西有一个价格。\n"
"这个正常的商店有正常的顾客，他们的购物清单是 `['apple', 'box', 'cat']`。\n"
"尽管你的顾客口袋里有计算器，他们仍然希望你自己加总所有价格\n"
"并告诉他们这将花费多少，因为这就是正常商店所做的。\n"
"\n"
"所以让我们写一个函数来做到这一点。完成下面的函数，特别是 `price = ...` 这一行。\n"
"\n"
"    __copyable__\n"
"__code2__"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
msgid "pages.UsingDictionaries.steps.shopping_cart4.hints.0.text"
msgstr "记住 `prices` 和 `quantities` 的键是相同的。"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
msgid "pages.UsingDictionaries.steps.shopping_cart4.hints.1.text"
msgstr "这与之前的练习非常相似，我们只是在练习。"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
msgid "pages.UsingDictionaries.steps.shopping_cart4.hints.2.text"
msgstr "`price` 应该是 `prices` 中的一个值，`quantity` 也是类似的。"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
msgid "pages.UsingDictionaries.steps.shopping_cart4.hints.3.text"
msgstr "应该使用哪个键来获取每个值？"

#. https://futurecoder.io/course/#UsingDictionaries
#.     # __code0__:
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27box%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27cat%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27dog%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.cart
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.item
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.price
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.prices
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quantities
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quantity
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.result
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.total_cost
msgid "pages.UsingDictionaries.steps.shopping_cart4.text"
msgstr ""
"完美！你发布了你的网站，开始梦想自己会变得多富有。\n"
"\n"
"但很快你收到了一位顾客的投诉，他想买 500 万只狗……还有 2 个箱子来放它们。\n"
"\n"
"你的网站允许多次购买相同的商品，例如 `total_cost(['box', 'box'], {...})` 可以工作，\n"
"但他们必须逐个添加每个项目，出于某种原因，这位顾客不想点击\n"
"'添加到购物车' 500 万次。人们真是太懒了！\n"
"\n"
"这是你需要修复的新代码：\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"我们向 `total_cost` 添加了另一个参数，称为 `quantities`。\n"
"现在 `cart` 仍然是一个字符串列表，但没有任何重复。\n"
"`quantities` 是一个字典，其中的键是 `cart` 中的项目，而对应的值是顾客想要购买的该项目的数量。"

#. https://futurecoder.io/course/#UsingDictionaries
msgid "pages.UsingDictionaries.title"
msgstr "在实践中使用字典"

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.steps.final_text.text"
msgstr ""
"太好了！再也不用引号了！我们稍后会详细讲解这段代码发生了什么。现在只需知道 `print(<something>)` 会在终端显示 "
"`<something>`。特别是，它会显示我们通常关心的字符串的实际内容，而不是适合代码的字符串表示形式，例如带引号的内容。这里的 `print` "
"与在纸上印刷无关。"

#. https://futurecoder.io/course/#UsingVariables
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.UsingVariables.steps.first_print.text"
msgstr ""
"字符串周围的引号真让人烦。试试运行这个：\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.steps.goodbye_plus_name.text"
msgstr "现在通过再次运行 `__program__` 来观察这个变化的效果。"

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.steps.hello_plus_name.text"
msgstr ""
"你可以像使用字面量一样在计算中使用变量。例如，试试：\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#UsingVariables
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
msgid ""
"pages.UsingVariables.steps.name_assign.messages.assigned_something_else.text"
msgstr "在 `=` 前面放上 `your_name` 来创建一个名为 `your_name` 的变量。"

#. https://futurecoder.io/course/#UsingVariables
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
msgid "pages.UsingVariables.steps.name_assign.messages.empty_string.text"
msgstr "在这个练习中，选择一个非空字符串。"

#. https://futurecoder.io/course/#UsingVariables
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
msgid ""
"pages.UsingVariables.steps.name_assign.messages.name_equals_something_else.text"
msgstr "你已经把 `your_name = ` 部分写对了，现在在 `=` 的右边放一个字符串（使用引号）。"

#. https://futurecoder.io/course/#UsingVariables
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
msgid "pages.UsingVariables.steps.name_assign.messages.starts_with_space.text"
msgstr "在这个练习中，选择一个不以空格开头的名字。"

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.steps.name_assign.requirements"
msgstr "运行类似于 `word = 'Hello'` 的代码，但将 `word` 替换为 `your_name`。"

#. https://futurecoder.io/course/#UsingVariables
#.     # __code0__:
#.     word = 'Hello'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Hello%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
msgid "pages.UsingVariables.steps.name_assign.text"
msgstr ""
"之前我们用这段代码创建了一个名为 `word` 的变量，值为 `'Hello'`：\n"
"\n"
"__code0__\n"
"\n"
"现在创建一个名为 `your_name` 的变量，其值是另一个字符串。\n"
"\n"
"(在 `your_name` 中的字符 `_` 被称为 *下划线*。当你想要一个包含多个单词的变量名时，可以用它来分隔单词。大多数键盘上可以通过按 Shift 和连字符/破折号/减号 (`-`) 输入。)"

#. https://futurecoder.io/course/#UsingVariables
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.UsingVariables.steps.word_assign_goodbye.text"
msgstr ""
"完美！\n"
"\n"
"变量的值也可以随着时间改变。现在 `word` 的值是 `'Hello'`。你可以用与第一次设置相同的方式更改它的值。运行这个：\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#UsingVariables
msgid ""
"pages.UsingVariables.steps.word_plus_name.special_messages.bad_word.text"
msgstr "哎呀，你需要先设置 `word = 'Hello'`，然后我们才能继续。"

#. https://futurecoder.io/course/#UsingVariables
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.UsingVariables.steps.word_plus_name.text"
msgstr ""
"或者你可以直接把变量加在一起。试试：\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#UsingVariables
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name_with_space
msgid "pages.UsingVariables.steps.word_plus_name_with_space.hints.0.text"
msgstr "你需要使用 `+` 两次，就像 1+2+3 一样。"

#. https://futurecoder.io/course/#UsingVariables
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name_with_space
msgid "pages.UsingVariables.steps.word_plus_name_with_space.hints.1.text"
msgstr "你的答案应该包含变量（没有引号）和字符串字面量（有引号）的混合。"

#. https://futurecoder.io/course/#UsingVariables
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name_with_space
msgid "pages.UsingVariables.steps.word_plus_name_with_space.hints.2.text"
msgstr "你需要在引号内有一个空格字符。"

#. https://futurecoder.io/course/#UsingVariables
msgid ""
"pages.UsingVariables.steps.word_plus_name_with_space.special_messages.bad_word.text"
msgstr "哎呀，你需要先设置 `word = 'Hello'`，然后我们才能继续。"

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.steps.word_plus_name_with_space.text"
msgstr "哎呀……这看起来不太好。你能修改上面的代码，使单词和你的名字之间有一个空格吗？"

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.title"
msgstr "使用变量和 `print()`"

#. https://futurecoder.io/course/#WritingPrograms
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.WritingPrograms.steps.editor_hello_world.text"
msgstr ""
"是时候停止在 shell 中做所有事情了。在右上角，你可以看到 *editor*。这是一个可以编写和运行更长程序的地方。shell 很棒，你应该继续使用它来探索，但 editor 才是真正的程序所在。\n"
"\n"
"在 editor 中输入下面的程序，然后点击 '运行' 按钮：\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#WritingPrograms
msgid "pages.WritingPrograms.steps.final_text.text"
msgstr ""
"恭喜你，成功运行了你的第一个实际程序！\n"
"\n"
"花点时间理解这个程序。Python 会从上到下逐行运行每一行。你应该试着在脑海中模拟这个过程——想想每一行做了什么。看看 `word` 的值是如何变化的，以及这有什么影响。注意，当 `print` 被多次使用时，每个内容（在这个例子中是 `Hello World` 和 `Goodbye World`）都会单独打印在一行上。\n"
"\n"
"关于 editor 中的程序，有几点需要注意：\n"
"\n"
"1. 程序在 shell 中运行，这意味着在程序中定义的变量现在在 shell 中存在，并且具有它们在程序中最后的值。这让你在程序完成后可以在 shell 中进行探索。例如，`name` 现在在 shell 中的值是 `'World'`。\n"
"2. 程序在隔离中运行——它们不依赖于任何先前定义的变量。shell 会被重置，所有之前的变量都会被清除。所以即使 `word` 目前在 shell 中存在，如果你删除程序的第一行并再次运行，你会得到一个关于 `word` 未定义的错误。\n"
"3. 如果你在 shell 中输入代码并且它有值，该值会自动显示。对于 editor 中的程序则不会发生这种情况——你必须打印值。如果你从程序中移除 `print()`，将这两行改为 `word + ' ' + name`，什么也不会显示。\n"
"\n"
"我建议你亲自检查这些内容。"

#. https://futurecoder.io/course/#WritingPrograms
msgid "pages.WritingPrograms.title"
msgstr "编写程序"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.requirements
#.     name + " went to " + meal + " with " + friend + '.'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
msgid "code_bits.\" went to \""
msgstr "\" went to \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.requirements
#.     name + " went to " + meal + " with " + friend + '.'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
msgid "code_bits.\" with \""
msgstr "\" with \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
#. name = "Alice"
#. age = 20
#. print("Hello " + name + ". You are " + age + " years old.")
msgid "code_bits.\" years old.\""
msgstr "\" years old.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
msgid "code_bits.\"!! Warning !!\""
msgstr "\"!! Warning !!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
msgid "code_bits.\"!!!! DANGER !!!!\""
msgstr "\"!!!! DANGER !!!!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
msgid "code_bits.\"++more++\""
msgstr "\"++more++\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
#. name = "Alice"
#. age = 20
#. print("Hello " + name + ". You are " + age + " years old.")
msgid "code_bits.\". You are \""
msgstr "\". You are \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
#. def invalid_image(filename):
#.     return not (filename.endswith(".png") or filename.endswith(".jpg"))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.3.text
#.     def valid_image(filename):
#.         return filename.endswith(".png") or filename.endswith(".jpg")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.final_text.text
#.     def invalid_image(filename):
#.         return not (filename.endswith(".png") or filename.endswith(".jpg"))
#.     def invalid_image(filename):
#.         return not filename.endswith(".png") and not
#. filename.endswith(".jpg")
msgid "code_bits.\".jpg\""
msgstr "\".jpg\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
#. def invalid_image(filename):
#.     return not (filename.endswith(".png") or filename.endswith(".jpg"))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.3.text
#.     def valid_image(filename):
#.         return filename.endswith(".png") or filename.endswith(".jpg")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.final_text.text
#.     def invalid_image(filename):
#.         return not (filename.endswith(".png") or filename.endswith(".jpg"))
#.     def invalid_image(filename):
#.         return not filename.endswith(".png") and not
#. filename.endswith(".jpg")
msgid "code_bits.\".png\""
msgstr "\".png\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
msgid "code_bits.\"=the same=\""
msgstr "\"=the same=\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.first_nested_loop
#. for letter in "ABC":
#.     print(letter)
#.     for number in range(4):
#.         print(f'{letter} {number}')
#.     print('---')
msgid "code_bits.\"ABC\""
msgstr "\"ABC\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise.text
#.     letters = "ABCD"
msgid "code_bits.\"ABCD\""
msgstr "\"ABCD\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
#. def say_hello(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name.text
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
#. def say_hello(person_name):
#.     print(f"Hello {person_name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.define_greet
#. def greet(name):
#.     print(f"Hello {name}!")
#. greet("Alice")
#. greet("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
#. def greet(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. greet("Alice")
#. greet("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
#. name = "Alice"
#. age = 20
#. print(f'Hello {name}. You are {age} years old.')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
#. name = "Alice"
#. age = 20
#. print("Hello " + name + ". You are " + age + " years old.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
#. name = "Alice"
#. friend = 'Bob'
#. meal = "lunch"
#. print(f"{name} went to {meal} with {friend}.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise.text
#.     players = ["Alice", "Bob", "Charlie"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.requirements
#.     return name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.requirements
#.     return name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#.     return name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#.     return name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     (name == "Alice") or ("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     name == ("Alice" or "Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     return name in ["Alice", "Bob", "Charlie"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement
#. def is_friend(name):
#.     return name == "Alice" or name == "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.requirements
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.requirements
#.     return name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.text
#.     name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr
#. def is_friend(name):
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#.     if name == "Alice" or name == "Bob":
#.         return True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InputAliceBob
#. def is_friend(name):
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InspectWithBirdseye
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MultiLineExpressions.steps.valid_multiline
#. name = "Bob"
#. is_friend = name == "Alice" or \
#.             name == "Bob"
#. print(is_friend)
#. is_friend = (name == "Alice" or
#.              name == "Bob")
#. print(is_friend)
#. is_friend = [name == "Alice",
#.              name == "Bob"]
#. print(is_friend)
#. print(name == "Alice" or
#.       name == "Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_double_quotes_equal
#. 'Alice' == "Alice"
msgid "code_bits.\"Alice\""
msgstr "\"Alice\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quotes
#. print("Alice's Diner")
msgid "code_bits.\"Alice's Diner\""
msgstr "\"Alice's Diner\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
#. super_secret_number = 7
#. print("What number am I thinking of?")
#. guess = input()
#. if int(guess) == super_secret_number:
#.     print("Amazing! Are you psychic?")
#. else:
#.     print("Nope!")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text
#.     super_secret_number = 7
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
msgid "code_bits.\"Amazing! Are you psychic?\""
msgstr "\"Amazing! Are you psychic?\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
#. def say_hello(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name.text
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
#. def say_hello(person_name):
#.     print(f"Hello {person_name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.define_greet
#. def greet(name):
#.     print(f"Hello {name}!")
#. greet("Alice")
#. greet("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
#. def greet(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. greet("Alice")
#. greet("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise.text
#.     players = ["Alice", "Bob", "Charlie"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.requirements
#.     return name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.requirements
#.     return name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#.     return name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#.     return name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     (name == "Alice") or ("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     name == ("Alice" or "Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     return name in ["Alice", "Bob", "Charlie"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement
#. def is_friend(name):
#.     return name == "Alice" or name == "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.requirements
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.requirements
#.     return name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.text
#.     name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr
#. def is_friend(name):
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#.     if name == "Alice" or name == "Bob":
#.         return True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InputAliceBob
#. def is_friend(name):
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InspectWithBirdseye
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MultiLineExpressions.steps.valid_multiline
#. name = "Bob"
#. is_friend = name == "Alice" or \
#.             name == "Bob"
#. print(is_friend)
#. is_friend = (name == "Alice" or
#.              name == "Bob")
#. print(is_friend)
#. is_friend = [name == "Alice",
#.              name == "Bob"]
#. print(is_friend)
#. print(name == "Alice" or
#.       name == "Bob")
msgid "code_bits.\"Bob\""
msgstr "\"Bob\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise.text
#.     players = ["Alice", "Bob", "Charlie"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     return name in ["Alice", "Bob", "Charlie"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement
#. def is_friend(name):
#.     return name == "Alice" or name == "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr
#. def is_friend(name):
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InputAliceBob
#. def is_friend(name):
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InspectWithBirdseye
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
msgid "code_bits.\"Charlie\""
msgstr "\"Charlie\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
msgid "code_bits.\"DANGER\""
msgstr "\"DANGER\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
#. def print_words(french):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
msgid "code_bits.\"English: \""
msgstr "\"English: \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
#. def print_words(french):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
msgid "code_bits.\"French: \""
msgstr "\"French: \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
msgid "code_bits.\"German: \""
msgstr "\"German: \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
#. name = "Alice"
#. age = 20
#. print("Hello " + name + ". You are " + age + " years old.")
msgid "code_bits.\"Hello \""
msgstr "\"Hello \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.print_twice_call_print_many
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_birdseye
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_pythontutor
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_snoop
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_many
#. def print_many(thing, n):
#.     for _ in range(n):
#.         print(thing)
#. print_many("Hello", 3)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. print_many(3, "Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters.text
#.     thing = "Hello"
#.     n = 3
#.     for _ in range(n):
#.         print(thing)
msgid "code_bits.\"Hello\""
msgstr "\"Hello\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
#. def say_hello(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name.text
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
#. def say_hello(person_name):
#.     print(f"Hello {person_name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
#. def greet(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. greet("Alice")
#. greet("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you.text
#.     def greet(name):
#.         print(f"Hello {name}!")
#.         print("How are you?")
msgid "code_bits.\"How are you?\""
msgstr "\"How are you?\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     if invalid_image(filename):
#.         print("I can't process " + filename)
msgid "code_bits.\"I can't process \""
msgstr "\"I can't process \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.\"It's a draw!\""
msgstr "\"It's a draw!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
#. super_secret_number = 7
#. print("What number am I thinking of?")
#. guess = input()
#. if int(guess) == super_secret_number:
#.     print("Amazing! Are you psychic?")
#. else:
#.     print("Nope!")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text
#.     super_secret_number = 7
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
msgid "code_bits.\"Nope!\""
msgstr "\"Nope!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal.text
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
msgid "code_bits.\"OK\""
msgstr "\"OK\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_lower_upper
#. sentence = "Python rocks!"
#. new_sentence = sentence.upper()
#. print(sentence)
#. print(new_sentence)
msgid "code_bits.\"Python rocks!\""
msgstr "\"Python rocks!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
msgid "code_bits.\"Python\""
msgstr "\"Python\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise
#. print("Special cases aren't special enough to break the rules.")
msgid "code_bits.\"Special cases aren't special enough to break the rules.\""
msgstr "\"Special cases aren't special enough to break the rules.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
msgid "code_bits.\"Warning\""
msgstr "\"Warning\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
#. super_secret_number = 7
#. print("What number am I thinking of?")
#. guess = input()
#. if int(guess) == super_secret_number:
#.     print("Amazing! Are you psychic?")
#. else:
#.     print("Nope!")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text
#.     super_secret_number = 7
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
msgid "code_bits.\"What number am I thinking of?\""
msgstr "\"What number am I thinking of?\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
#. def format_board(board):
#.     first_row = ' '
#.     for i in range(len(board)):
#.         first_row += str(i + 1)
#.     joined_rows = [first_row]
#.     for i in range(len(board)):
#.         joined_row = str(i + 1) + ''.join(board[i])
#.         joined_rows.append(joined_row)
#.     return "\n".join(joined_rows)
msgid "code_bits.\"\\n\""
msgstr "\"\\n\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting
#. strings = ["abc", "def", "ghi"]
#. print(strings[1][0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
msgid "code_bits.\"abc\""
msgstr "\"abc\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
msgid "code_bits.\"cat.jpg\""
msgstr "\"cat.jpg\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting
#. strings = ["abc", "def", "ghi"]
#. print(strings[1][0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
msgid "code_bits.\"def\""
msgstr "\"def\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
msgid "code_bits.\"dog.png\""
msgstr "\"dog.png\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting
#. strings = ["abc", "def", "ghi"]
#. print(strings[1][0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
msgid "code_bits.\"ghi\""
msgstr "\"ghi\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
msgid "code_bits.\"goodbye world\""
msgstr "\"goodbye world\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
msgid "code_bits.\"goodbye\""
msgstr "\"goodbye\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
msgid "code_bits.\"hello there\""
msgstr "\"hello there\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
msgid "code_bits.\"hello world\""
msgstr "\"hello world\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
msgid "code_bits.\"hello\""
msgstr "\"hello\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
msgid "code_bits.\"how are you\""
msgstr "\"how are you\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
msgid "code_bits.\"invoice.pdf\""
msgstr "\"invoice.pdf\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
#. name = "Alice"
#. friend = 'Bob'
#. meal = "lunch"
#. print(f"{name} went to {meal} with {friend}.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
msgid "code_bits.\"lunch\""
msgstr "\"lunch\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
msgid "code_bits.\"more\""
msgstr "\"more\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
msgid "code_bits.\"the same\""
msgstr "\"the same\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.final_text.text
#.     strings[1].append("today?")
msgid "code_bits.\"today?\""
msgstr "\"today?\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         ' 123\n1XOX\n2O  \n3 XO'
#.     )
msgid "code_bits.' 123\\n1XOX\\n2O  \\n3 XO'"
msgstr "' 123\\n1XOX\\n2O  \\n3 XO'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.mutation_string_append
#. 'Python'.append(' is cool!')
msgid "code_bits.' is cool!'"
msgstr "' is cool!'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.final_text.text
#.     'hello ' + 'world'
#.     'hello' + ' world'
#.     'hello' + ' ' + 'world'
msgid "code_bits.' world'"
msgstr "' world'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise
#. print('"Talk is cheap. Show me the code." - Linus Torvalds')
msgid "code_bits.'\"Talk is cheap. Show me the code.\" - Linus Torvalds'"
msgstr "'\"Talk is cheap. Show me the code.\" - Linus Torvalds'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
#. letters = 'AB'
#. for c1 in letters:
#.     for c2 in letters:
#.         for c3 in letters:
#.             for c4 in letters:
#.                 print(c1 + c2 + c3 + c4)
msgid "code_bits.'AB'"
msgstr "'AB'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     if char == 'T':
#.         char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     if char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_elif
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     elif char == 'T':
#.         char = 'A'
#.     elif char == 'G':
#.         char = 'C'
#.     elif char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
msgid "code_bits.'AGTAGCGTC'"
msgstr "'AGTAGCGTC'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else
#. dna = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     else:
#.         if char == 'T':
#.             char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     else:
#.         if char == 'C':
#.             char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#.     def substitute(string, d):
#.         ...
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G':
#. 'C'}), expected)
msgid "code_bits.'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'"
msgstr "'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
#. your_name = 'Alex'
msgid "code_bits.'Alex'"
msgstr "'Alex'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
#. people = ['Alice', 'Bob', 'Charlie']
#. print(f"There are {len(people)} people waiting, the first one's name is
#. {people[0]}.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
#. players = ['Alice', 'Bob', 'Charlie']
#. for i in range(len(players)):
#.     for j in range(len(players)):
#.         if i < j:
#.             print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
#. players = ['Alice', 'Bob', 'Charlie']
#. for player1 in players:
#.     for player2 in players:
#.         if player1 != player2:
#.             print(f'{player1} vs {player2}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_double_quotes_equal
#. 'Alice' == "Alice"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quotes_apostrophe.text
#.     name = 'Alice'
msgid "code_bits.'Alice'"
msgstr "'Alice'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example
#. word = 'Amazing'
#. vowels = []
#. consonants = []
#. for letter in word:
#.     if letter.lower() in 'aeiou':
#.         vowels.append(letter)
#.     else:
#.         consonants.append(letter)
#. print(vowels)
#. print(consonants)
msgid "code_bits.'Amazing'"
msgstr "'Amazing'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
#. people = ['Alice', 'Bob', 'Charlie']
#. print(f"There are {len(people)} people waiting, the first one's name is
#. {people[0]}.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
#. name = "Alice"
#. friend = 'Bob'
#. meal = "lunch"
#. print(f"{name} went to {meal} with {friend}.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
#. players = ['Alice', 'Bob', 'Charlie']
#. for i in range(len(players)):
#.     for j in range(len(players)):
#.         if i < j:
#.             print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
#. players = ['Alice', 'Bob', 'Charlie']
#. for player1 in players:
#.     for player2 in players:
#.         if player1 != player2:
#.             print(f'{player1} vs {player2}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
msgid "code_bits.'Bob'"
msgstr "'Bob'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
#. people = ['Alice', 'Bob', 'Charlie']
#. print(f"There are {len(people)} people waiting, the first one's name is
#. {people[0]}.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
#. players = ['Alice', 'Bob', 'Charlie']
#. for i in range(len(players)):
#.     for j in range(len(players)):
#.         if i < j:
#.             print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
#. players = ['Alice', 'Bob', 'Charlie']
#. for player1 in players:
#.     for player2 in players:
#.         if player1 != player2:
#.             print(f'{player1} vs {player2}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
msgid "code_bits.'Charlie'"
msgstr "'Charlie'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
msgid "code_bits.'Dylan'"
msgstr "'Dylan'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.'French'"
msgstr "'French'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.'German'"
msgstr "'German'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
#. number = '1'
#. for i in range(int(number)):
#.     print('Starting... ' + str(i + 1))
#. print('Go!')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion.text
#.     number = '3'
#.     for i in range(number):
#.         print('Starting... ' + i + 1)
#.     print('Go!')
msgid "code_bits.'Go!'"
msgstr "'Go!'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. word = 'Goodbye'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.text
#.     word = 'Goodbye'
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_assign_goodbye
#. word = 'Goodbye'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.WritingPrograms.steps.editor_hello_world
#. word = 'Hello'
#. name = 'World'
#. print(word + ' ' + name)
#. word = 'Goodbye'
#. print(word + ' ' + name)
msgid "code_bits.'Goodbye'"
msgstr "'Goodbye'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
#. sentence = 'HELLO THERE'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.     else:
#.         char = char.lower()
#.     new_sentence += char
#.     upper = False
#. print(new_sentence)
msgid "code_bits.'HELLO THERE'"
msgstr "'HELLO THERE'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.hello_plus_name
#. 'Hello ' + your_name
msgid "code_bits.'Hello '"
msgstr "'Hello '"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.final_text.text
#.     sentence = 'Hello World'
#.     excited = True
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#.     sentence = new_sentence
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char + '!'
#.     sentence = new_sentence
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.if_upper_else_lower
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     sentence = sentence.upper()
#. else:
#.     sentence = sentence.lower()
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.if_upper_else_lower_false
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     sentence = sentence.upper()
#. else:
#.     sentence = sentence.lower()
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     char = '!'
#. sentence += char
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char.text
#.     sentence = 'Hello World'
#.     excited = True
#.     if excited:
#.         char = '!'
#.     sentence += char
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise.text
#.     sentence = 'Hello World'
#.     excited = False
#.     confused = True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_example
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     sentence += '!'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_false_example
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     sentence += '!'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.five_different_types
#. print(type('Hello World'))
#. print(type(23))
#. print(type(True))
#. print(type([1, 2, 3]))
#. print(type(4.56))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
#. sentence = 'Hello World'
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop
#. sentence = 'Hello World'
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. print(new_sentence)
msgid "code_bits.'Hello World'"
msgstr "'Hello World'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
#. sentence = 'Hello there'
#. excited = True
#. if excited:
#.     char = '!'
#. else:
#.     char = '.'
#. sentence += char
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
#. sentence = 'Hello there'
#. include = True
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = False
#. print(new_sentence)
msgid "code_bits.'Hello there'"
msgstr "'Hello there'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.hello_plus_equals
#. hello = 'Hello'
#. print(hello)
#. hello = hello + '!'
#. print(hello)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.methods_of_str
#. word = 'Hello'
#. print(word.upper)
#. print(word.upper())
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.no_append_for_str
#. word = 'Hello'
#. word.append('!')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
#. string1 = 'Hello'
#. string2 = 'World'
#. for i in range(len(string1)):
#.     char1 = string1[i]
#.     char2 = string2[i]
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise
#. sentence = 'Hello'
#. excited = True
#. confused = True
#. if excited:
#.     sentence += '!'
#. if confused:
#.     sentence += '?'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.can_contain_anything
#. x = 1
#. things = ['Hello', x, x + 3]
#. print(things)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_assign
#. word = 'Hello'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. word = 'Goodbye'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign.text
#.     word = 'Hello'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.WritingPrograms.steps.editor_hello_world
#. word = 'Hello'
#. name = 'World'
#. print(word + ' ' + name)
#. word = 'Goodbye'
#. print(word + ' ' + name)
msgid "code_bits.'Hello'"
msgstr "'Hello'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.first_if_else
#. condition = True
#. if condition:
#.     print('Yes')
#. else:
#.     print('No')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.first_if_else_false
#. condition = False
#. if condition:
#.     print('Yes')
#. else:
#.     print('No')
msgid "code_bits.'No'"
msgstr "'No'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
#. sentence = 'One more exercise, and then you can relax.'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.         upper = False
#.     else:
#.         char = char.lower()
#.         upper = True
#.     new_sentence += char
#. print(new_sentence)
msgid "code_bits.'One more exercise, and then you can relax.'"
msgstr "'One more exercise, and then you can relax.'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words
#. words = ['Python']
#. for index in range(len(words)):
#.     print(index)
#.     print(words[index])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
#. words = ['Python']
#. print(words[len(words) - 1])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.mutation_string_append
#. 'Python'.append(' is cool!')
msgid "code_bits.'Python'"
msgstr "'Python'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
#. number = '1'
#. for i in range(int(number)):
#.     print('Starting... ' + str(i + 1))
#. print('Go!')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion.text
#.     number = '3'
#.     for i in range(number):
#.         print('Starting... ' + i + 1)
#.     print('Go!')
msgid "code_bits.'Starting... '"
msgstr "'Starting... '"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#.     def substitute(string, d):
#.         ...
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G':
#. 'C'}), expected)
msgid "code_bits.'TCATCGCAGGAATCAATGTCCTACCGAATA'"
msgstr "'TCATCGCAGGAATCAATGTCCTACCGAATA'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.brokn_kyboard
#. sentence = 'The e key on my keyboard is broken'
#. new_sentence = ''
#. for c in sentence:
#.     if c != 'e':
#.         new_sentence += c
#. print(new_sentence)
msgid "code_bits.'The e key on my keyboard is broken'"
msgstr "'The e key on my keyboard is broken'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.first_if_statements
#. if True:
#.     print('This gets printed')
#. if False:
#.     print('This does not')
msgid "code_bits.'This does not'"
msgstr "'This does not'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.first_if_statements
#. if True:
#.     print('This gets printed')
#. if False:
#.     print('This does not')
msgid "code_bits.'This gets printed'"
msgstr "'This gets printed'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
#. words = ['This', 'is', 'a', 'list']
#. total = ''
#. for word in words:
#.     total += word
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. print(found)
msgid "code_bits.'This'"
msgstr "'This'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.first_input
#. print('Type your name, then press Enter:')
#. name = input()
#. print(f'Hello {name}!')
msgid "code_bits.'Type your name, then press Enter:'"
msgstr "'Type your name, then press Enter:'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1
#. name = 'World'
#. for character in name:
#.     print('---' + character)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1.text
#.     name = 'World'
#.     for character in name:
#.         print(character)
#.         print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_2
#. name = 'World'
#. for _ in name:
#.     print(name)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
#. name = 'World'
#. line = '-'
#. for char in name:
#.     line = line + char
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
#. name = 'World'
#. line = '-'
#. for char in name:
#.     print(line)
#.     line = line + char
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
#. name = 'World'
#. spaces = ''
#. for char in name:
#.     print(spaces + char)
#.     spaces += ' '
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
#. name = 'World'
#. line = ''
#. for _ in name:
#.     line += '-'
#. line = '+' + line + '+'
#. print(line)
#. print('|' + name + '|')
#. print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
#. name = 'World'
#. line = '+' + name + '+'
#. spaces = ''
#. for _ in name:
#.     spaces += ' '
#. print(line)
#. for char in name:
#.     print(char + spaces + char)
#. print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = char + line
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char + ' '
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced.text
#.     name = 'World'
#.     line = ''
#.     for char in name:
#.         line = line + char
#.         print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
#. name = 'World'
#. line = ''
#. for _ in name:
#.     line += '-'
#. print(name)
#. print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
#. string1 = 'Hello'
#. string2 = 'World'
#. for i in range(len(string1)):
#.     char1 = string1[i]
#.     char2 = string2[i]
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.one_indented_line
#. name = 'World'
#. for character in name:
#.     print(character)
#. print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.two_indented_lines
#. name = 'World'
#. for character in name:
#.     print(character)
#.     print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingForLoops.steps.first_for_loop
#. name = 'World'
#. for character in name: print(character)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. word = 'Goodbye'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.WritingPrograms.steps.editor_hello_world
#. word = 'Hello'
#. name = 'World'
#. print(word + ' ' + name)
#. word = 'Goodbye'
#. print(word + ' ' + name)
msgid "code_bits.'World'"
msgstr "'World'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'XOX\nO  \n XO'
#.     )
msgid "code_bits.'XOX\\nO  \\n XO'"
msgstr "'XOX\\nO  \\n XO'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'X|O|X\n-+-+-\nO| | \n-+-+-\n |X|O'
#.     )
msgid "code_bits.'X|O|X\\n-+-+-\\nO| | \\n-+-+-\\n |X|O'"
msgstr "'X|O|X\\n-+-+-\\nO| | \\n-+-+-\\n |X|O'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.first_if_else
#. condition = True
#. if condition:
#.     print('Yes')
#. else:
#.     print('No')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.first_if_else_false
#. condition = False
#. if condition:
#.     print('Yes')
#. else:
#.     print('No')
msgid "code_bits.'Yes'"
msgstr "'Yes'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
#. def format_board(board):
#.     result = ''
#.     for i in range(len(board)):
#.         for char in board[i]:
#.             result += char
#.         if i != len(board) - 1:
#.             result += '\n'
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.introducing_newline
#. len('\n')
msgid "code_bits.'\\n'"
msgstr "'\\n'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
msgid "code_bits.'\\nO to play:\\n'"
msgstr "'\\nO to play:\\n'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
msgid "code_bits.'\\nX to play:\\n'"
msgstr "'\\nX to play:\\n'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.not_callable
#. f = 'a string'
#. print(callable(f))
#. f()
msgid "code_bits.'a string'"
msgstr "'a string'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.introducing_equality
#. print(1 + 2 == 3)
#. print(4 + 5 == 6)
#. print('ab' + 'c' == 'a' + 'bc')
msgid "code_bits.'ab'"
msgstr "'ab'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
#. strings = ['abc', 'de', 'fghi', 'jklmn', 'o']
#. print(strings[-2][-1])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. string = strings[1]
#. print(string[0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. for i in range(len(strings[0])):
#.     line = ""
#.     for string in strings:
#.         line += string[i]
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.break_vs_return
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 break
#. foo()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 return letter
#. foo()
msgid "code_bits.'abc'"
msgstr "'abc'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
msgid "code_bits.'abcqwe'"
msgstr "'abcqwe'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example
#. word = 'Amazing'
#. vowels = []
#. consonants = []
#. for letter in word:
#.     if letter.lower() in 'aeiou':
#.         vowels.append(letter)
#.     else:
#.         consonants.append(letter)
#. print(vowels)
#. print(consonants)
msgid "code_bits.'aeiou'"
msgstr "'aeiou'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.'apfel'"
msgstr "'apfel'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#.     def print_words(french):
#.         ...
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys
#. quantities = {'apple': 1, 'cat': 10}
#. print(quantities.keys())
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys.text
#.     quantities = {'apple': 1, 'cat': 10}
#.     print(quantities)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities.keys():
#.     print(key)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable2
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities:
#.     print(key)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access2
#. french['apple']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.first_dict
#. french = {'apple': 'pomme', 'box': 'boite'}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     prices = {'apple': 2, 'apple': 3}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.'apple'"
msgstr "'apple'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
#. strings = [['hello', 'there'], ['how', 'are', 'you']]
#. print(strings[1][2][0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
msgid "code_bits.'are'"
msgstr "'are'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.introducing_equality
#. print(1 + 2 == 3)
#. print(4 + 5 == 6)
#. print('ab' + 'c' == 'a' + 'bc')
msgid "code_bits.'bc'"
msgstr "'bc'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#.     def print_words(french):
#.         ...
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.first_dict
#. french = {'apple': 'pomme', 'box': 'boite'}
msgid "code_bits.'boite'"
msgstr "'boite'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#.     def print_words(french):
#.         ...
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access3
#. french['box']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.first_dict
#. french = {'apple': 'pomme', 'box': 'boite'}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.'box'"
msgstr "'box'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys
#. quantities = {'apple': 1, 'cat': 10}
#. print(quantities.keys())
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys.text
#.     quantities = {'apple': 1, 'cat': 10}
#.     print(quantities)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities.keys():
#.     print(key)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable2
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities:
#.     print(key)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.'cat'"
msgstr "'cat'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
#. strings = ['abc', 'de', 'fghi', 'jklmn', 'o']
#. print(strings[-2][-1])
msgid "code_bits.'de'"
msgstr "'de'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. string = strings[1]
#. print(string[0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. for i in range(len(strings[0])):
#.     line = ""
#.     for string in strings:
#.         line += string[i]
#.     print(line)
msgid "code_bits.'def'"
msgstr "'def'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.'dog'"
msgstr "'dog'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
#. strings = ['abc', 'de', 'fghi', 'jklmn', 'o']
#. print(strings[-2][-1])
msgid "code_bits.'fghi'"
msgstr "'fghi'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. string = strings[1]
#. print(string[0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. for i in range(len(strings[0])):
#.     line = ""
#.     for string in strings:
#.         line += string[i]
#.     print(line)
msgid "code_bits.'ghi'"
msgstr "'ghi'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
msgid "code_bits.'ghiq'"
msgstr "'ghiq'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.'goodbye world'"
msgstr "'goodbye world'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.'goodbye'"
msgstr "'goodbye'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.final_text.text
#.     'hello ' + 'world'
#.     'hello' + ' world'
#.     'hello' + ' ' + 'world'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_space
#. 'hello ' + 'world'
msgid "code_bits.'hello '"
msgstr "'hello '"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.'hello there'"
msgstr "'hello there'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.'hello world'"
msgstr "'hello world'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.final_text.text
#.     'hello ' + 'world'
#.     'hello' + ' world'
#.     'hello' + ' ' + 'world'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_concat
#. 'hello' + 'world'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
#. strings = [['hello', 'there'], ['how', 'are', 'you']]
#. print(strings[1][2][0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingStrings.steps.hello_string
#. 'hello'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
msgid "code_bits.'hello'"
msgstr "'hello'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.'how are you'"
msgstr "'how are you'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
#. strings = [['hello', 'there'], ['how', 'are', 'you']]
#. print(strings[1][2][0])
msgid "code_bits.'how'"
msgstr "'how'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
#. words = ['This', 'is', 'a', 'list']
#. total = ''
#. for word in words:
#.     total += word
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. print(found)
msgid "code_bits.'is'"
msgstr "'is'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
#. strings = ['abc', 'de', 'fghi', 'jklmn', 'o']
#. print(strings[-2][-1])
msgid "code_bits.'jklmn'"
msgstr "'jklmn'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.'kasten'"
msgstr "'kasten'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters
#. name = 'kesha'
#. new_name = ''
#. for c in name:
#.     if c == 's':
#.         c = '$'
#.     new_name += c
#. print(new_name)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters_exercise
#. name = 'kesha'
#. new_name = ''
#. for c in name:
#.     if c == 'e':
#.         c = '3'
#.     if c == 's':
#.         c = '$'
#.     if c == 'a':
#.         c = '@'
#.     new_name += c
#. print(new_name)
msgid "code_bits.'kesha'"
msgstr "'kesha'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
#. words = ['This', 'is', 'a', 'list']
#. total = ''
#. for word in words:
#.     total += word
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. print(found)
msgid "code_bits.'list'"
msgstr "'list'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.'on'"
msgstr "'on'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#.     def print_words(french):
#.         ...
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access4
#. french['pomme']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.first_dict
#. french = {'apple': 'pomme', 'box': 'boite'}
msgid "code_bits.'pomme'"
msgstr "'pomme'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.'store'"
msgstr "'store'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.'the'"
msgstr "'the'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
#. strings = [['hello', 'there'], ['how', 'are', 'you']]
#. print(strings[1][2][0])
msgid "code_bits.'there'"
msgstr "'there'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.'to'"
msgstr "'to'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.'way'"
msgstr "'way'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_string_check
#. 'word'
msgid "code_bits.'word'"
msgstr "'word'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.final_text.text
#.     'hello ' + 'world'
#.     'hello' + ' world'
#.     'hello' + ' ' + 'world'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_concat
#. 'hello' + 'world'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_space
#. 'hello ' + 'world'
msgid "code_bits.'world'"
msgstr "'world'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.final_text.text
#.     if word.lower() == 'yes':
msgid "code_bits.'yes'"
msgstr "'yes'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
#. strings = [['hello', 'there'], ['how', 'are', 'you']]
#. print(strings[1][2][0])
msgid "code_bits.'you'"
msgstr "'you'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise.text
#.     Hello
#.     Hello
msgid "code_bits.Hello"
msgstr "Hello"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.two_separate_lists.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.append_vs_concatenate.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.printing_the_range.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.using_len_first_time.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.one_indented_line.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.two_indented_lines.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.first_input.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.first_birdseye_example.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.first_dict.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotTrueOrTrue.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InputAliceBob.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.naive_make_board.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.run_broken_with_python_tutor.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.double_return_in_one_function.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MultiLineExpressions.steps.valid_multiline.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.modify_list_in_function.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_two_lines.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.introducing_newline.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.one_way_to_print_board.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.brokn_kyboard.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.mutation_string_append.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_count_index.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_in_step.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_lower_upper.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.different_types_look_same.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.five_different_types.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.less_than_has_two_meanings.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.less_than_sorting_strings.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.plus_has_two_meanings.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithPythonTutor.steps.run_with_python_tutor.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.first_print.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_assign_goodbye.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.WritingPrograms.steps.editor_hello_world.text
#.     __program_indented__
msgid "code_bits.__program_indented__"
msgstr "__program_indented__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal.text
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
msgid "code_bits.actual"
msgstr "actual"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
#. name = "Alice"
#. age = 20
#. print(f'Hello {name}. You are {age} years old.')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
#. name = "Alice"
#. age = 20
#. print("Hello " + name + ". You are " + age + " years old.")
msgid "code_bits.age"
msgstr "age"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
#. def surround(string, sides):
#.     return sides + string + sides
#. def alert(string, level):
#.     string = surround(string, ' ')
#.     for _ in range(level):
#.         string = surround(string, '!')
#.     return string
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     def alert(string, level):
msgid "code_bits.alert"
msgstr "alert"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#.         diagonal1 = all_equal([board[0][0], board[1][1], board[2][2]])
#.         diagonal2 = all_equal([board[2][0], board[1][1], board[0][2]])
#.         return diagonal1 or diagonal2
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
#. def all_equal(row):
#.     return row[0] == row[1] and row[0] == row[2]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow.text
#.     def all_equal(row):
#.         ...
#.     assert_equal(all_equal(["X", "X", "X"]), True)
#.     assert_equal(all_equal(["O", "O", "O"]), True)
#.     assert_equal(all_equal(["X", "O", "X"]), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.final_text.text
#.     def all_equal(row):
#.         return row[0] == row[1] and row[0] == row[2]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         all_equal = True
#.         piece = board[0][col]
#.         for row in board:
#.             if row[col] == ' ' or row[col] != piece:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
#. def row_winner(board):
#.     for row in board:
#.         all_equal = True
#.         piece = row[0]
#.         for entry in row:
#.             if entry == ' ' or piece != entry:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
msgid "code_bits.all_equal"
msgstr "all_equal"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
#. def diagonal_winner(board):
#.     all_equal1 = True
#.     all_equal2 = True
#.     topleft = board[0][0]
#.     topright = board[0][-1]
#.     for i in range(len(board)):
#.         if board[i][i] == ' ' or board[i][i] != topleft:
#.             all_equal1 = False
#.         if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:
#.             all_equal2 = False
#.     return all_equal1 or all_equal2
msgid "code_bits.all_equal1"
msgstr "all_equal1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
#. def diagonal_winner(board):
#.     all_equal1 = True
#.     all_equal2 = True
#.     topleft = board[0][0]
#.     topright = board[0][-1]
#.     for i in range(len(board)):
#.         if board[i][i] == ' ' or board[i][i] != topleft:
#.             all_equal1 = False
#.         if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:
#.             all_equal2 = False
#.     return all_equal1 or all_equal2
msgid "code_bits.all_equal2"
msgstr "all_equal2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithPythonTutor.steps.run_with_python_tutor
#. all_numbers = [2, 4, 8, 1, 9, 7]
#. small_numbers = []
#. big_numbers = []
#. for number in all_numbers:
#.     if number <= 5:
#.         small_numbers.append(number)
#.     else:
#.         big_numbers.append(number)
#. print(small_numbers)
#. print(big_numbers)
msgid "code_bits.all_numbers"
msgstr "all_numbers"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority.text
#.     def diagonal_winner(board):
#.         ...
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'O', 'X'],
#.                 ['X', 'X', 'O'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', 'O'],
#.                 ['X', 'O', 'O'],
#.                 ['O', 'X', 'X']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O'],
#.                 ['X', 'X', 'X'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise.text
#.     def is_valid_percentage(x):
#.         if x < 0 or x > 100:
#.             return False
#.         else:
#.             return True
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow.text
#.     def all_equal(row):
#.         ...
#.     assert_equal(all_equal(["X", "X", "X"]), True)
#.     assert_equal(all_equal(["O", "O", "O"]), True)
#.     assert_equal(all_equal(["X", "O", "X"]), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement
#. def is_friend(name):
#.     return name == "Alice" or name == "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr
#. def is_friend(name):
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InputAliceBob
#. def is_friend(name):
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InspectWithBirdseye
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner.text
#.     def column_winner(board):
#.         ...
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' '],
#.                 ['X', 'O', ' '],
#.                 ['O', 'X', ' ']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' ', 'X'],
#.                 [' ', 'O', 'X', 'O'],
#.                 ['O', 'O', 'X', 'X'],
#.                 ['O', 'O', 'X', ' ']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner.text
#.     def diagonal_winner(board):
#.         ...
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O', 'X'],
#.                 [' ', 'O', 'X', ' '],
#.                 ['X', 'X', ' ', 'X'],
#.                 ['X', ' ', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', ' '],
#.                 ['X', ' ', 'O'],
#.                 [' ', 'O', 'O']
#.             ]
#.         ),
#.         False
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner.text
#.     def row_winner(board):
#.         ...
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['A', 'A', 'B', 'A'],
#.                 [' ', ' ', ' ', ' '],
#.                 ['A', ' ', ' ', 'A'],
#.                 ['B', ' ', 'B', 'A']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'X'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.naive_make_board
#. def make_board(size):
#.     row = []
#.     for _ in range(size):
#.         row.append(' ')
#.     board = []
#.     for _ in range(size):
#.         board.append(row)
#.     return board
#. def test():
#.     board = make_board(3)
#.     assert_equal(board, [
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#.     board[0][0] = 'X'
#.     assert_equal(board, [
#.         ['X', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#. test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values
#. def double_numbers(numbers):
#.     for x in numbers:
#.         return x * 2
#. assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function.text
#.     def double_numbers(numbers):
#.         doubles = []
#.         for x in numbers:
#.             doubles.append(x * 2)
#.         return doubles
#.     assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'X|O|X\n-+-+-\nO| | \n-+-+-\n |X|O'
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'XOX\nO  \n XO'
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text
#.     assert_equal(print_board([...]), "...")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text
#.     def format_board(board):
#.         ...
#.         return ...
#.     assert_equal(format_board([...]), "...")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.complete_quadruple_tests
#. def double(x):
#.     return x * 2
#. def quadruple(x):
#.     return double(double(x))
#. assert_equal(quadruple(2), 8)
#. assert_equal(quadruple(5), 20)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.complete_quadruple_tests.text
#.     def double(x):
#.         return x * 2
#.     def quadruple(x):
#.         return double(double(x))
#.     assert_equal(quadruple(2))
#.     assert_equal(quadruple(5))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal
#. def double(x):
#.     return x * 2
#. assert_equal(double(2), 4)
#. assert_equal(double(5), 10)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal.text
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.make_tests_fail
#. def double(x):
#.     return x * 3
#. assert_equal(double(2), 4)
#. assert_equal(double(5), 10)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         ' 123\n1XOX\n2O  \n3 XO'
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#.     def substitute(string, d):
#.         ...
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G':
#. 'C'}), expected)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.assert_equal"
msgstr "assert_equal"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
#. numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. big_numbers = []
#. for number in numbers:
#.     if number > 5:
#.         big_numbers.append(number)
#. print(big_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy2
#. numbers = [10, 7, 8, 3, 12, 15]
#. big_numbers = numbers.copy()
#. for number in numbers:
#.     if number <= 10:
#.         big_numbers.remove(number)
#. print(big_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_new_list
#. numbers = [10, 7, 8, 3, 12, 15]
#. big_numbers = []
#. for number in numbers:
#.     if number > 10:
#.         big_numbers.append(number)
#. print(big_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithPythonTutor.steps.run_with_python_tutor
#. all_numbers = [2, 4, 8, 1, 9, 7]
#. small_numbers = []
#. big_numbers = []
#. for number in all_numbers:
#.     if number <= 5:
#.         small_numbers.append(number)
#.     else:
#.         big_numbers.append(number)
#. print(small_numbers)
#. print(big_numbers)
msgid "code_bits.big_numbers"
msgstr "big_numbers"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
#. def diagonal_winner(board):
#.     middle = board[1][1]
#.     return (
#.             (middle == board[0][0] and middle == board[2][2]) or
#.             (middle == board[0][2] and middle == board[2][0])
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority.text
#.     board = [
#.         ['X', 'O', 'X'],
#.         ['X', 'X', 'O'],
#.         ['O', 'O', 'X']
#.     ]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority.text
#.     def diagonal_winner(board):
#.         ...
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'O', 'X'],
#.                 ['X', 'X', 'O'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', 'O'],
#.                 ['X', 'O', 'O'],
#.                 ['O', 'X', 'X']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O'],
#.                 ['X', 'X', 'X'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#.         diagonal1 = all_equal([board[0][0], board[1][1], board[2][2]])
#.         diagonal2 = all_equal([board[2][0], board[1][1], board[0][2]])
#.         return diagonal1 or diagonal2
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         all_equal = True
#.         piece = board[0][col]
#.         for row in board:
#.             if row[col] == ' ' or row[col] != piece:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner.text
#.     def column_winner(board):
#.         ...
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' '],
#.                 ['X', 'O', ' '],
#.                 ['O', 'X', ' ']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' ', 'X'],
#.                 [' ', 'O', 'X', 'O'],
#.                 ['O', 'O', 'X', 'X'],
#.                 ['O', 'O', 'X', ' ']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
#. def diagonal_winner(board):
#.     all_equal1 = True
#.     all_equal2 = True
#.     topleft = board[0][0]
#.     topright = board[0][-1]
#.     for i in range(len(board)):
#.         if board[i][i] == ' ' or board[i][i] != topleft:
#.             all_equal1 = False
#.         if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:
#.             all_equal2 = False
#.     return all_equal1 or all_equal2
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner.text
#.     def diagonal_winner(board):
#.         ...
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O', 'X'],
#.                 [' ', 'O', 'X', ' '],
#.                 ['X', 'X', ' ', 'X'],
#.                 ['X', ' ', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', ' '],
#.                 ['X', ' ', 'O'],
#.                 [' ', 'O', 'O']
#.             ]
#.         ),
#.         False
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner.text
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
#. def row_winner(board):
#.     for row in board:
#.         all_equal = True
#.         piece = row[0]
#.         for entry in row:
#.             if entry == ' ' or piece != entry:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner.text
#.     board = [
#.         ['A', 'B', 'A', 'A'],
#.         ['B', ' ', ' ', 'A'],
#.         [' ', 'A', 'B', 'B'],
#.         [' ', 'A', 'B', ' ']
#.     ]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner.text
#.     board = [
#.         ['X', 'O', 'X'],
#.         ['O', ' ', ' '],
#.         [' ', 'X', 'O']
#.     ]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner.text
#.     def row_winner(board):
#.         ...
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['A', 'A', 'B', 'A'],
#.                 [' ', ' ', ' ', ' '],
#.                 ['A', ' ', ' ', 'A'],
#.                 ['B', ' ', 'B', 'A']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'X'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     board.append(row.copy())
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         board = []
#.         for _ in range(size):
#.             row = []
#.             for _ in range(size):
#.                 row.append(' ')
#.             board.append(row)
#.         return board
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
#. def make_board(size):
#.     board = []
#.     for _ in range(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board.append(row)
#.     return board
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#.     board = [row, row, row]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#.     board[0][0] = 'X'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#.     board[0][0] = 'X'
#.     board[1][0] = 'X'
#.     board[2][0] = 'X'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#.     board[1][0] = 'X'
#.     board[2][0] = 'X'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.naive_make_board
#. def make_board(size):
#.     row = []
#.     for _ in range(size):
#.         row.append(' ')
#.     board = []
#.     for _ in range(size):
#.         board.append(row)
#.     return board
#. def test():
#.     board = make_board(3)
#.     assert_equal(board, [
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#.     board[0][0] = 'X'
#.     assert_equal(board, [
#.         ['X', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#. test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.modify_list_in_function
#. def play_move(board, player):
#.     board[1] = player
#. def play_game():
#.     game_board = [" ", " ", " "]
#.     play_move(game_board, "X")
#.     print(game_board)
#. play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
#. def play_move(board, player):
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     board[1][0] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     row = board[1]
#.     row[0] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_two_lines
#. def play_move(board, player):
#.     row = board[1]
#.     row[0] = player
#. def play_game():
#.     board = [
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.     ]
#.     play_move(board, "X")
#.     print(board)
#. play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
#. def format_board(board):
#.     joined_rows = []
#.     for row in board:
#.         joined_rows.append("|".join(row))
#.     lines = []
#.     for _ in board[0]:
#.         lines.append("-")
#.     line = f'\n{"+".join(lines)}\n'
#.     return line.join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     board = [
#.         ['X', 'O', 'X'],
#.         [' ', 'O', 'O'],
#.         [' ', 'X', ' ']
#.     ]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'X|O|X\n-+-+-\nO| | \n-+-+-\n |X|O'
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
#. def format_board(board):
#.     result = ''
#.     for i in range(len(board)):
#.         for char in board[i]:
#.             result += char
#.         if i != len(board) - 1:
#.             result += '\n'
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'XOX\nO  \n XO'
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text
#.     def format_board(board):
#.         ...
#.         return ...
#.     assert_equal(format_board([...]), "...")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.one_way_to_print_board
#. def print_board(board):
#.     for row in board:
#.         print("".join(row))
#. print_board([
#.     ['X', 'O', 'X'],
#.     [' ', 'O', 'O'],
#.     [' ', 'X', ' ']
#. ])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
#. def format_board(board):
#.     first_row = ' '
#.     for i in range(len(board)):
#.         first_row += str(i + 1)
#.     joined_rows = [first_row]
#.     for i in range(len(board)):
#.         joined_row = str(i + 1) + ''.join(board[i])
#.         joined_rows.append(joined_row)
#.     return "\n".join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         ' 123\n1XOX\n2O  \n3 XO'
#.     )
msgid "code_bits.board"
msgstr "board"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.board_size"
msgstr "board_size"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
#. letters = 'AB'
#. for c1 in letters:
#.     for c2 in letters:
#.         for c3 in letters:
#.             for c4 in letters:
#.                 print(c1 + c2 + c3 + c4)
msgid "code_bits.c1"
msgstr "c1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
#. letters = 'AB'
#. for c1 in letters:
#.     for c2 in letters:
#.         for c3 in letters:
#.             for c4 in letters:
#.                 print(c1 + c2 + c3 + c4)
msgid "code_bits.c2"
msgstr "c2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
#. letters = 'AB'
#. for c1 in letters:
#.     for c2 in letters:
#.         for c3 in letters:
#.             for c4 in letters:
#.                 print(c1 + c2 + c3 + c4)
msgid "code_bits.c3"
msgstr "c3"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
#. letters = 'AB'
#. for c1 in letters:
#.     for c2 in letters:
#.         for c3 in letters:
#.             for c4 in letters:
#.                 print(c1 + c2 + c3 + c4)
msgid "code_bits.c4"
msgstr "c4"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
#. def total_cost(cart, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         result += price
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.cart"
msgstr "cart"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
#. name = 'World'
#. line = '-'
#. for char in name:
#.     line = line + char
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
#. name = 'World'
#. line = '-'
#. for char in name:
#.     print(line)
#.     line = line + char
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
#. name = 'World'
#. spaces = ''
#. for char in name:
#.     print(spaces + char)
#.     spaces += ' '
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
#. name = 'World'
#. line = '+' + name + '+'
#. spaces = ''
#. for _ in name:
#.     spaces += ' '
#. print(line)
#. for char in name:
#.     print(char + spaces + char)
#. print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = char + line
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char + ' '
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced.text
#.     name = 'World'
#.     line = ''
#.     for char in name:
#.         line = line + char
#.         print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined.text
#.     line += char
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined.text
#.     line = line + char
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.final_text.text
#.     sentence = 'Hello World'
#.     excited = True
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#.     sentence = new_sentence
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char + '!'
#.     sentence = new_sentence
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
#. sentence = 'HELLO THERE'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.     else:
#.         char = char.lower()
#.     new_sentence += char
#.     upper = False
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
#. sentence = 'Hello there'
#. excited = True
#. if excited:
#.     char = '!'
#. else:
#.     char = '.'
#. sentence += char
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
#. sentence = 'One more exercise, and then you can relax.'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.         upper = False
#.     else:
#.         char = char.lower()
#.         upper = True
#.     new_sentence += char
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     char = '!'
#. sentence += char
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char.text
#.     sentence = 'Hello World'
#.     excited = True
#.     if excited:
#.         char = '!'
#.     sentence += char
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     if char == 'T':
#.         char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     if char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_elif
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     elif char == 'T':
#.         char = 'A'
#.     elif char == 'G':
#.         char = 'C'
#.     elif char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_elif.text
#.     if char == 'A':
#.         char = 'T'
#.     elif char == 'T':
#.         char = 'A'
#.     elif char == 'G':
#.         char = 'C'
#.     elif char == 'C':
#.         char = 'G'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else
#. dna = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     else:
#.         if char == 'T':
#.             char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     else:
#.         if char == 'C':
#.             char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else.hints.0.text
#.     if char == 'A':
#.         char = 'T'
#.     if char == 'T':
#.         char = 'A'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else.text
#.     if char == 'A':
#.         char = 'T'
#.     else:
#.         if char == 'T':
#.             char = 'A'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
#. def format_board(board):
#.     result = ''
#.     for i in range(len(board)):
#.         for char in board[i]:
#.             result += char
#.         if i != len(board) - 1:
#.             result += '\n'
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
#. sentence = 'Hello there'
#. include = True
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = False
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
#. sentence = 'Hello World'
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop
#. sentence = 'Hello World'
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
msgid "code_bits.char"
msgstr "char"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
#. string1 = 'Hello'
#. string2 = 'World'
#. for i in range(len(string1)):
#.     char1 = string1[i]
#.     char2 = string2[i]
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.1.text
#.     for i in range(...):
#.         ...
#.         print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.text
#.     for i in range(len(string1)):
#.         char1 = string1[i]
#.         char2 = string2[i]
#.         print(char1 + ' ' + char2)
msgid "code_bits.char1"
msgstr "char1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
#. string1 = 'Hello'
#. string2 = 'World'
#. for i in range(len(string1)):
#.     char1 = string1[i]
#.     char2 = string2[i]
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.1.text
#.     for i in range(...):
#.         ...
#.         print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.text
#.     for i in range(len(string1)):
#.         char1 = string1[i]
#.         char2 = string2[i]
#.         print(char1 + ' ' + char2)
msgid "code_bits.char2"
msgstr "char2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1
#. name = 'World'
#. for character in name:
#.     print('---' + character)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1.text
#.     name = 'World'
#.     for character in name:
#.         print(character)
#.         print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.missing_indentation.text
#.     for character in name:
#.         print(character)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.missing_indentation.text
#.     for character in name: print(character)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.one_indented_line
#. name = 'World'
#. for character in name:
#.     print(character)
#. print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.two_indented_lines
#. name = 'World'
#. for character in name:
#.     print(character)
#.     print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingForLoops.steps.first_for_loop
#. name = 'World'
#. for character in name: print(character)
msgid "code_bits.character"
msgstr "character"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         all_equal = True
#.         piece = board[0][col]
#.         for row in board:
#.             if row[col] == ' ' or row[col] != piece:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
#. def play_move(board, player):
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.col"
msgstr "col"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
msgid "code_bits.column"
msgstr "column"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         all_equal = True
#.         piece = board[0][col]
#.         for row in board:
#.             if row[col] == ' ' or row[col] != piece:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner.text
#.     def column_winner(board):
#.         ...
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' '],
#.                 ['X', 'O', ' '],
#.                 ['O', 'X', ' ']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' ', 'X'],
#.                 [' ', 'O', 'X', 'O'],
#.                 ['O', 'O', 'X', 'X'],
#.                 ['O', 'O', 'X', ' ']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.column_winner"
msgstr "column_winner"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.first_if_else
#. condition = True
#. if condition:
#.     print('Yes')
#. else:
#.     print('No')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.first_if_else_false
#. condition = False
#. if condition:
#.     print('Yes')
#. else:
#.     print('No')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.introducing_booleans
#. condition = True
#. print(condition)
#. condition = False
#. print(condition)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values.text
#.     if condition:
#.         return value1
#.     else:
#.         return value2
msgid "code_bits.condition"
msgstr "condition"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise
#. sentence = 'Hello'
#. excited = True
#. confused = True
#. if excited:
#.     sentence += '!'
#. if confused:
#.     sentence += '?'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise.text
#.     sentence = 'Hello World'
#.     excited = False
#.     confused = True
msgid "code_bits.confused"
msgstr "confused"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example
#. word = 'Amazing'
#. vowels = []
#. consonants = []
#. for letter in word:
#.     if letter.lower() in 'aeiou':
#.         vowels.append(letter)
#.     else:
#.         consonants.append(letter)
#. print(vowels)
#. print(consonants)
msgid "code_bits.consonants"
msgstr "consonants"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
msgid "code_bits.cube"
msgstr "cube"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#.         diagonal1 = all_equal([board[0][0], board[1][1], board[2][2]])
#.         diagonal2 = all_equal([board[2][0], board[1][1], board[0][2]])
#.         return diagonal1 or diagonal2
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
msgid "code_bits.diagonal1"
msgstr "diagonal1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#.         diagonal1 = all_equal([board[0][0], board[1][1], board[2][2]])
#.         diagonal2 = all_equal([board[2][0], board[1][1], board[0][2]])
#.         return diagonal1 or diagonal2
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
msgid "code_bits.diagonal2"
msgstr "diagonal2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
#. def diagonal_winner(board):
#.     middle = board[1][1]
#.     return (
#.             (middle == board[0][0] and middle == board[2][2]) or
#.             (middle == board[0][2] and middle == board[2][0])
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority.text
#.     def diagonal_winner(board):
#.         ...
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'O', 'X'],
#.                 ['X', 'X', 'O'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', 'O'],
#.                 ['X', 'O', 'O'],
#.                 ['O', 'X', 'X']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O'],
#.                 ['X', 'X', 'X'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
#. def diagonal_winner(board):
#.     all_equal1 = True
#.     all_equal2 = True
#.     topleft = board[0][0]
#.     topright = board[0][-1]
#.     for i in range(len(board)):
#.         if board[i][i] == ' ' or board[i][i] != topleft:
#.             all_equal1 = False
#.         if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:
#.             all_equal2 = False
#.     return all_equal1 or all_equal2
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner.text
#.     def diagonal_winner(board):
#.         ...
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O', 'X'],
#.                 [' ', 'O', 'X', ' '],
#.                 ['X', 'X', ' ', 'X'],
#.                 ['X', ' ', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', ' '],
#.                 ['X', ' ', 'O'],
#.                 [' ', 'O', 'O']
#.             ]
#.         ),
#.         False
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner.text
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.diagonal_winner"
msgstr "diagonal_winner"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     if char == 'T':
#.         char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     if char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_elif
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     elif char == 'T':
#.         char = 'A'
#.     elif char == 'G':
#.         char = 'C'
#.     elif char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else
#. dna = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     else:
#.         if char == 'T':
#.             char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     else:
#.         if char == 'C':
#.             char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
msgid "code_bits.dna"
msgstr "dna"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
#. numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. double = []
#. for number in numbers:
#.     double += [number * 2]
#. print(double)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.final_text.text
#.     def quadruple(x):
#.         x = double(x)
#.         x = double(x)
#.         return x
#.     def quadruple(x):
#.         return double(double(x))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.first_return
#. def double(x):
#.     return x * 2
#. number = 5
#. twice = double(number)
#. print(number)
#. print(twice)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.losing_return_value
#. def double(x):
#.     return x * 2
#. number = 5
#. double(number)
#. print(number)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
#. def double(x):
#.     return x * 2
#. def quadruple(x):
#.     return double(double(x))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.complete_quadruple_tests
#. def double(x):
#.     return x * 2
#. def quadruple(x):
#.     return double(double(x))
#. assert_equal(quadruple(2), 8)
#. assert_equal(quadruple(5), 20)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.complete_quadruple_tests.text
#.     def double(x):
#.         return x * 2
#.     def quadruple(x):
#.         return double(double(x))
#.     assert_equal(quadruple(2))
#.     assert_equal(quadruple(5))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal
#. def double(x):
#.     return x * 2
#. assert_equal(double(2), 4)
#. assert_equal(double(5), 10)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.make_tests_fail
#. def double(x):
#.     return x * 3
#. assert_equal(double(2), 4)
#. assert_equal(double(5), 10)
msgid "code_bits.double"
msgstr "double"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values
#. def double_numbers(numbers):
#.     for x in numbers:
#.         return x * 2
#. assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function.text
#.     def double_numbers(numbers):
#.         doubles = []
#.         for x in numbers:
#.             doubles.append(x * 2)
#.         return doubles
#.     assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
msgid "code_bits.double_numbers"
msgstr "double_numbers"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function.text
#.     def double_numbers(numbers):
#.         doubles = []
#.         for x in numbers:
#.             doubles.append(x * 2)
#.         return doubles
#.     assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
msgid "code_bits.doubles"
msgstr "doubles"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers.text
#.     some_list += [element]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers.text
#.     some_list.append(element)
msgid "code_bits.element"
msgstr "element"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
#. def row_winner(board):
#.     for row in board:
#.         all_equal = True
#.         piece = row[0]
#.         for entry in row:
#.             if entry == ' ' or piece != entry:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
msgid "code_bits.entry"
msgstr "entry"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.final_text.text
#.     sentence = 'Hello World'
#.     excited = True
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#.     sentence = new_sentence
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char + '!'
#.     sentence = new_sentence
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
#. sentence = 'Hello there'
#. excited = True
#. if excited:
#.     char = '!'
#. else:
#.     char = '.'
#. sentence += char
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.if_upper_else_lower
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     sentence = sentence.upper()
#. else:
#.     sentence = sentence.lower()
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.if_upper_else_lower_false
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     sentence = sentence.upper()
#. else:
#.     sentence = sentence.lower()
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     char = '!'
#. sentence += char
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char.text
#.     sentence = 'Hello World'
#.     excited = True
#.     if excited:
#.         char = '!'
#.     sentence += char
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise
#. sentence = 'Hello'
#. excited = True
#. confused = True
#. if excited:
#.     sentence += '!'
#. if confused:
#.     sentence += '?'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise.text
#.     sentence = 'Hello World'
#.     excited = False
#.     confused = True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_example
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     sentence += '!'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_false_example
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     sentence += '!'
#. print(sentence)
msgid "code_bits.excited"
msgstr "excited"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal.text
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#.     def substitute(string, d):
#.         ...
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G':
#. 'C'}), expected)
msgid "code_bits.expected"
msgstr "expected"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.f\"---\""
msgstr "f\"---\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.eval_expr_inside_f_string
#. f"2 * 3 + 4 is equal to {2 * 3 + 4}"
msgid "code_bits.f\"2 * 3 + 4 is equal to {2 * 3 + 4}\""
msgstr "f\"2 * 3 + 4 is equal to {2 * 3 + 4}\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.f\"English: {word}\""
msgstr "f\"English: {word}\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal.text
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
msgid "code_bits.f\"Error! {repr(actual)} != {repr(expected)}\""
msgstr "f\"Error! {repr(actual)} != {repr(expected)}\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
#. def say_hello(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name.text
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.define_greet
#. def greet(name):
#.     print(f"Hello {name}!")
#. greet("Alice")
#. greet("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
#. def greet(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. greet("Alice")
#. greet("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you.text
#.     def greet(name):
#.         print(f"Hello {name}!")
#.         print("How are you?")
msgid "code_bits.f\"Hello {name}!\""
msgstr "f\"Hello {name}!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
#. def say_hello(person_name):
#.     print(f"Hello {person_name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
msgid "code_bits.f\"Hello {person_name}!\""
msgstr "f\"Hello {person_name}!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
#. people = ['Alice', 'Bob', 'Charlie']
#. print(f"There are {len(people)} people waiting, the first one's name is
#. {people[0]}.")
msgid ""
"code_bits.f\"There are {len(people)} people waiting, the first one's name is"
" {people[0]}.\""
msgstr ""
"f\"There are {len(people)} people waiting, the first one's name is "
"{people[0]}.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.f\"{language}: {translations[language]}\""
msgstr "f\"{language}: {translations[language]}\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.break_vs_return
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 break
#. foo()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 return letter
#. foo()
msgid "code_bits.f\"{letter} {number}\""
msgstr "f\"{letter} {number}\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
#. name = "Alice"
#. friend = 'Bob'
#. meal = "lunch"
#. print(f"{name} went to {meal} with {friend}.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.requirements
#.     f"{name} went to {meal} with {friend}."
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     print(f"{name} went to {meal} with {friend}.")
msgid "code_bits.f\"{name} went to {meal} with {friend}.\""
msgstr "f\"{name} went to {meal} with {friend}.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid ""
"code_bits.f'  {\" \".join(str(i + 1) for i in "
"range(size))}\\n{line.join(rows)}'"
msgstr "f'  {\" \".join(str(i + 1) for i in range(size))}\\n{line.join(rows)}'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.first_input
#. print('Type your name, then press Enter:')
#. name = input()
#. print(f'Hello {name}!')
msgid "code_bits.f'Hello {name}!'"
msgstr "f'Hello {name}!'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
#. name = "Alice"
#. age = 20
#. print(f'Hello {name}. You are {age} years old.')
msgid "code_bits.f'Hello {name}. You are {age} years old.'"
msgstr "f'Hello {name}. You are {age} years old.'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.f'\\n  {\"+\".join(\"-\" * size)}\\n'"
msgstr "f'\\n  {\"+\".join(\"-\" * size)}\\n'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
#. def format_board(board):
#.     joined_rows = []
#.     for row in board:
#.         joined_rows.append("|".join(row))
#.     lines = []
#.     for _ in board[0]:
#.         lines.append("-")
#.     line = f'\n{"+".join(lines)}\n'
#.     return line.join(joined_rows)
msgid "code_bits.f'\\n{\"+\".join(lines)}\\n'"
msgstr "f'\\n{\"+\".join(lines)}\\n'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.f'{i + 1} {\"|\".join(row)}'"
msgstr "f'{i + 1} {\"|\".join(row)}'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
#. for left in range(12):
#.     left += 1
#.     for right in range(12):
#.         right += 1
#.         print(f'{left} x {right} = {left * right}')
#.     print('---')
msgid "code_bits.f'{left} x {right} = {left * right}'"
msgstr "f'{left} x {right} = {left * right}'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.first_nested_loop
#. for letter in "ABC":
#.     print(letter)
#.     for number in range(4):
#.         print(f'{letter} {number}')
#.     print('---')
msgid "code_bits.f'{letter} {number}'"
msgstr "f'{letter} {number}'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
#. players = ['Alice', 'Bob', 'Charlie']
#. for player1 in players:
#.     for player2 in players:
#.         if player1 != player2:
#.             print(f'{player1} vs {player2}')
msgid "code_bits.f'{player1} vs {player2}'"
msgstr "f'{player1} vs {player2}'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
#. players = ['Alice', 'Bob', 'Charlie']
#. for i in range(len(players)):
#.     for j in range(len(players)):
#.         if i < j:
#.             print(f'{players[i]} vs {players[j]}')
msgid "code_bits.f'{players[i]} vs {players[j]}'"
msgstr "f'{players[i]} vs {players[j]}'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.f'{player} to play:'"
msgstr "f'{player} to play:'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.f'{player} wins!'"
msgstr "f'{player} wins!'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
#. def invalid_image(filename):
#.     return not (filename.endswith(".png") or filename.endswith(".jpg"))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.3.text
#.     def valid_image(filename):
#.         return filename.endswith(".png") or filename.endswith(".jpg")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     if invalid_image(filename):
#.         print("I can't process " + filename)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.final_text.text
#.     def invalid_image(filename):
#.         return not (filename.endswith(".png") or filename.endswith(".jpg"))
#.     def invalid_image(filename):
#.         return not filename.endswith(".png") and not
#. filename.endswith(".jpg")
msgid "code_bits.filename"
msgstr "filename"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     first = x1
#.     if x2 < first:
#.         first = x2
#.     if x3 < first:
#.         first = x3
#.     print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     if x1 < x2:
#.         if x1 < x3:
#.             first = x1
#.         else:
#.             first = x3
#.     else:
#.         if x2 < x3:
#.             first = x2
#.         else:
#.             first = x3
#.     print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise
#. x1 = 1
#. x2 = 2
#. x3 = 3
#. if x1 < x2:
#.     if x1 < x3:
#.         first = x1
#.     else:
#.         first = x3
#. else:
#.     if x2 < x3:
#.         first = x2
#.     else:
#.         first = x3
#. print(first)
msgid "code_bits.first"
msgstr "first"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
#. def format_board(board):
#.     first_row = ' '
#.     for i in range(len(board)):
#.         first_row += str(i + 1)
#.     joined_rows = [first_row]
#.     for i in range(len(board)):
#.         joined_row = str(i + 1) + ''.join(board[i])
#.         joined_rows.append(joined_row)
#.     return "\n".join(joined_rows)
msgid "code_bits.first_row"
msgstr "first_row"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.break_vs_return
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 break
#. foo()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.double_return_in_one_function
#. def foo():
#.     return 1
#.     return 2
#. print(foo())
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 return letter
#. foo()
msgid "code_bits.foo"
msgstr "foo"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
#. def format_board(board):
#.     joined_rows = []
#.     for row in board:
#.         joined_rows.append("|".join(row))
#.     lines = []
#.     for _ in board[0]:
#.         lines.append("-")
#.     line = f'\n{"+".join(lines)}\n'
#.     return line.join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'X|O|X\n-+-+-\nO| | \n-+-+-\n |X|O'
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
#. def format_board(board):
#.     result = ''
#.     for i in range(len(board)):
#.         for char in board[i]:
#.             result += char
#.         if i != len(board) - 1:
#.             result += '\n'
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'XOX\nO  \n XO'
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text
#.     def format_board(board):
#.         ...
#.         return ...
#.     assert_equal(format_board([...]), "...")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
#. def format_board(board):
#.     first_row = ' '
#.     for i in range(len(board)):
#.         first_row += str(i + 1)
#.     joined_rows = [first_row]
#.     for i in range(len(board)):
#.         joined_row = str(i + 1) + ''.join(board[i])
#.         joined_rows.append(joined_row)
#.     return "\n".join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         ' 123\n1XOX\n2O  \n3 XO'
#.     )
msgid "code_bits.format_board"
msgstr "format_board"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.             break
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     found = False
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.     print(found)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. print(found)
msgid "code_bits.found"
msgstr "found"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
#. def print_words(french):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#.     def print_words(french):
#.         ...
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access
#. french[0]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access2
#. french['apple']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access3
#. french['box']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access4
#. french['pomme']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.first_dict
#. french = {'apple': 'pomme', 'box': 'boite'}
msgid "code_bits.french"
msgstr "french"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
#. name = "Alice"
#. friend = 'Bob'
#. meal = "lunch"
#. print(f"{name} went to {meal} with {friend}.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.requirements
#.     name + " went to " + meal + " with " + friend + '.'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
msgid "code_bits.friend"
msgstr "friend"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.modify_list_in_function
#. def play_move(board, player):
#.     board[1] = player
#. def play_game():
#.     game_board = [" ", " ", " "]
#.     play_move(game_board, "X")
#.     print(game_board)
#. play_game()
msgid "code_bits.game_board"
msgstr "game_board"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
msgid "code_bits.german"
msgstr "german"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.grades_example
#. percentage = 73
#. if percentage < 40:
#.     grade = 'F'
#. elif percentage < 60:
#.     grade = 'C'
#. elif percentage < 80:
#.     grade = 'B'
#. else:
#.     grade = 'A'
#. print(grade)
msgid "code_bits.grade"
msgstr "grade"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.define_greet
#. def greet(name):
#.     print(f"Hello {name}!")
#. greet("Alice")
#. greet("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
#. def greet(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. greet("Alice")
#. greet("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you.text
#.     def greet(name):
#.         print(f"Hello {name}!")
#.         print("How are you?")
msgid "code_bits.greet"
msgstr "greet"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
#. super_secret_number = 7
#. print("What number am I thinking of?")
#. guess = input()
#. if int(guess) == super_secret_number:
#.     print("Amazing! Are you psychic?")
#. else:
#.     print("Nope!")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text
#.     super_secret_number = 7
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.final_text.text
#.     if guess == str(super_secret_number):
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.final_text.text
#.     if int(guess) == super_secret_number:
msgid "code_bits.guess"
msgstr "guess"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.hello_plus_equals
#. hello = 'Hello'
#. print(hello)
#. hello = hello + '!'
#. print(hello)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle.text
#.     temp = hello
#.     hello = temp + '!'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle.text
#.     temp = hello + '!'
#.     hello = temp
msgid "code_bits.hello"
msgstr "hello"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
#. sentence = 'Hello there'
#. include = True
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = False
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
#. sentence = 'Hello World'
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop
#. sentence = 'Hello World'
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. print(new_sentence)
msgid "code_bits.include"
msgstr "include"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_predict_exercise.text
#.     some_list.pop(index)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_predict.text
#.     some_list[index] = new_value
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words
#. words = ['Python']
#. for index in range(len(words)):
#.     print(index)
#.     print(words[index])
msgid "code_bits.index"
msgstr "index"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.indices_out_of_bounds
#. indices[4]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.printing_the_range
#. indices = range(4)
#. print(indices[0])
#. print(indices[1])
#. print(indices[2])
#. print(indices[3])
msgid "code_bits.indices"
msgstr "indices"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.text
#.     x = ['a', 'b', 'c']
#.     y = (insert_one_line_from_above)
#.     print(y)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.text
#.     x = ['a', 'b', 'c']
#.     (insert_one_line_from_above)
#.     print(x)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.text
#.     x = ['a', 'b', 'c']
#.     (insert_one_line_from_above)
#.     print(x)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise.text
#.     x = [15, 12, -6, 3]
#.     y = (insert_one_line_from_above)
#.     print(y)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.text
#.     x = [12, -6, 2, -1, 3]
#.     y = (insert_one_line_from_above)
#.     print(y)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.text
#.     x = 100
#.     y = (insert_one_line_from_above)
#.     print(y)
msgid "code_bits.insert_one_line_from_above"
msgstr "insert_one_line_from_above"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
#. def invalid_image(filename):
#.     return not (filename.endswith(".png") or filename.endswith(".jpg"))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     if invalid_image(filename):
#.         print("I can't process " + filename)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.final_text.text
#.     def invalid_image(filename):
#.         return not (filename.endswith(".png") or filename.endswith(".jpg"))
#.     def invalid_image(filename):
#.         return not filename.endswith(".png") and not
#. filename.endswith(".jpg")
msgid "code_bits.invalid_image"
msgstr "invalid_image"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement
#. def is_friend(name):
#.     return name == "Alice" or name == "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr
#. def is_friend(name):
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InputAliceBob
#. def is_friend(name):
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InspectWithBirdseye
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MultiLineExpressions.steps.valid_multiline
#. name = "Bob"
#. is_friend = name == "Alice" or \
#.             name == "Bob"
#. print(is_friend)
#. is_friend = (name == "Alice" or
#.              name == "Bob")
#. print(is_friend)
#. is_friend = [name == "Alice",
#.              name == "Bob"]
#. print(is_friend)
#. print(name == "Alice" or
#.       name == "Bob")
msgid "code_bits.is_friend"
msgstr "is_friend"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise
#. def is_valid_percentage(x):
#.     if 0 <= x and x <= 100:
#.         return True
#.     else:
#.         return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise.text
#.     def is_valid_percentage(x):
#.         if x < 0 or x > 100:
#.             return False
#.         else:
#.             return True
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow.text
#.     def is_valid_percentage(x):
#.         if 0 <= x and x <= 100:
#.             return True
#.         else:
#.             return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow.text
#.     def is_valid_percentage(x):
#.         return 0 <= x <= 100
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow.text
#.     def is_valid_percentage(x):
#.         return 0 <= x and x <= 100
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
#. def is_valid_percentage(x):
#.     if x < 0 or x > 100:
#.         return False
#.     else:
#.         return True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
msgid "code_bits.is_valid_percentage"
msgstr "is_valid_percentage"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
#. def total_cost(cart, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         result += price
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.item"
msgstr "item"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
#. def format_board(board):
#.     first_row = ' '
#.     for i in range(len(board)):
#.         first_row += str(i + 1)
#.     joined_rows = [first_row]
#.     for i in range(len(board)):
#.         joined_row = str(i + 1) + ''.join(board[i])
#.         joined_rows.append(joined_row)
#.     return "\n".join(joined_rows)
msgid "code_bits.joined_row"
msgstr "joined_row"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
#. def format_board(board):
#.     joined_rows = []
#.     for row in board:
#.         joined_rows.append("|".join(row))
#.     lines = []
#.     for _ in board[0]:
#.         lines.append("-")
#.     line = f'\n{"+".join(lines)}\n'
#.     return line.join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
#. def format_board(board):
#.     first_row = ' '
#.     for i in range(len(board)):
#.         first_row += str(i + 1)
#.     joined_rows = [first_row]
#.     for i in range(len(board)):
#.         joined_row = str(i + 1) + ''.join(board[i])
#.         joined_rows.append(joined_row)
#.     return "\n".join(joined_rows)
msgid "code_bits.joined_rows"
msgstr "joined_rows"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities.keys():
#.     print(key)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable2
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities:
#.     print(key)
msgid "code_bits.key"
msgstr "key"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.language"
msgstr "language"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
#. for left in range(12):
#.     left += 1
#.     for right in range(12):
#.         right += 1
#.         print(f'{left} x {right} = {left * right}')
#.     print('---')
msgid "code_bits.left"
msgstr "left"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.len_of_none
#. things = print([1, 2, 3])
#. length = len(things)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.print_returns_none
#. things = [1, 2, 3]
#. length = len(things)
#. printed = print(length)
#. print(printed)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
#. size = 3
#. for i in range(size):
#.     length = size - i
#.     line = ''
#.     for _ in range(length):
#.         line += '+'
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
msgid "code_bits.length"
msgstr "length"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#.     print(char1 + ' ' + char2)
msgid "code_bits.length1"
msgstr "length1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#.     print(char1 + ' ' + char2)
msgid "code_bits.length2"
msgstr "length2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
msgid "code_bits.lengths"
msgstr "lengths"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example
#. word = 'Amazing'
#. vowels = []
#. consonants = []
#. for letter in word:
#.     if letter.lower() in 'aeiou':
#.         vowels.append(letter)
#.     else:
#.         consonants.append(letter)
#. print(vowels)
#. print(consonants)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.first_nested_loop
#. for letter in "ABC":
#.     print(letter)
#.     for number in range(4):
#.         print(f'{letter} {number}')
#.     print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.break_vs_return
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 break
#. foo()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 return letter
#. foo()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
#. def substitute(string, d):
#.     result = ""
#.     for letter in string:
#.         result += d[letter]
#.     return result
msgid "code_bits.letter"
msgstr "letter"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
#. letters = 'AB'
#. for c1 in letters:
#.     for c2 in letters:
#.         for c3 in letters:
#.             for c4 in letters:
#.                 print(c1 + c2 + c3 + c4)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise.text
#.     letters = "ABCD"
msgid "code_bits.letters"
msgstr "letters"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
#. def surround(string, sides):
#.     return sides + string + sides
#. def alert(string, level):
#.     string = surround(string, ' ')
#.     for _ in range(level):
#.         string = surround(string, '!')
#.     return string
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     def alert(string, level):
msgid "code_bits.level"
msgstr "level"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
#. name = 'World'
#. line = '-'
#. for char in name:
#.     line = line + char
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
#. name = 'World'
#. line = '-'
#. for char in name:
#.     print(line)
#.     line = line + char
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
#. name = 'World'
#. line = ''
#. for _ in name:
#.     line += '-'
#. line = '+' + line + '+'
#. print(line)
#. print('|' + name + '|')
#. print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
#. name = 'World'
#. line = '+' + name + '+'
#. spaces = ''
#. for _ in name:
#.     spaces += ' '
#. print(line)
#. for char in name:
#.     print(char + spaces + char)
#. print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = char + line
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char + ' '
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced.text
#.     name = 'World'
#.     line = ''
#.     for char in name:
#.         line = line + char
#.         print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
#. name = 'World'
#. line = ''
#. for _ in name:
#.     line += '-'
#. print(name)
#. print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined.text
#.     line += char
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined.text
#.     line = line + char
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
#. size = 3
#. for i in range(size):
#.     length = size - i
#.     line = ''
#.     for _ in range(length):
#.         line += '+'
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. for i in range(len(strings[0])):
#.     line = ""
#.     for string in strings:
#.         line += string[i]
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
#. def format_board(board):
#.     joined_rows = []
#.     for row in board:
#.         joined_rows.append("|".join(row))
#.     lines = []
#.     for _ in board[0]:
#.         lines.append("-")
#.     line = f'\n{"+".join(lines)}\n'
#.     return line.join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.line"
msgstr "line"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
#. def format_board(board):
#.     joined_rows = []
#.     for row in board:
#.         joined_rows.append("|".join(row))
#.     lines = []
#.     for _ in board[0]:
#.         lines.append("-")
#.     line = f'\n{"+".join(lines)}\n'
#.     return line.join(joined_rows)
msgid "code_bits.lines"
msgstr "lines"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.final_text.text
#.     list2 = list1.copy()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.same_list
#. list1 = [1, 2, 3]
#. list2 = list1
#. print(list1)
#. print(list2)
#. print(list1 == list2)
#. print(list1 is list2)
#. list1.append(4)
#. print(list1)
#. print(list2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.two_separate_lists
#. list1 = [1, 2, 3]
#. list2 = [1, 2, 3]
#. print(list1)
#. print(list2)
#. print(list1 == list2)
#. print(list1 is list2)
#. list1.append(4)
#. print(list1)
#. print(list2)
msgid "code_bits.list1"
msgstr "list1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.final_text.text
#.     list2 = list1.copy()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.same_list
#. list1 = [1, 2, 3]
#. list2 = list1
#. print(list1)
#. print(list2)
#. print(list1 == list2)
#. print(list1 is list2)
#. list1.append(4)
#. print(list1)
#. print(list2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.two_separate_lists
#. list1 = [1, 2, 3]
#. list2 = [1, 2, 3]
#. print(list1)
#. print(list2)
#. print(list1 == list2)
#. print(list1 is list2)
#. list1.append(4)
#. print(list1)
#. print(list2)
msgid "code_bits.list2"
msgstr "list2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.main_diagonal_winner"
msgstr "main_diagonal_winner"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         board = []
#.         for _ in range(size):
#.             row = []
#.             for _ in range(size):
#.                 row.append(' ')
#.             board.append(row)
#.         return board
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
#. def make_board(size):
#.     board = []
#.     for _ in range(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board.append(row)
#.     return board
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.naive_make_board
#. def make_board(size):
#.     row = []
#.     for _ in range(size):
#.         row.append(' ')
#.     board = []
#.     for _ in range(size):
#.         board.append(row)
#.     return board
#. def test():
#.     board = make_board(3)
#.     assert_equal(board, [
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#.     board[0][0] = 'X'
#.     assert_equal(board, [
#.         ['X', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#. test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.make_board"
msgstr "make_board"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
msgid "code_bits.make_cube"
msgstr "make_cube"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
#. name = "Alice"
#. friend = 'Bob'
#. meal = "lunch"
#. print(f"{name} went to {meal} with {friend}.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.requirements
#.     name + " went to " + meal + " with " + friend + '.'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
msgid "code_bits.meal"
msgstr "meal"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
#. def diagonal_winner(board):
#.     middle = board[1][1]
#.     return (
#.             (middle == board[0][0] and middle == board[2][2]) or
#.             (middle == board[0][2] and middle == board[2][0])
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner.text
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
msgid "code_bits.middle"
msgstr "middle"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1
#. name = 'World'
#. for character in name:
#.     print('---' + character)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1.text
#.     name = 'World'
#.     for character in name:
#.         print(character)
#.         print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_2
#. name = 'World'
#. for _ in name:
#.     print(name)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
#. name = 'World'
#. line = '-'
#. for char in name:
#.     line = line + char
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
#. name = 'World'
#. line = '-'
#. for char in name:
#.     print(line)
#.     line = line + char
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
#. name = 'World'
#. spaces = ''
#. for char in name:
#.     print(spaces + char)
#.     spaces += ' '
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
#. name = 'World'
#. line = ''
#. for _ in name:
#.     line += '-'
#. line = '+' + line + '+'
#. print(line)
#. print('|' + name + '|')
#. print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
#. name = 'World'
#. line = '+' + name + '+'
#. spaces = ''
#. for _ in name:
#.     spaces += ' '
#. print(line)
#. for char in name:
#.     print(char + spaces + char)
#. print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = char + line
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char + ' '
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced.text
#.     name = 'World'
#.     line = ''
#.     for char in name:
#.         line = line + char
#.         print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
#. name = 'World'
#. line = ''
#. for _ in name:
#.     line += '-'
#. print(name)
#. print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
#. def say_hello(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name.text
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.define_greet
#. def greet(name):
#.     print(f"Hello {name}!")
#. greet("Alice")
#. greet("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
#. def greet(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. greet("Alice")
#. greet("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you.text
#.     def greet(name):
#.         print(f"Hello {name}!")
#.         print("How are you?")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.missing_indentation.text
#.     for character in name:
#.         print(character)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.missing_indentation.text
#.     for character in name: print(character)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.one_indented_line
#. name = 'World'
#. for character in name:
#.     print(character)
#. print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.two_indented_lines
#. name = 'World'
#. for character in name:
#.     print(character)
#.     print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.first_input
#. print('Type your name, then press Enter:')
#. name = input()
#. print(f'Hello {name}!')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingForLoops.steps.first_for_loop
#. name = 'World'
#. for character in name: print(character)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
#. name = "Alice"
#. age = 20
#. print(f'Hello {name}. You are {age} years old.')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
#. name = "Alice"
#. age = 20
#. print("Hello " + name + ". You are " + age + " years old.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
#. name = "Alice"
#. friend = 'Bob'
#. meal = "lunch"
#. print(f"{name} went to {meal} with {friend}.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.requirements
#.     name + " went to " + meal + " with " + friend + '.'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.requirements
#.     return name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.requirements
#.     return name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#.     return name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#.     return name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     (name == "Alice") or ("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     name == ("Alice" or "Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     return name in ["Alice", "Bob", "Charlie"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement
#. def is_friend(name):
#.     return name == "Alice" or name == "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.requirements
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.requirements
#.     return name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.text
#.     name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr
#. def is_friend(name):
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#.     if name == "Alice" or name == "Bob":
#.         return True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InputAliceBob
#. def is_friend(name):
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InspectWithBirdseye
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MultiLineExpressions.steps.valid_multiline
#. name = "Bob"
#. is_friend = name == "Alice" or \
#.             name == "Bob"
#. print(is_friend)
#. is_friend = (name == "Alice" or
#.              name == "Bob")
#. print(is_friend)
#. is_friend = [name == "Alice",
#.              name == "Bob"]
#. print(is_friend)
#. print(name == "Alice" or
#.       name == "Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quotes_apostrophe.text
#.     name = 'Alice'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. word = 'Goodbye'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters
#. name = 'kesha'
#. new_name = ''
#. for c in name:
#.     if c == 's':
#.         c = '$'
#.     new_name += c
#. print(new_name)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters_exercise
#. name = 'kesha'
#. new_name = ''
#. for c in name:
#.     if c == 'e':
#.         c = '3'
#.     if c == 's':
#.         c = '$'
#.     if c == 'a':
#.         c = '@'
#.     new_name += c
#. print(new_name)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.WritingPrograms.steps.editor_hello_world
#. word = 'Hello'
#. name = 'World'
#. print(word + ' ' + name)
#. word = 'Goodbye'
#. print(word + ' ' + name)
msgid "code_bits.name"
msgstr "name"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters
#. name = 'kesha'
#. new_name = ''
#. for c in name:
#.     if c == 's':
#.         c = '$'
#.     new_name += c
#. print(new_name)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters_exercise
#. name = 'kesha'
#. new_name = ''
#. for c in name:
#.     if c == 'e':
#.         c = '3'
#.     if c == 's':
#.         c = '$'
#.     if c == 'a':
#.         c = '@'
#.     new_name += c
#. print(new_name)
msgid "code_bits.new_name"
msgstr "new_name"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers.text
#.     numbers = [1, 2] + [3, 4]
#.     print(numbers)
#.     new_numbers = []
#.     new_numbers += numbers
#.     new_numbers += [5]
#.     print(new_numbers)
msgid "code_bits.new_numbers"
msgstr "new_numbers"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.append_vs_concatenate
#. nums = [1, 2, 3]
#. new_nums = nums + [4, 5]
#. print(new_nums)
#. print(nums)
#. nums.append(4)
#. print(nums)
msgid "code_bits.new_nums"
msgstr "new_nums"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.final_text.text
#.     sentence = 'Hello World'
#.     excited = True
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#.     sentence = new_sentence
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char + '!'
#.     sentence = new_sentence
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
#. sentence = 'HELLO THERE'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.     else:
#.         char = char.lower()
#.     new_sentence += char
#.     upper = False
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
#. sentence = 'One more exercise, and then you can relax.'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.         upper = False
#.     else:
#.         char = char.lower()
#.         upper = True
#.     new_sentence += char
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.brokn_kyboard
#. sentence = 'The e key on my keyboard is broken'
#. new_sentence = ''
#. for c in sentence:
#.     if c != 'e':
#.         new_sentence += c
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_lower_upper
#. sentence = "Python rocks!"
#. new_sentence = sentence.upper()
#. print(sentence)
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
#. sentence = 'Hello there'
#. include = True
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = False
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
#. sentence = 'Hello World'
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop
#. sentence = 'Hello World'
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. print(new_sentence)
msgid "code_bits.new_sentence"
msgstr "new_sentence"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_predict.text
#.     some_list[index] = new_value
msgid "code_bits.new_value"
msgstr "new_value"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. print(total)
msgid "code_bits.not_first"
msgstr "not_first"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_loop_python_tutor
#. numbers = [[1, 2, 3], [4, 5], [6], []]
#. for sublist in numbers:
#.     for num in sublist:
#.         print(num)
#.     print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example
#. numbers = [[1, 2, 3], [4, 5], [6], []]
#. for sublist in numbers:
#.     for num in sublist:
#.         print(num)
#.     print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.text
#.     for sublist in numbers:
#.         for num in sublist:
#.             print(num)
#.         print('---')
msgid "code_bits.num"
msgstr "num"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
#. numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. double = []
#. for number in numbers:
#.     double += [number * 2]
#. print(double)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
#. numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. big_numbers = []
#. for number in numbers:
#.     if number > 5:
#.         big_numbers.append(number)
#. print(big_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.numbers_sum
#. numbers = [3, 1, 4, 1, 5, 9]
#. total = 0
#. for number in numbers:
#.     total += number
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.first_nested_loop
#. for letter in "ABC":
#.     print(letter)
#.     for number in range(4):
#.         print(f'{letter} {number}')
#.     print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy
#. numbers = [10, 7, 8, 3, 12, 15]
#. for number in numbers.copy():
#.     if number <= 10:
#.         numbers.remove(number)
#. print(numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy.requirements
#.     for number in numbers.copy():
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy.requirements
#.     for number in numbers:
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy.text
#.     for number in numbers.copy():
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy2
#. numbers = [10, 7, 8, 3, 12, 15]
#. big_numbers = numbers.copy()
#. for number in numbers:
#.     if number <= 10:
#.         big_numbers.remove(number)
#. print(big_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_new_list
#. numbers = [10, 7, 8, 3, 12, 15]
#. big_numbers = []
#. for number in numbers:
#.     if number > 10:
#.         big_numbers.append(number)
#. print(big_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.remove_instead_of_pop
#. numbers = [10, 7, 8, 3, 12, 15]
#. for number in numbers:
#.     if number <= 10:
#.         numbers.remove(number)
#. print(numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.run_broken_with_python_tutor
#. numbers = [10, 7, 8, 3, 12, 15]
#. for i in range(len(numbers)):
#.     number = numbers[i]
#.     if number <= 10:
#.         numbers.pop(i)
#. print(numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.break_vs_return
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 break
#. foo()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 return letter
#. foo()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.first_return
#. def double(x):
#.     return x * 2
#. number = 5
#. twice = double(number)
#. print(number)
#. print(twice)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.losing_return_value
#. def double(x):
#.     return x * 2
#. number = 5
#. double(number)
#. print(number)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
#. number = '1'
#. for i in range(int(number)):
#.     print('Starting... ' + str(i + 1))
#. print('Go!')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion.text
#.     number = '3'
#.     for i in range(number):
#.         print('Starting... ' + i + 1)
#.     print('Go!')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithPythonTutor.steps.run_with_python_tutor
#. all_numbers = [2, 4, 8, 1, 9, 7]
#. small_numbers = []
#. big_numbers = []
#. for number in all_numbers:
#.     if number <= 5:
#.         small_numbers.append(number)
#.     else:
#.         big_numbers.append(number)
#. print(small_numbers)
#. print(big_numbers)
msgid "code_bits.number"
msgstr "number"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
#. numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. double = []
#. for number in numbers:
#.     double += [number * 2]
#. print(double)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers.text
#.     numbers = [1, 2] + [3, 4]
#.     print(numbers)
#.     new_numbers = []
#.     new_numbers += numbers
#.     new_numbers += [5]
#.     print(new_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers.text
#.     numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
#. numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. big_numbers = []
#. for number in numbers:
#.     if number > 5:
#.         big_numbers.append(number)
#. print(big_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers.text
#.     numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.numbers_sum
#. numbers = [3, 1, 4, 1, 5, 9]
#. total = 0
#. for number in numbers:
#.     total += number
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_loop_python_tutor
#. numbers = [[1, 2, 3], [4, 5], [6], []]
#. for sublist in numbers:
#.     for num in sublist:
#.         print(num)
#.     print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example
#. numbers = [[1, 2, 3], [4, 5], [6], []]
#. for sublist in numbers:
#.     for num in sublist:
#.         print(num)
#.     print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.text
#.     for sublist in numbers:
#.         for num in sublist:
#.             print(num)
#.         print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.text
#.     numbers = [[1, 2, 3], [4, 5], [6], []]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy
#. numbers = [10, 7, 8, 3, 12, 15]
#. for number in numbers.copy():
#.     if number <= 10:
#.         numbers.remove(number)
#. print(numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy.requirements
#.     for number in numbers.copy():
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy.requirements
#.     for number in numbers:
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy.text
#.     for number in numbers.copy():
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy2
#. numbers = [10, 7, 8, 3, 12, 15]
#. big_numbers = numbers.copy()
#. for number in numbers:
#.     if number <= 10:
#.         big_numbers.remove(number)
#. print(big_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_new_list
#. numbers = [10, 7, 8, 3, 12, 15]
#. big_numbers = []
#. for number in numbers:
#.     if number > 10:
#.         big_numbers.append(number)
#. print(big_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.remove_instead_of_pop
#. numbers = [10, 7, 8, 3, 12, 15]
#. for number in numbers:
#.     if number <= 10:
#.         numbers.remove(number)
#. print(numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.run_broken_with_python_tutor
#. numbers = [10, 7, 8, 3, 12, 15]
#. for i in range(len(numbers)):
#.     number = numbers[i]
#.     if number <= 10:
#.         numbers.pop(i)
#. print(numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values
#. def double_numbers(numbers):
#.     for x in numbers:
#.         return x * 2
#. assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function.text
#.     def double_numbers(numbers):
#.         doubles = []
#.         for x in numbers:
#.             doubles.append(x * 2)
#.         return doubles
#.     assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
msgid "code_bits.numbers"
msgstr "numbers"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.append_vs_concatenate
#. nums = [1, 2, 3]
#. new_nums = nums + [4, 5]
#. print(new_nums)
#. print(nums)
#. nums.append(4)
#. print(nums)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_predict_exercise
#. nums = [1, 2, 3]
#. print(nums.pop(1))
#. print(nums)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_predict_exercise
#. nums = [1, 2, 3]
#. nums.remove(1)
#. print(nums)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_predict
#. nums = [1, 2, 3]
#. nums[1] = 9
#. print(nums)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.list_insert
#. nums = [1, 2, 3, 4, 5]
#. nums.insert(2, 9)
#. print(nums)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.text
#.     nums = [1, 2, 3, 4, 5]
#.     nums.append(9)
#.     print(nums)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.in_predict_exercise
#. nums = [2, 9, 1, 8, 5, 64]
#. print(7 in nums)
#. print(2 in nums)
msgid "code_bits.nums"
msgstr "nums"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     if char == 'T':
#.         char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     if char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_elif
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     elif char == 'T':
#.         char = 'A'
#.     elif char == 'G':
#.         char = 'C'
#.     elif char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else
#. dna = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     else:
#.         if char == 'T':
#.             char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     else:
#.         if char == 'C':
#.             char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
msgid "code_bits.opposite_dna"
msgstr "opposite_dna"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#.     def substitute(string, d):
#.         ...
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G':
#. 'C'}), expected)
msgid "code_bits.original"
msgstr "original"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
#. people = ['Alice', 'Bob', 'Charlie']
#. print(f"There are {len(people)} people waiting, the first one's name is
#. {people[0]}.")
msgid "code_bits.people"
msgstr "people"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.grades_example
#. percentage = 73
#. if percentage < 40:
#.     grade = 'F'
#. elif percentage < 60:
#.     grade = 'C'
#. elif percentage < 80:
#.     grade = 'B'
#. else:
#.     grade = 'A'
#. print(grade)
msgid "code_bits.percentage"
msgstr "percentage"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
#. def say_hello(person_name):
#.     print(f"Hello {person_name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
msgid "code_bits.person_name"
msgstr "person_name"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         all_equal = True
#.         piece = board[0][col]
#.         for row in board:
#.             if row[col] == ' ' or row[col] != piece:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
#. def row_winner(board):
#.     for row in board:
#.         all_equal = True
#.         piece = row[0]
#.         for entry in row:
#.             if entry == ' ' or piece != entry:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
msgid "code_bits.piece"
msgstr "piece"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.modify_list_in_function
#. def play_move(board, player):
#.     board[1] = player
#. def play_game():
#.     game_board = [" ", " ", " "]
#.     play_move(game_board, "X")
#.     print(game_board)
#. play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_two_lines
#. def play_move(board, player):
#.     row = board[1]
#.     row[0] = player
#. def play_game():
#.     board = [
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.     ]
#.     play_move(board, "X")
#.     print(board)
#. play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.play_game"
msgstr "play_game"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.modify_list_in_function
#. def play_move(board, player):
#.     board[1] = player
#. def play_game():
#.     game_board = [" ", " ", " "]
#.     play_move(game_board, "X")
#.     print(game_board)
#. play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
#. def play_move(board, player):
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_two_lines
#. def play_move(board, player):
#.     row = board[1]
#.     row[0] = player
#. def play_game():
#.     board = [
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.     ]
#.     play_move(board, "X")
#.     print(board)
#. play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.play_move"
msgstr "play_move"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.modify_list_in_function
#. def play_move(board, player):
#.     board[1] = player
#. def play_game():
#.     game_board = [" ", " ", " "]
#.     play_move(game_board, "X")
#.     print(game_board)
#. play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
#. def play_move(board, player):
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     board[1][0] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     row = board[1]
#.     row[0] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_two_lines
#. def play_move(board, player):
#.     row = board[1]
#.     row[0] = player
#. def play_game():
#.     board = [
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.     ]
#.     play_move(board, "X")
#.     print(board)
#. play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.player"
msgstr "player"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
#. players = ['Alice', 'Bob', 'Charlie']
#. for player1 in players:
#.     for player2 in players:
#.         if player1 != player2:
#.             print(f'{player1} vs {player2}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.player1"
msgstr "player1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
#. players = ['Alice', 'Bob', 'Charlie']
#. for player1 in players:
#.     for player2 in players:
#.         if player1 != player2:
#.             print(f'{player1} vs {player2}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.player2"
msgstr "player2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
#. players = ['Alice', 'Bob', 'Charlie']
#. for i in range(len(players)):
#.     for j in range(len(players)):
#.         if i < j:
#.             print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
#. players = ['Alice', 'Bob', 'Charlie']
#. for player1 in players:
#.     for player2 in players:
#.         if player1 != player2:
#.             print(f'{player1} vs {player2}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise.text
#.     players = ["Alice", "Bob", "Charlie"]
msgid "code_bits.players"
msgstr "players"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.present"
msgstr "present"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
#. def total_cost(cart, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         result += price
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.price"
msgstr "price"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
#. def total_cost(cart, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         result += price
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     prices = {'apple': 2, 'apple': 3}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.prices"
msgstr "prices"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text
#.     assert_equal(print_board([...]), "...")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.one_way_to_print_board
#. def print_board(board):
#.     for row in board:
#.         print("".join(row))
#. print_board([
#.     ['X', 'O', 'X'],
#.     [' ', 'O', 'O'],
#.     [' ', 'X', ' ']
#. ])
msgid "code_bits.print_board"
msgstr "print_board"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.print_draw"
msgstr "print_draw"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.print_twice_call_print_many
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_birdseye
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_pythontutor
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_snoop
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_many
#. def print_many(thing, n):
#.     for _ in range(n):
#.         print(thing)
#. print_many("Hello", 3)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. print_many(3, "Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters.text
#.     def print_many(n, thing):
msgid "code_bits.print_many"
msgstr "print_many"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.print_twice_call_print_many
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_birdseye
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_pythontutor
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_snoop
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
#. def print_twice(x):
#.     print(x)
#.     print(x)
msgid "code_bits.print_twice"
msgstr "print_twice"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.print_winner"
msgstr "print_winner"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
#. def print_words(french):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#.     def print_words(french):
#.         ...
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.print_words"
msgstr "print_words"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.print_returns_none
#. things = [1, 2, 3]
#. length = len(things)
#. printed = print(length)
#. print(printed)
msgid "code_bits.printed"
msgstr "printed"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.final_text.text
#.     def quadruple(x):
#.         x = double(x)
#.         x = double(x)
#.         return x
#.     def quadruple(x):
#.         return double(double(x))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
#. def double(x):
#.     return x * 2
#. def quadruple(x):
#.     return double(double(x))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.complete_quadruple_tests
#. def double(x):
#.     return x * 2
#. def quadruple(x):
#.     return double(double(x))
#. assert_equal(quadruple(2), 8)
#. assert_equal(quadruple(5), 20)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.complete_quadruple_tests.text
#.     def double(x):
#.         return x * 2
#.     def quadruple(x):
#.         return double(double(x))
#.     assert_equal(quadruple(2))
#.     assert_equal(quadruple(5))
msgid "code_bits.quadruple"
msgstr "quadruple"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys
#. quantities = {'apple': 1, 'cat': 10}
#. print(quantities.keys())
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys.text
#.     quantities = {'apple': 1, 'cat': 10}
#.     print(quantities)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities.keys():
#.     print(key)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable2
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities:
#.     print(key)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.quantities"
msgstr "quantities"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.quantity"
msgstr "quantity"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
#. def format_board(board):
#.     result = ''
#.     for i in range(len(board)):
#.         for char in board[i]:
#.             result += char
#.         if i != len(board) - 1:
#.             result += '\n'
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
#. def substitute(string, d):
#.     result = ""
#.     for letter in string:
#.         result += d[letter]
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
#. def total_cost(cart, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         result += price
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.result"
msgstr "result"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
#. for left in range(12):
#.     left += 1
#.     for right in range(12):
#.         right += 1
#.         print(f'{left} x {right} = {left * right}')
#.     print('---')
msgid "code_bits.right"
msgstr "right"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
#. def all_equal(row):
#.     return row[0] == row[1] and row[0] == row[2]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow.text
#.     def all_equal(row):
#.         ...
#.     assert_equal(all_equal(["X", "X", "X"]), True)
#.     assert_equal(all_equal(["O", "O", "O"]), True)
#.     assert_equal(all_equal(["X", "O", "X"]), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.final_text.text
#.         return row == [row[0], row[0], row[0]]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.final_text.text
#.         return row[0] == row[1] == row[2]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.final_text.text
#.     def all_equal(row):
#.         return row[0] == row[1] and row[0] == row[2]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         all_equal = True
#.         piece = board[0][col]
#.         for row in board:
#.             if row[col] == ' ' or row[col] != piece:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
#. def row_winner(board):
#.     for row in board:
#.         all_equal = True
#.         piece = row[0]
#.         for entry in row:
#.             if entry == ' ' or piece != entry:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     board.append(row.copy())
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         board = []
#.         for _ in range(size):
#.             row = []
#.             for _ in range(size):
#.                 row.append(' ')
#.             board.append(row)
#.         return board
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
#. def make_board(size):
#.     board = []
#.     for _ in range(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board.append(row)
#.     return board
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#.     board = [row, row, row]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#.     row[0] = 'X'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.naive_make_board
#. def make_board(size):
#.     row = []
#.     for _ in range(size):
#.         row.append(' ')
#.     board = []
#.     for _ in range(size):
#.         board.append(row)
#.     return board
#. def test():
#.     board = make_board(3)
#.     assert_equal(board, [
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#.     board[0][0] = 'X'
#.     assert_equal(board, [
#.         ['X', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#. test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
#. def play_move(board, player):
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     row = board[1]
#.     row[0] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_two_lines
#. def play_move(board, player):
#.     row = board[1]
#.     row[0] = player
#. def play_game():
#.     board = [
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.     ]
#.     play_move(board, "X")
#.     print(board)
#. play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
#. def format_board(board):
#.     joined_rows = []
#.     for row in board:
#.         joined_rows.append("|".join(row))
#.     lines = []
#.     for _ in board[0]:
#.         lines.append("-")
#.     line = f'\n{"+".join(lines)}\n'
#.     return line.join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.one_way_to_print_board
#. def print_board(board):
#.     for row in board:
#.         print("".join(row))
#. print_board([
#.     ['X', 'O', 'X'],
#.     [' ', 'O', 'O'],
#.     [' ', 'X', ' ']
#. ])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.row"
msgstr "row"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
#. def row_winner(board):
#.     for row in board:
#.         all_equal = True
#.         piece = row[0]
#.         for entry in row:
#.             if entry == ' ' or piece != entry:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner.text
#.     def row_winner(board):
#.         ...
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['A', 'A', 'B', 'A'],
#.                 [' ', ' ', ' ', ' '],
#.                 ['A', ' ', ' ', 'A'],
#.                 ['B', ' ', 'B', 'A']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'X'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.row_winner"
msgstr "row_winner"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.rows"
msgstr "rows"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
#. def say_hello(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
#. def say_hello(person_name):
#.     print(f"Hello {person_name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
msgid "code_bits.say_hello"
msgstr "say_hello"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.final_text.text
#.     sentence = 'Hello World'
#.     excited = True
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#.     sentence = new_sentence
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char + '!'
#.     sentence = new_sentence
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
#. sentence = 'HELLO THERE'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.     else:
#.         char = char.lower()
#.     new_sentence += char
#.     upper = False
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
#. sentence = 'Hello there'
#. excited = True
#. if excited:
#.     char = '!'
#. else:
#.     char = '.'
#. sentence += char
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.if_upper_else_lower
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     sentence = sentence.upper()
#. else:
#.     sentence = sentence.lower()
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.if_upper_else_lower_false
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     sentence = sentence.upper()
#. else:
#.     sentence = sentence.lower()
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
#. sentence = 'One more exercise, and then you can relax.'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.         upper = False
#.     else:
#.         char = char.lower()
#.         upper = True
#.     new_sentence += char
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     char = '!'
#. sentence += char
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char.text
#.     sentence = 'Hello World'
#.     excited = True
#.     if excited:
#.         char = '!'
#.     sentence += char
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise
#. sentence = 'Hello'
#. excited = True
#. confused = True
#. if excited:
#.     sentence += '!'
#. if confused:
#.     sentence += '?'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise.text
#.     sentence = 'Hello World'
#.     excited = False
#.     confused = True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_example
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     sentence += '!'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_false_example
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     sentence += '!'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.brokn_kyboard
#. sentence = 'The e key on my keyboard is broken'
#. new_sentence = ''
#. for c in sentence:
#.     if c != 'e':
#.         new_sentence += c
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. word = 'Goodbye'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.text
#.     word = 'Goodbye'
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_lower_upper
#. sentence = "Python rocks!"
#. new_sentence = sentence.upper()
#. print(sentence)
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
#. sentence = 'Hello there'
#. include = True
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = False
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
#. sentence = 'Hello World'
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop
#. sentence = 'Hello World'
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. print(new_sentence)
msgid "code_bits.sentence"
msgstr "sentence"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. print(total)
msgid "code_bits.separator"
msgstr "separator"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
#. def surround(string, sides):
#.     return sides + string + sides
#. def alert(string, level):
#.     string = surround(string, ' ')
#.     for _ in range(level):
#.         string = surround(string, '!')
#.     return string
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
#. def surround(string, sides):
#.     return sides + string + sides
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     def surround(string, sides):
msgid "code_bits.sides"
msgstr "sides"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
#. size = 3
#. for i in range(size):
#.     length = size - i
#.     line = ''
#.     for _ in range(length):
#.         line += '+'
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.text
#.     size = 5
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         board = []
#.         for _ in range(size):
#.             row = []
#.             for _ in range(size):
#.                 row.append(' ')
#.             board.append(row)
#.         return board
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
#. def make_board(size):
#.     board = []
#.     for _ in range(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board.append(row)
#.     return board
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.naive_make_board
#. def make_board(size):
#.     row = []
#.     for _ in range(size):
#.         row.append(' ')
#.     board = []
#.     for _ in range(size):
#.         board.append(row)
#.     return board
#. def test():
#.     board = make_board(3)
#.     assert_equal(board, [
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#.     board[0][0] = 'X'
#.     assert_equal(board, [
#.         ['X', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#. test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.size"
msgstr "size"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithPythonTutor.steps.run_with_python_tutor
#. all_numbers = [2, 4, 8, 1, 9, 7]
#. small_numbers = []
#. big_numbers = []
#. for number in all_numbers:
#.     if number <= 5:
#.         small_numbers.append(number)
#.     else:
#.         big_numbers.append(number)
#. print(small_numbers)
#. print(big_numbers)
msgid "code_bits.small_numbers"
msgstr "small_numbers"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers.text
#.     some_list += [element]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers.text
#.     some_list.append(element)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.index_predict_exercise.text
#.     some_list.index(value)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_predict_exercise.text
#.     some_list.pop(index)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_predict_exercise.text
#.     some_list.remove(value)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_predict.text
#.     some_list[index] = new_value
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_predict_exercise.text
#.     some_list.count(value)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.in_predict_exercise.text
#.     value in some_list
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sorted_predict_exercise.text
#.     sorted(some_list)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_predict_exercise.text
#.     sum(some_list)
msgid "code_bits.some_list"
msgstr "some_list"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
#. name = 'World'
#. spaces = ''
#. for char in name:
#.     print(spaces + char)
#.     spaces += ' '
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
#. name = 'World'
#. line = '+' + name + '+'
#. spaces = ''
#. for _ in name:
#.     spaces += ' '
#. print(line)
#. for char in name:
#.     print(char + spaces + char)
#. print(line)
msgid "code_bits.spaces"
msgstr "spaces"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting.text
#.     string = strings[1]
#.     print(string[0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. string = strings[1]
#. print(string[0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. for i in range(len(strings[0])):
#.     line = ""
#.     for string in strings:
#.         line += string[i]
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.discovering_newline
#. string
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
#. def surround(string, sides):
#.     return sides + string + sides
#. def alert(string, level):
#.     string = surround(string, ' ')
#.     for _ in range(level):
#.         string = surround(string, '!')
#.     return string
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     def alert(string, level):
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
#. def surround(string, sides):
#.     return sides + string + sides
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     def surround(string, sides):
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
#. def substitute(string, d):
#.     result = ""
#.     for letter in string:
#.         result += d[letter]
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#.     def substitute(string, d):
#.         ...
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G':
#. 'C'}), expected)
msgid "code_bits.string"
msgstr "string"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
#. string1 = 'Hello'
#. string2 = 'World'
#. for i in range(len(string1)):
#.     char1 = string1[i]
#.     char2 = string2[i]
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.text
#.     for i in range(len(string1)):
#.         char1 = string1[i]
#.         char2 = string2[i]
#.         print(char1 + ' ' + char2)
msgid "code_bits.string1"
msgstr "string1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
#. string1 = 'Hello'
#. string2 = 'World'
#. for i in range(len(string1)):
#.     char1 = string1[i]
#.     char2 = string2[i]
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.text
#.     for i in range(len(string1)):
#.         char1 = string1[i]
#.         char2 = string2[i]
#.         print(char1 + ' ' + char2)
msgid "code_bits.string2"
msgstr "string2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting
#. strings = ["abc", "def", "ghi"]
#. print(strings[1][0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting.text
#.     print(strings[1][0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting.text
#.     string = strings[1]
#.     print(string[0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
#. strings = ['abc', 'de', 'fghi', 'jklmn', 'o']
#. print(strings[-2][-1])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.final_text.text
#.     strings[1].append("today?")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. string = strings[1]
#. print(string[0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
#. strings = [['hello', 'there'], ['how', 'are', 'you']]
#. print(strings[1][2][0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. for i in range(len(strings[0])):
#.     line = ""
#.     for string in strings:
#.         line += string[i]
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.strings"
msgstr "strings"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_loop_python_tutor
#. numbers = [[1, 2, 3], [4, 5], [6], []]
#. for sublist in numbers:
#.     for num in sublist:
#.         print(num)
#.     print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example
#. numbers = [[1, 2, 3], [4, 5], [6], []]
#. for sublist in numbers:
#.     for num in sublist:
#.         print(num)
#.     print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.text
#.     for sublist in numbers:
#.         for num in sublist:
#.             print(num)
#.         print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.sublist"
msgstr "sublist"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
#. def substitute(string, d):
#.     result = ""
#.     for letter in string:
#.         result += d[letter]
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#.     def substitute(string, d):
#.         ...
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G':
#. 'C'}), expected)
msgid "code_bits.substitute"
msgstr "substitute"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.sunshine_undefined_check
#. sunshine
msgid "code_bits.sunshine"
msgstr "sunshine"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
#. super_secret_number = 7
#. print("What number am I thinking of?")
#. guess = input()
#. if int(guess) == super_secret_number:
#.     print("Amazing! Are you psychic?")
#. else:
#.     print("Nope!")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text
#.     super_secret_number = 7
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.final_text.text
#.     if guess == str(super_secret_number):
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.final_text.text
#.     if int(guess) == super_secret_number:
msgid "code_bits.super_secret_number"
msgstr "super_secret_number"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
#. def surround(string, sides):
#.     return sides + string + sides
#. def alert(string, level):
#.     string = surround(string, ' ')
#.     for _ in range(level):
#.         string = surround(string, '!')
#.     return string
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
#. def surround(string, sides):
#.     return sides + string + sides
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     def surround(string, sides):
msgid "code_bits.surround"
msgstr "surround"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle.text
#.     temp = hello
#.     hello = temp + '!'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle.text
#.     temp = hello + '!'
#.     hello = temp
msgid "code_bits.temp"
msgstr "temp"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.naive_make_board
#. def make_board(size):
#.     row = []
#.     for _ in range(size):
#.         row.append(' ')
#.     board = []
#.     for _ in range(size):
#.         board.append(row)
#.     return board
#. def test():
#.     board = make_board(3)
#.     assert_equal(board, [
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#.     board[0][0] = 'X'
#.     assert_equal(board, [
#.         ['X', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#. test()
msgid "code_bits.test"
msgstr "test"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.print_twice_call_print_many
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_birdseye
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_pythontutor
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_snoop
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_many
#. def print_many(thing, n):
#.     for _ in range(n):
#.         print(thing)
#. print_many("Hello", 3)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. print_many(3, "Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters.text
#.     def print_many(n, thing):
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters.text
#.     thing = "Hello"
#.     n = 3
#.     for _ in range(n):
#.         print(thing)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.             break
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     found = False
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.     print(found)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. print(found)
msgid "code_bits.thing"
msgstr "thing"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.             break
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     found = False
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.     print(found)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. print(found)
msgid "code_bits.thing_to_find"
msgstr "thing_to_find"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.len_of_none
#. things = print([1, 2, 3])
#. length = len(things)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.print_returns_none
#. things = [1, 2, 3]
#. length = len(things)
#. printed = print(length)
#. print(printed)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.can_contain_anything
#. x = 1
#. things = ['Hello', x, x + 3]
#. print(things)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.             break
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     found = False
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.     print(found)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. print(found)
msgid "code_bits.things"
msgstr "things"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.to_find"
msgstr "to_find"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
#. def diagonal_winner(board):
#.     all_equal1 = True
#.     all_equal2 = True
#.     topleft = board[0][0]
#.     topright = board[0][-1]
#.     for i in range(len(board)):
#.         if board[i][i] == ' ' or board[i][i] != topleft:
#.             all_equal1 = False
#.         if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:
#.             all_equal2 = False
#.     return all_equal1 or all_equal2
msgid "code_bits.topleft"
msgstr "topleft"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
#. def diagonal_winner(board):
#.     all_equal1 = True
#.     all_equal2 = True
#.     topleft = board[0][0]
#.     topright = board[0][-1]
#.     for i in range(len(board)):
#.         if board[i][i] == ' ' or board[i][i] != topleft:
#.             all_equal1 = False
#.         if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:
#.             all_equal2 = False
#.     return all_equal1 or all_equal2
msgid "code_bits.topright"
msgstr "topright"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.numbers_sum
#. numbers = [3, 1, 4, 1, 5, 9]
#. total = 0
#. for number in numbers:
#.     total += number
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
#. words = ['This', 'is', 'a', 'list']
#. total = ''
#. for word in words:
#.     total += word
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. print(total)
msgid "code_bits.total"
msgstr "total"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
#. def total_cost(cart, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         result += price
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.total_cost"
msgstr "total_cost"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.translations"
msgstr "translations"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.first_return
#. def double(x):
#.     return x * 2
#. number = 5
#. twice = double(number)
#. print(number)
#. print(twice)
msgid "code_bits.twice"
msgstr "twice"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
#. sentence = 'HELLO THERE'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.     else:
#.         char = char.lower()
#.     new_sentence += char
#.     upper = False
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
#. sentence = 'One more exercise, and then you can relax.'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.         upper = False
#.     else:
#.         char = char.lower()
#.         upper = True
#.     new_sentence += char
#. print(new_sentence)
msgid "code_bits.upper"
msgstr "upper"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.3.text
#.     def valid_image(filename):
#.         return filename.endswith(".png") or filename.endswith(".jpg")
msgid "code_bits.valid_image"
msgstr "valid_image"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.index_predict_exercise.text
#.     some_list.index(value)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_predict_exercise.text
#.     some_list.remove(value)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_predict_exercise.text
#.     some_list.count(value)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.in_predict_exercise.text
#.     value in some_list
msgid "code_bits.value"
msgstr "value"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values.text
#.     if condition:
#.         return value1
#.     else:
#.         return value2
msgid "code_bits.value1"
msgstr "value1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values.text
#.     if condition:
#.         return value1
#.     else:
#.         return value2
msgid "code_bits.value2"
msgstr "value2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example
#. word = 'Amazing'
#. vowels = []
#. consonants = []
#. for letter in word:
#.     if letter.lower() in 'aeiou':
#.         vowels.append(letter)
#.     else:
#.         consonants.append(letter)
#. print(vowels)
#. print(consonants)
msgid "code_bits.vowels"
msgstr "vowels"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.winner"
msgstr "winner"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.winning_line"
msgstr "winning_line"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.methods_of_str
#. word = 'Hello'
#. print(word.upper)
#. print(word.upper())
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.no_append_for_str
#. word = 'Hello'
#. word.append('!')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
#. def print_words(french):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example
#. word = 'Amazing'
#. vowels = []
#. consonants = []
#. for letter in word:
#.     if letter.lower() in 'aeiou':
#.         vowels.append(letter)
#.     else:
#.         consonants.append(letter)
#. print(vowels)
#. print(consonants)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
#. words = ['This', 'is', 'a', 'list']
#. total = ''
#. for word in words:
#.     total += word
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_assign
#. word = 'Hello'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_check
#. word
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. word = 'Goodbye'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.text
#.     word = 'Goodbye'
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.final_text.text
#.     if word.lower() == 'yes':
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_lower_upper.text
#.     word.lower()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.first_print
#. print(word + ' ' + your_name)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.goodbye_plus_name
#. word + ' ' + your_name
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign.text
#.     word = 'Hello'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_assign_goodbye
#. word = 'Goodbye'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name
#. word + your_name
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name_with_space
#. word + ' ' + your_name
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.WritingPrograms.steps.editor_hello_world
#. word = 'Hello'
#. name = 'World'
#. print(word + ' ' + name)
#. word = 'Goodbye'
#. print(word + ' ' + name)
msgid "code_bits.word"
msgstr "word"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words
#. words = ['Python']
#. for index in range(len(words)):
#.     print(index)
#.     print(words[index])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words.text
#.     [0, 1, 2, ..., len(words) - 2, len(words) - 1]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
#. words = ['Python']
#. print(words[len(words) - 1])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
#. words = ['This', 'is', 'a', 'list']
#. total = ''
#. for word in words:
#.     total += word
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. print(total)
msgid "code_bits.words"
msgstr "words"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     first = x1
#.     if x2 < first:
#.         first = x2
#.     if x3 < first:
#.         first = x3
#.     print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     if x1 < x2:
#.         if x1 < x3:
#.             first = x1
#.         else:
#.             first = x3
#.     else:
#.         if x2 < x3:
#.             first = x2
#.         else:
#.             first = x3
#.     print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise
#. x1 = 1
#. x2 = 2
#. x3 = 3
#. if x1 < x2:
#.     if x1 < x3:
#.         first = x1
#.     else:
#.         first = x3
#. else:
#.     if x2 < x3:
#.         first = x2
#.     else:
#.         first = x3
#. print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise.text
#.     x1 = 30
#.     x2 = 10
#.     x3 = 20
msgid "code_bits.x1"
msgstr "x1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     first = x1
#.     if x2 < first:
#.         first = x2
#.     if x3 < first:
#.         first = x3
#.     print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     if x1 < x2:
#.         if x1 < x3:
#.             first = x1
#.         else:
#.             first = x3
#.     else:
#.         if x2 < x3:
#.             first = x2
#.         else:
#.             first = x3
#.     print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise
#. x1 = 1
#. x2 = 2
#. x3 = 3
#. if x1 < x2:
#.     if x1 < x3:
#.         first = x1
#.     else:
#.         first = x3
#. else:
#.     if x2 < x3:
#.         first = x2
#.     else:
#.         first = x3
#. print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise.text
#.     x1 = 30
#.     x2 = 10
#.     x3 = 20
msgid "code_bits.x2"
msgstr "x2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     first = x1
#.     if x2 < first:
#.         first = x2
#.     if x3 < first:
#.         first = x3
#.     print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     if x1 < x2:
#.         if x1 < x3:
#.             first = x1
#.         else:
#.             first = x3
#.     else:
#.         if x2 < x3:
#.             first = x2
#.         else:
#.             first = x3
#.     print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise
#. x1 = 1
#. x2 = 2
#. x3 = 3
#. if x1 < x2:
#.     if x1 < x3:
#.         first = x1
#.     else:
#.         first = x3
#. else:
#.     if x2 < x3:
#.         first = x2
#.     else:
#.         first = x3
#. print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise.text
#.     x1 = 30
#.     x2 = 10
#.     x3 = 20
msgid "code_bits.x3"
msgstr "x3"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.first_print
#. print(word + ' ' + your_name)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.goodbye_plus_name
#. word + ' ' + your_name
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.hello_plus_name
#. 'Hello ' + your_name
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
#. your_name = 'Alex'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name
#. word + your_name
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name_with_space
#. word + ' ' + your_name
msgid "code_bits.your_name"
msgstr "your_name"

msgid "frontend.are_you_sure"
msgstr "你确定吗？"

msgid "frontend.ask_for_help"
msgstr "请求帮助"

msgid "frontend.assessment"
msgstr "评估"

msgid "frontend.assessment_description"
msgstr "当你运行的代码没有通过当前步骤时，这部分有时会解释出错的原因。"

msgid "frontend.assessment_lint"
msgstr "在你的代码中发现以下通用问题："

msgid "frontend.assessment_passed_tests"
msgstr "好消息是，你的代码通过了 ${num} 个测试！"

msgid "frontend.cancel"
msgstr "取消"

msgid "frontend.chat_on_discord"
msgstr "在 Discord 上聊天"

msgid "frontend.click_for_error_details"
msgstr "点击查看错误详情"

msgid "frontend.click_to_expand"
msgstr "点击展开"

msgid "frontend.contact_directly"
msgstr "另外，你可以直接联系我们："

msgid "frontend.copy_warning"
msgstr ""
"**停止！**\n"
"\n"
"尽量避免复制粘贴代码。如果你自己输入代码，你会学得更好、记得更牢。\n"
"\n"
"当复制是合适的时，会有一个按钮可以点击来简化操作。如果没有按钮，试着自己输入。\n"
"\n"
"话虽如此，我们不会强迫你。如果你真的想复制，可以去做。"

msgid "frontend.copying_solution_not_allowed"
msgstr "不允许从提示/解决方案区域复制！"

msgid "frontend.current_page"
msgstr "（当前）"

msgid "frontend.description"
msgstr "描述"

msgid "frontend.developer_mode"
msgstr "开发者模式"

msgid "frontend.developer_mode_description"
msgstr "启用“反向步骤”和“跳过步骤”按钮。"

msgid "frontend.did_you_mean"
msgstr "你是想说..."

msgid "frontend.error_has_been_reported"
msgstr "错误已被报告。"

msgid "frontend.error_traceback"
msgstr "错误追踪："

msgid "frontend.exercise_requirement"
msgstr "这一步是一个练习。你需要找出什么代码会产生正确的结果。可能有许多不同的正确答案。"

msgid "frontend.exercise_stdin"
msgstr "你的程序需要通过 `input()` 函数接收用户输入。当测试正确性时，会模拟不同的用户输入。"

msgid "frontend.feedback"
msgstr "反馈"

msgid "frontend.feedback_email_placeholder"
msgstr "邮箱（可选）"

msgid "frontend.function_exercise"
msgstr ""
"定义一个函数，开头像这样：\n"
"\n"
"${header}\n"
"\n"
"然后用你的实现填充缩进的主体。\n"
"\n"
"这个函数会用不同的参数调用，以测试它是否通用。你也可以在工作时自己调用这个函数进行测试，但这不会影响评估。"

msgid "frontend.function_exercise_goal"
msgstr "你的函数需要 `${print_or_return}` 正确的结果。"

msgid "frontend.get_another_hint"
msgstr "获取另一个提示"

msgid "frontend.get_hint"
msgstr "获取提示"

msgid "frontend.give_feedback"
msgstr "提供反馈"

msgid "frontend.give_feedback_from_menu"
msgstr "从左上角菜单提供反馈。"

msgid "frontend.give_feedback_instructions"
msgstr ""
"告诉我们你喜欢什么或不喜欢什么！如果你在报告一个错误，请详细描述问题：\n"
"\n"
"- 你在问题发生前做了什么？\n"
"- 有哪些步骤可以重现这个问题？\n"
"- 你观察到发生了什么，以及你期望发生什么？"

msgid "frontend.hidden_solution_instructions"
msgstr ""
"上面是一个示例解决方案，但它是隐藏的。多次点击“显示”按钮，可以逐步显示解决方案。尽量在你认为已经显示足够并且可以自己填补剩余空白时停止。然后在编辑器中输入解决方案并运行。你的解决方案不必与上面的相同。"

msgid "frontend.hints_and_solution"
msgstr "提示和解决方案"

msgid "frontend.hints_progress"
msgstr "显示了 ${numHints} 个中的 ${totalHints} 个提示"

msgid "frontend.internal_error_start"
msgstr "哎呀，出了点问题！ ${maybeErrorReported} 你可以做以下事情："

msgid "frontend.loading_wait"
msgstr "加载中..."

msgid "frontend.login_or_sign_up"
msgstr "登录 / 注册"

msgid "frontend.new"
msgstr "新建"

msgid "frontend.next"
msgstr "下一步"

msgid "frontend.no"
msgstr "不"

msgid "frontend.no_hints_available"
msgstr "这一步没有任何提示。尝试再次阅读说明和要求。如果你真的卡住了，仍然可以查看解决方案。"

msgid "frontend.no_input_variables"
msgstr "这个练习没有输入变量。"

msgid "frontend.non_function_exercise"
msgstr ""
"你的代码 *必须* 以给输入变量赋值开始，例如：\n"
"\n"
"${inputs}\n"
"\n"
"这些值只是示例，你可以选择不同的值。你的代码将自动使用不同的值进行测试，以检查它是否通用。"

msgid "frontend.ok"
msgstr "好的"

msgid "frontend.open_github_issue"
msgstr "在 GitHub 上打开一个问题"

msgid "frontend.output_prediction_correct"
msgstr "正确！"

msgid "frontend.output_prediction_error_choice"
msgstr "错误"

msgid "frontend.output_prediction_question"
msgstr "你认为结果会是什么？"

msgid "frontend.output_prediction_wrong_once"
msgstr "哎呀，那不对。你可以再试一次！"

msgid "frontend.output_prediction_wrong_twice"
msgstr "对不起，答案错误。下次再试吧！"

msgid "frontend.parsons_solution_instructions"
msgstr ""
"上面是一个示例解决方案，行的顺序是错的。你可以拖动它们来重新排序。找到正确的顺序由你来决定，我们不会告诉你是否正确。在编辑器中实验并运行部分解决方案可能会帮助你找出正确的顺序。你仍然需要在编辑器中输入一个正确的解决方案并运行它，以便继续。"

msgid "frontend.previous"
msgstr "上一页"

msgid "frontend.program_in_text"
msgstr "你需要运行的确切代码在上面的文本中显示，完整无缺。"

msgid "frontend.question_wizard"
msgstr "问题向导"

msgid "frontend.question_wizard_expected_output"
msgstr ""
"好的，现在在下面输入你期望/想要的程序输出。如果它正常工作，它会显示什么？如果不应该输出任何内容，那么在你的代码中添加一些 `print()` 调用，以便输出一些有用的内容。\n"
"\n"
"完成后，再次点击“运行”以生成你的问题。"

msgid "frontend.question_wizard_intro"
msgstr ""
"如果你需要帮助，有很多网站，比如 [Stack Overflow](https://stackoverflow.com/) 和 [reddit](https://www.reddit.com/r/learnpython/)，你可以在上面提问。这是一个帮助你写出高质量问题的工具，能够获得答案的可能性更大。\n"
"\n"
"在右侧输入并运行你的代码。如果你没有任何代码，因为你不知道从哪里开始，我恐怕这个工具无法帮助你。你仍然可以寻求帮助，但最好先阅读 [我应该避免问什么类型的问题？](https://stackoverflow.com/help/dont-ask)\n"
"\n"
"如果你的问题与服务器（例如 Django 或 Flask）、网络请求、数据库或无法在此处导入的包有关，那么这个工具将无法工作。但是，仅仅因为你当前的代码 *涉及* 这些内容，并不意味着你的问题 *就是* 关于这些内容。如果你遇到一般的 Python/编程/逻辑问题，那么请从其他内容中提取出那个问题。使用 Django 的 Python 仍然是 Python。如果你无法做到这一点，请在提问之前阅读 [如何创建一个最小的、可重复的示例](https://stackoverflow.com/help/minimal-reproducible-example)。"

msgid "frontend.refresh_and_try_again"
msgstr "重新加载/刷新页面并重试。"

msgid "frontend.repeated_frames_description"
msgstr "${name} 在第 ${lineno} 行 (${count} 次)"

msgid "frontend.requirements"
msgstr "要求"

msgid "frontend.requirements_description"
msgstr "你需要根据上面的说明运行一些代码。如果这些说明不够清晰，这里有一些额外的说明："

msgid "frontend.reveal"
msgstr "显示"

msgid "frontend.reverse_step"
msgstr "反向步骤"

msgid "frontend.run"
msgstr "运行"

msgid "frontend.send_email_to"
msgstr "发送邮件"

msgid "frontend.settings"
msgstr "设置"

msgid "frontend.show_shuffled_solution"
msgstr "显示打乱的解决方案"

msgid "frontend.show_solution"
msgstr "显示解决方案"

msgid "frontend.show_unscrambled_solution"
msgstr "显示未打乱的解决方案"

msgid "frontend.sign_out"
msgstr "登出"

msgid "frontend.similar_frames_skipped"
msgstr "跳过的相似帧："

msgid "frontend.skip_step"
msgstr "跳过步骤"

msgid "frontend.stop"
msgstr "停止"

msgid "frontend.submit"
msgstr "提交"

msgid "frontend.table_of_contents"
msgstr "目录"

msgid "frontend.title"
msgstr "标题"

msgid "frontend.toc_instructions"
msgstr ""
"下面是课程不同页面的链接。你可以从任何地方开始，按任意顺序进行。每个页面的进度都将被记录。\n"
"\n"
"如果你完全是编程新手，或者有疑问，可以从头开始，每完成一个页面就点击“下一步”。"

msgid "frontend.try_running_code_again"
msgstr "尝试再次运行代码。"

msgid "frontend.try_using_different_browser"
msgstr "尝试使用不同的浏览器。"

msgid "frontend.verbatim"
msgstr ""
"这个步骤只有一个正确答案。你必须运行完全正确的代码，所以请仔细检查你的拼写。只有少数几种细节（例如某些地方的空格）会被忽略，因为它们对程序没有任何影响。"

msgid "frontend.yes"
msgstr "是的"

msgid "chapters.a_bit_more_about_strings.title"
msgstr "关于字符串的更多内容"

msgid "chapters.boolean operators.title"
msgstr "布尔运算符"

msgid "chapters.dictionaries.title"
msgstr "字典"

msgid "chapters.for_loops.title"
msgstr "for 循环"

msgid "chapters.functions.title"
msgstr "函数"

msgid "chapters.if_statements.title"
msgstr "if 语句"

msgid "chapters.lists.title"
msgstr "列表"

msgid "chapters.nested_loops.title"
msgstr "嵌套循环"

msgid "chapters.string_basics.title"
msgstr "字符串基础"

msgid "chapters.the_shell.title"
msgstr "Shell"

msgid "chapters.tic_tac_toe_project.title"
msgstr "井字棋项目"

msgid "chapters.variables.title"
msgstr "变量"

msgid "linting_messages.pyflakes.ImportShadowedByLoopVar.message_format"
msgstr ""
"**导入 `{0}` 被循环变量覆盖**\n"
"\n"
"循环变量 `{0}` 的名称应该更改，因为它重新定义了之前导入的 `{0}` 模块。\n"
"选择一个不同的循环变量以避免此错误。"

msgid "linting_messages.pyflakes.ImportStarNotPermitted.message_format"
msgstr ""
"**使用 `*` 导入不允许**\n"
"\n"
"`from {0} import *` 将模块 `{0}` 中的所有内容导入到当前命名空间。\n"
"这会创建一堆不可见的未知变量。\n"
"这使得阅读和理解代码变得困难，并且很难看出事物的来源。\n"
"\n"
"避免这种导入，而是明确导入你需要的名称。"

msgid "linting_messages.pyflakes.IsLiteral.message_format"
msgstr ""
"**`is` 与字面量比较**\n"
"\n"
"你使用了 `is`/`is not` 运算符与字面量（例如字符串或数字）进行比较。\n"
"你应该使用 `==` / `!=` 运算符。\n"
"\n"
"`is` 运算符检查两个表达式是否引用同一个对象。\n"
"你很少想要使用它们，当然不适用于像字符串和数字这样的基本数据类型。\n"
"在这些情况下，它们有时会看起来有效（例如对于小数字），但在其他情况下又神秘地\n"
"失败。"

msgid "linting_messages.pyflakes.MultiValueRepeatedKeyLiteral.message_format"
msgstr ""
"**字典键 `{0}` 重复且值不同**\n"
"\n"
"字典不能有相同键的多个条目。\n"
"请再次检查你的代码，并将重复的键更改为唯一的。"

msgid "linting_messages.pyflakes.RedefinedWhileUnused.message_format"
msgstr ""
"**未使用时重新定义 `{0}`**\n"
"\n"
"你在第 `{1}` 行定义了 `{0}`，但在使用之前就重新定义了它，\n"
"覆盖了原始定义。\n"
"\n"
"通常情况下，你的函数和类应该有不同的名称。\n"
"确保你使用了你定义的所有内容，例如你调用了你的函数。"

msgid "linting_messages.pyflakes.UnusedImport.message_format"
msgstr ""
"**未使用的导入 `{0}`**\n"
"\n"
"你导入了 `{0}` 但从未使用过。你是否忘记使用它？\n"
"也许你在其位置使用了错误的变量？如果你不需要这个导入，直接将其完全删除。"

msgid "linting_messages.pyflakes.UnusedVariable.message_format"
msgstr ""
"**未使用的变量 `{0}`**\n"
"\n"
"你定义了一个变量 `{0}` 但从未使用过。你是否忘记使用它？\n"
"也许你在其位置使用了错误的变量？如果你不需要它，直接将其完全删除。"

msgid "misc_terms.blank_result"
msgstr "<nothing>"

msgid "misc_terms.case_sensitive"
msgstr ""
"Python 是区分大小写的！这意味着小写字母和大写字母很重要，改变它们会改变程序的含义。字符串 `'hello'` 和 `'Hello'` "
"是不同的，变量名 `word` 和 `Word` 也是。"

msgid "misc_terms.code_should_start_like"
msgstr ""
"你的代码应该像这样开始：\n"
"\n"
"{expected_start}"

msgid "misc_terms.copy_button"
msgstr "复制"

msgid "misc_terms.disallowed_default_label"
msgstr "超过 {max_count} {label}"

msgid "misc_terms.disallowed_default_message"
msgstr "做得好，你找到了一个解决方案！但是，对于这个练习和你的学习，你不允许使用 {label}。"

msgid "misc_terms.expected_mode_birdseye"
msgstr "在编辑器中输入你的代码，点击 `birdseye` 按钮。"

msgid "misc_terms.expected_mode_pythontutor"
msgstr "在编辑器中输入你的代码，点击 Python Tutor 按钮。"

msgid "misc_terms.expected_mode_shell"
msgstr "在 `>>>` 后直接在 shell 中输入你的代码并按 Enter。"

msgid "misc_terms.expected_mode_snoop"
msgstr "在编辑器中输入你的代码，点击 `snoop` 按钮。"

msgid "misc_terms.incorrect_mode"
msgstr "代码是正确的，但你没有按照指示运行它。"

msgid "misc_terms.invalid_inputs"
msgstr "你输入变量的值无效，请尝试使用像示例中的值。"

msgid "misc_terms.must_define_function"
msgstr "你必须定义一个函数 `{function_name}`"

msgid "misc_terms.no_more_test_inputs"
msgstr "没有更多的测试输入 - 解决方案应该已经完成了"

msgid "misc_terms.not_a_function"
msgstr "`{function_name}` 不是一个函数。"

msgid "misc_terms.q_wiz_debugger"
msgstr "很高兴你在使用调试器！自己解决问题是理想的。如果你不能，使用“运行”按钮生成问题。"

msgid "misc_terms.q_wiz_final_message"
msgstr ""
"太好了！这里有一些最后的提示：\n"
"\n"
"- 确保输出显示的是你遇到的问题，而不是其他内容。\n"
"- 将你的代码简化为一个 **最小化** 示例。删除与问题无关的任何代码。\n"
"- 通过 `snoop`、`birdseye` 和 Python Tutor 调试器运行你的代码，以了解它的工作原理。\n"
"- 在线搜索你的问题。\n"
"- 阅读 [如何提出一个好问题？](https://stackoverflow.com/help/how-to-ask)\n"
"\n"
"如果你真的准备好了，将以下内容复制并粘贴到问题网站，\n"
"并用问题的描述替换第一行。\n"
"\n"
"你仍然可以更改你的代码或期望输出，并再次点击运行以重新生成问题。\n"
"\n"
"    __copyable__\n"
"    *解释你正在尝试做什么以及为什么*\n"
"\n"
"    这是我的代码：\n"
"\n"
"{}\n"
"\n"
"    这是结果：\n"
"\n"
"{}\n"
"\n"
"    期望的输出是：\n"
"\n"
"{}"

msgid "misc_terms.q_wiz_input_and_add"
msgstr ""
"并添加\n"
"\n"
"    {list_line}\n"
"\n"
"到你的代码顶部。"

msgid "misc_terms.q_wiz_input_message_start"
msgstr ""
"`input()` 使得询问和回答关于代码的问题变得更加困难。用字符串替换 input 的调用，以便每个人都可以立即运行代码并获得相同的结果。"

msgid "misc_terms.q_wiz_input_replace_with"
msgstr ""
"替换：\n"
"\n"
"{original_lines}\n"
"\n"
"为\n"
"\n"
"{replaced_lines}"

msgid "misc_terms.q_wiz_no_output"
msgstr "你的代码没有输出任何内容。添加一些 `print()` 调用，以便至少输出 *一些* 内容。使用代码向读者准确显示问题所在。"

msgid "misc_terms.q_wiz_same_as_expected_output"
msgstr ""
"你的输出与期望的输出相同！如果你的问题仍然存在，请调整你的代码和/或期望的输出，以便两个输出不匹配。明确说明如果代码按你希望的方式工作，结果会有什么不同。"

msgid "misc_terms.signature_should_be"
msgstr ""
"签名应该是：\n"
"\n"
"    def {function_name}{needed_signature}:\n"
"\n"
"而不是：\n"
"\n"
"    def {function_name}{actual_signature}:"

msgid "misc_terms.string_spaces_differ"
msgstr "检查你的代码中的字符串是否有正确的空格。例如，`'Hello'` 与 `'Hello '` 是不同的，因为后面有一个空格。"

msgid "misc_terms.syntax_error_at_line"
msgstr "在第"

msgid "misc_terms.when_it_should_output"
msgstr "当它应该输出时："

msgid "misc_terms.which_is_correct"
msgstr "哪个是正确的！"

msgid "misc_terms.your_code_outputs"
msgstr "你的代码输出："

msgid "misc_terms.your_code_outputs_given_values"
msgstr ""
"给定这些值：\n"
"\n"
"{given_values}\n"
"\n"
"你的代码输出："

#. Special choice at the end of all output prediction multiple choice
#. questions
msgid "output_predictions.Error"
msgstr "错误"
