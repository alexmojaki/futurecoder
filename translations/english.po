#
msgid ""
msgstr ""
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "chapters.a_bit_more_about_strings.title"
msgstr "A Bit More About Strings"

msgid "chapters.boolean operators.title"
msgstr "Boolean Operators"

msgid "chapters.dictionaries.title"
msgstr "Dictionaries"

msgid "chapters.for_loops.title"
msgstr "For Loops"

msgid "chapters.functions.title"
msgstr "Functions"

msgid "chapters.if_statements.title"
msgstr "If Statements"

msgid "chapters.lists.title"
msgstr "Lists"

msgid "chapters.nested_loops.title"
msgstr "Nested Loops"

msgid "chapters.string_basics.title"
msgstr "String Basics"

msgid "chapters.the_shell.title"
msgstr "The Shell"

msgid "chapters.tic_tac_toe_project.title"
msgstr "Tic Tac Toe Project"

msgid "chapters.variables.title"
msgstr "Variables"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.requirements
#. 
#.     name + " went to " + meal + " with " + friend + '.'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#. 
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
msgid "code_bits.\" went to \""
msgstr "\" went to \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.requirements
#. 
#.     name + " went to " + meal + " with " + friend + '.'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#. 
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
msgid "code_bits.\" with \""
msgstr "\" with \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
#. 
#. name = "Alice"
#. age = 20
#. print("Hello " + name + ". You are " + age + " years old.")
msgid "code_bits.\" years old.\""
msgstr "\" years old.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#. 
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
msgid "code_bits.\"!! Warning !!\""
msgstr "\"!! Warning !!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#. 
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
msgid "code_bits.\"!!!! DANGER !!!!\""
msgstr "\"!!!! DANGER !!!!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#. 
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
msgid "code_bits.\"++more++\""
msgstr "\"++more++\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
#. 
#. name = "Alice"
#. age = 20
#. print("Hello " + name + ". You are " + age + " years old.")
msgid "code_bits.\". You are \""
msgstr "\". You are \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
#. 
#. def invalid_image(filename):
#.     return not (filename.endswith(".png") or filename.endswith(".jpg"))
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#. 
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#. 
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.3.text
#. 
#.     def valid_image(filename):
#.         return filename.endswith(".png") or filename.endswith(".jpg")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#. 
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#. 
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.final_text.text
#. 
#.     def invalid_image(filename):
#.         return not (filename.endswith(".png") or filename.endswith(".jpg"))
#. 
#.     def invalid_image(filename):
#.         return not filename.endswith(".png") and not filename.endswith(".jpg")
msgid "code_bits.\".jpg\""
msgstr "\".jpg\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
#. 
#. def invalid_image(filename):
#.     return not (filename.endswith(".png") or filename.endswith(".jpg"))
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#. 
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#. 
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.3.text
#. 
#.     def valid_image(filename):
#.         return filename.endswith(".png") or filename.endswith(".jpg")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#. 
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#. 
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.final_text.text
#. 
#.     def invalid_image(filename):
#.         return not (filename.endswith(".png") or filename.endswith(".jpg"))
#. 
#.     def invalid_image(filename):
#.         return not filename.endswith(".png") and not filename.endswith(".jpg")
msgid "code_bits.\".png\""
msgstr "\".png\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#. 
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
msgid "code_bits.\"=the same=\""
msgstr "\"=the same=\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.first_nested_loop
#. 
#. for letter in "ABC":
#.     print(letter)
#.     for number in range(4):
#.         print(f'{letter} {number}')
#.     print('---')
msgid "code_bits.\"ABC\""
msgstr "\"ABC\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise.text
#. 
#.     letters = "ABCD"
msgid "code_bits.\"ABCD\""
msgstr "\"ABCD\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
#. 
#. def say_hello(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#. say_hello("Alice")
#. say_hello("Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name.text
#. 
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
#. 
#. def say_hello(person_name):
#.     print(f"Hello {person_name}!")
#.     print("How are you?")
#. 
#. say_hello("Alice")
#. say_hello("Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.define_greet
#. 
#. def greet(name):
#.     print(f"Hello {name}!")
#. 
#. greet("Alice")
#. greet("Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
#. 
#. def greet(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#. greet("Alice")
#. greet("Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
#. 
#. name = "Alice"
#. age = 20
#. print(f'Hello {name}. You are {age} years old.')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
#. 
#. name = "Alice"
#. age = 20
#. print("Hello " + name + ". You are " + age + " years old.")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
#. 
#. name = "Alice"
#. friend = 'Bob'
#. meal = "lunch"
#. print(f"{name} went to {meal} with {friend}.")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#. 
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise.text
#. 
#.     players = ["Alice", "Bob", "Charlie"]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake
#. 
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.requirements
#. 
#.     return name == "Alice" or "Bob"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.requirements
#. 
#.     return name == "Alice" or name == "Bob"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#. 
#.     return name == "Alice" or "Bob"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#. 
#.     return name == "Alice" or name == "Bob"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#. 
#.     (name == "Alice") or ("Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#. 
#.     name == "Alice" or "Bob"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#. 
#.     name == ("Alice" or "Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#. 
#.     return name in ["Alice", "Bob", "Charlie"]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement
#. 
#. def is_friend(name):
#.     return name == "Alice" or name == "Bob"
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.requirements
#. 
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.requirements
#. 
#.     return name == "Alice" or name == "Bob"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.text
#. 
#.     name == "Alice" or name == "Bob"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr
#. 
#. def is_friend(name):
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#. 
#.     if name == "Alice" or name == "Bob":
#.         return True
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#. 
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InputAliceBob
#. 
#. def is_friend(name):
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#.     else:
#.         return False
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InspectWithBirdseye
#. 
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MultiLineExpressions.steps.valid_multiline
#. 
#. name = "Bob"
#. 
#. is_friend = name == "Alice" or \
#.             name == "Bob"
#. print(is_friend)
#. 
#. is_friend = (name == "Alice" or
#.              name == "Bob")
#. print(is_friend)
#. 
#. is_friend = [name == "Alice",
#.              name == "Bob"]
#. print(is_friend)
#. 
#. print(name == "Alice" or
#.       name == "Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_double_quotes_equal
#. 
#. 'Alice' == "Alice"
msgid "code_bits.\"Alice\""
msgstr "\"Alice\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quotes
#. 
#. print("Alice's Diner")
msgid "code_bits.\"Alice's Diner\""
msgstr "\"Alice's Diner\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
#. 
#. super_secret_number = 7
#. print("What number am I thinking of?")
#. guess = input()
#. if int(guess) == super_secret_number:
#.     print("Amazing! Are you psychic?")
#. else:
#.     print("Nope!")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text
#. 
#.     super_secret_number = 7
#. 
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
msgid "code_bits.\"Amazing! Are you psychic?\""
msgstr "\"Amazing! Are you psychic?\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
#. 
#. def say_hello(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#. say_hello("Alice")
#. say_hello("Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name.text
#. 
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
#. 
#. def say_hello(person_name):
#.     print(f"Hello {person_name}!")
#.     print("How are you?")
#. 
#. say_hello("Alice")
#. say_hello("Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.define_greet
#. 
#. def greet(name):
#.     print(f"Hello {name}!")
#. 
#. greet("Alice")
#. greet("Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
#. 
#. def greet(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#. greet("Alice")
#. greet("Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise.text
#. 
#.     players = ["Alice", "Bob", "Charlie"]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake
#. 
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.requirements
#. 
#.     return name == "Alice" or "Bob"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.requirements
#. 
#.     return name == "Alice" or name == "Bob"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#. 
#.     return name == "Alice" or "Bob"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#. 
#.     return name == "Alice" or name == "Bob"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#. 
#.     (name == "Alice") or ("Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#. 
#.     name == "Alice" or "Bob"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#. 
#.     name == ("Alice" or "Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#. 
#.     return name in ["Alice", "Bob", "Charlie"]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement
#. 
#. def is_friend(name):
#.     return name == "Alice" or name == "Bob"
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.requirements
#. 
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.requirements
#. 
#.     return name == "Alice" or name == "Bob"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.text
#. 
#.     name == "Alice" or name == "Bob"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr
#. 
#. def is_friend(name):
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#. 
#.     if name == "Alice" or name == "Bob":
#.         return True
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#. 
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InputAliceBob
#. 
#. def is_friend(name):
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#.     else:
#.         return False
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InspectWithBirdseye
#. 
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MultiLineExpressions.steps.valid_multiline
#. 
#. name = "Bob"
#. 
#. is_friend = name == "Alice" or \
#.             name == "Bob"
#. print(is_friend)
#. 
#. is_friend = (name == "Alice" or
#.              name == "Bob")
#. print(is_friend)
#. 
#. is_friend = [name == "Alice",
#.              name == "Bob"]
#. print(is_friend)
#. 
#. print(name == "Alice" or
#.       name == "Bob")
msgid "code_bits.\"Bob\""
msgstr "\"Bob\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise.text
#. 
#.     players = ["Alice", "Bob", "Charlie"]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake
#. 
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#. 
#.     return name in ["Alice", "Bob", "Charlie"]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement
#. 
#. def is_friend(name):
#.     return name == "Alice" or name == "Bob"
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr
#. 
#. def is_friend(name):
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InputAliceBob
#. 
#. def is_friend(name):
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#.     else:
#.         return False
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InspectWithBirdseye
#. 
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
msgid "code_bits.\"Charlie\""
msgstr "\"Charlie\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#. 
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
msgid "code_bits.\"DANGER\""
msgstr "\"DANGER\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
#. 
#. def print_words(french):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("---")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. 
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
msgid "code_bits.\"English: \""
msgstr "\"English: \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
#. 
#. def print_words(french):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("---")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. 
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
msgid "code_bits.\"French: \""
msgstr "\"French: \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. 
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
msgid "code_bits.\"German: \""
msgstr "\"German: \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
#. 
#. name = "Alice"
#. age = 20
#. print("Hello " + name + ". You are " + age + " years old.")
msgid "code_bits.\"Hello \""
msgstr "\"Hello \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.print_twice_call_print_many
#. 
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. 
#. def print_twice(x):
#.     print_many(2, x)
#. 
#. print_twice("Hello")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_birdseye
#. 
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. 
#. def print_twice(x):
#.     print_many(2, x)
#. 
#. print_twice("Hello")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_pythontutor
#. 
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. 
#. def print_twice(x):
#.     print_many(2, x)
#. 
#. print_twice("Hello")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_snoop
#. 
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. 
#. def print_twice(x):
#.     print_many(2, x)
#. 
#. print_twice("Hello")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_many
#. 
#. def print_many(thing, n):
#.     for _ in range(n):
#.         print(thing)
#. 
#. print_many("Hello", 3)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
#. 
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. 
#. print_many(3, "Hello")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters.text
#. 
#.     thing = "Hello"
#.     n = 3
#.     for _ in range(n):
#.         print(thing)
msgid "code_bits.\"Hello\""
msgstr "\"Hello\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
#. 
#. def say_hello(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#. say_hello("Alice")
#. say_hello("Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name.text
#. 
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
#. 
#. def say_hello(person_name):
#.     print(f"Hello {person_name}!")
#.     print("How are you?")
#. 
#. say_hello("Alice")
#. say_hello("Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
#. 
#. def greet(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#. greet("Alice")
#. greet("Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you.text
#. 
#.     def greet(name):
#.         print(f"Hello {name}!")
#.         print("How are you?")
msgid "code_bits.\"How are you?\""
msgstr "\"How are you?\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#. 
#.     if invalid_image(filename):
#.         print("I can't process " + filename)
msgid "code_bits.\"I can't process \""
msgstr "\"I can't process \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.\"It's a draw!\""
msgstr "\"It's a draw!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
#. 
#. super_secret_number = 7
#. print("What number am I thinking of?")
#. guess = input()
#. if int(guess) == super_secret_number:
#.     print("Amazing! Are you psychic?")
#. else:
#.     print("Nope!")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text
#. 
#.     super_secret_number = 7
#. 
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
msgid "code_bits.\"Nope!\""
msgstr "\"Nope!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal.text
#. 
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
msgid "code_bits.\"OK\""
msgstr "\"OK\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_lower_upper
#. 
#. sentence = "Python rocks!"
#. new_sentence = sentence.upper()
#. print(sentence)
#. print(new_sentence)
msgid "code_bits.\"Python rocks!\""
msgstr "\"Python rocks!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#. 
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
msgid "code_bits.\"Python\""
msgstr "\"Python\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise
#. 
#. print("Special cases aren't special enough to break the rules.")
msgid "code_bits.\"Special cases aren't special enough to break the rules.\""
msgstr "\"Special cases aren't special enough to break the rules.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#. 
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
msgid "code_bits.\"Warning\""
msgstr "\"Warning\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
#. 
#. super_secret_number = 7
#. print("What number am I thinking of?")
#. guess = input()
#. if int(guess) == super_secret_number:
#.     print("Amazing! Are you psychic?")
#. else:
#.     print("Nope!")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text
#. 
#.     super_secret_number = 7
#. 
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
msgid "code_bits.\"What number am I thinking of?\""
msgstr "\"What number am I thinking of?\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#. 
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#. 
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#. 
#.     def play_move(board, player):
#.         ...
#. 
#.     play_game()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#. 
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
#. 
#. def format_board(board):
#.     first_row = ' '
#.     for i in range(len(board)):
#.         first_row += str(i + 1)
#.     joined_rows = [first_row]
#.     for i in range(len(board)):
#.         joined_row = str(i + 1) + ''.join(board[i])
#.         joined_rows.append(joined_row)
#.     return "\n".join(joined_rows)
msgid "code_bits.\"\\n\""
msgstr "\"\\n\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting
#. 
#. strings = ["abc", "def", "ghi"]
#. print(strings[1][0])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise.text
#. 
#.     strings = ["abc", "def", "ghi"]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.text
#. 
#.     strings = ["abc", "def", "ghi"]
msgid "code_bits.\"abc\""
msgstr "\"abc\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#. 
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#. 
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#. 
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#. 
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
msgid "code_bits.\"cat.jpg\""
msgstr "\"cat.jpg\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting
#. 
#. strings = ["abc", "def", "ghi"]
#. print(strings[1][0])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise.text
#. 
#.     strings = ["abc", "def", "ghi"]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.text
#. 
#.     strings = ["abc", "def", "ghi"]
msgid "code_bits.\"def\""
msgstr "\"def\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#. 
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#. 
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#. 
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#. 
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
msgid "code_bits.\"dog.png\""
msgstr "\"dog.png\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting
#. 
#. strings = ["abc", "def", "ghi"]
#. print(strings[1][0])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise.text
#. 
#.     strings = ["abc", "def", "ghi"]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.text
#. 
#.     strings = ["abc", "def", "ghi"]
msgid "code_bits.\"ghi\""
msgstr "\"ghi\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#. 
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#. 
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#. 
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
msgid "code_bits.\"goodbye world\""
msgstr "\"goodbye world\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#. 
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
msgid "code_bits.\"goodbye\""
msgstr "\"goodbye\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#. 
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#. 
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#. 
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
msgid "code_bits.\"hello there\""
msgstr "\"hello there\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#. 
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#. 
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#. 
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
msgid "code_bits.\"hello world\""
msgstr "\"hello world\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#. 
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
msgid "code_bits.\"hello\""
msgstr "\"hello\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#. 
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#. 
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#. 
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
msgid "code_bits.\"how are you\""
msgstr "\"how are you\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#. 
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#. 
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#. 
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#. 
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
msgid "code_bits.\"invoice.pdf\""
msgstr "\"invoice.pdf\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
#. 
#. name = "Alice"
#. friend = 'Bob'
#. meal = "lunch"
#. print(f"{name} went to {meal} with {friend}.")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#. 
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
msgid "code_bits.\"lunch\""
msgstr "\"lunch\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#. 
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
msgid "code_bits.\"more\""
msgstr "\"more\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#. 
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
msgid "code_bits.\"the same\""
msgstr "\"the same\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.final_text.text
#. 
#.     strings[1].append("today?")
msgid "code_bits.\"today?\""
msgstr "\"today?\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers.text
#. 
#.     def format_board(board):
#.         ...
#. 
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         ' 123\n1XOX\n2O  \n3 XO'
#.     )
msgid "code_bits.' 123\\n1XOX\\n2O  \\n3 XO'"
msgstr "' 123\\n1XOX\\n2O  \\n3 XO'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.mutation_string_append
#. 
#. 'Python'.append(' is cool!')
msgid "code_bits.' is cool!'"
msgstr "' is cool!'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.final_text.text
#. 
#.     'hello ' + 'world'
#.     'hello' + ' world'
#.     'hello' + ' ' + 'world'
msgid "code_bits.' world'"
msgstr "' world'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise
#. 
#. print('"Talk is cheap. Show me the code." - Linus Torvalds')
msgid "code_bits.'\"Talk is cheap. Show me the code.\" - Linus Torvalds'"
msgstr "'\"Talk is cheap. Show me the code.\" - Linus Torvalds'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
#. 
#. letters = 'AB'
#. for c1 in letters:
#.     for c2 in letters:
#.         for c3 in letters:
#.             for c4 in letters:
#.                 print(c1 + c2 + c3 + c4)
msgid "code_bits.'AB'"
msgstr "'AB'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example
#. 
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     if char == 'T':
#.         char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     if char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. 
#. print(opposite_dna)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_elif
#. 
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     elif char == 'T':
#.         char = 'A'
#.     elif char == 'G':
#.         char = 'C'
#.     elif char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. 
#. print(opposite_dna)
msgid "code_bits.'AGTAGCGTC'"
msgstr "'AGTAGCGTC'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else
#. 
#. dna = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     else:
#.         if char == 'T':
#.             char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     else:
#.         if char == 'C':
#.             char = 'G'
#.     opposite_dna += char
#. 
#. print(opposite_dna)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. 
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. 
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#. 
#.     def substitute(string, d):
#.         ...
#. 
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}), expected)
msgid "code_bits.'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'"
msgstr "'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
#. 
#. your_name = 'Alex'
msgid "code_bits.'Alex'"
msgstr "'Alex'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
#. 
#. people = ['Alice', 'Bob', 'Charlie']
#. print(f"There are {len(people)} people waiting, the first one's name is {people[0]}.")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#. 
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
#. 
#. players = ['Alice', 'Bob', 'Charlie']
#. for i in range(len(players)):
#.     for j in range(len(players)):
#.         if i < j:
#.             print(f'{players[i]} vs {players[j]}')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text
#. 
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
#. 
#. players = ['Alice', 'Bob', 'Charlie']
#. for player1 in players:
#.     for player2 in players:
#.         if player1 != player2:
#.             print(f'{player1} vs {player2}')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#. 
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_double_quotes_equal
#. 
#. 'Alice' == "Alice"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quotes_apostrophe.text
#. 
#.     name = 'Alice'
msgid "code_bits.'Alice'"
msgstr "'Alice'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example
#. 
#. word = 'Amazing'
#. vowels = []
#. consonants = []
#. for letter in word:
#.     if letter.lower() in 'aeiou':
#.         vowels.append(letter)
#.     else:
#.         consonants.append(letter)
#. print(vowels)
#. print(consonants)
msgid "code_bits.'Amazing'"
msgstr "'Amazing'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
#. 
#. people = ['Alice', 'Bob', 'Charlie']
#. print(f"There are {len(people)} people waiting, the first one's name is {people[0]}.")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
#. 
#. name = "Alice"
#. friend = 'Bob'
#. meal = "lunch"
#. print(f"{name} went to {meal} with {friend}.")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#. 
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#. 
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
#. 
#. players = ['Alice', 'Bob', 'Charlie']
#. for i in range(len(players)):
#.     for j in range(len(players)):
#.         if i < j:
#.             print(f'{players[i]} vs {players[j]}')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text
#. 
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
#. 
#. players = ['Alice', 'Bob', 'Charlie']
#. for player1 in players:
#.     for player2 in players:
#.         if player1 != player2:
#.             print(f'{player1} vs {player2}')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#. 
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
msgid "code_bits.'Bob'"
msgstr "'Bob'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
#. 
#. people = ['Alice', 'Bob', 'Charlie']
#. print(f"There are {len(people)} people waiting, the first one's name is {people[0]}.")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#. 
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
#. 
#. players = ['Alice', 'Bob', 'Charlie']
#. for i in range(len(players)):
#.     for j in range(len(players)):
#.         if i < j:
#.             print(f'{players[i]} vs {players[j]}')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text
#. 
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
#. 
#. players = ['Alice', 'Bob', 'Charlie']
#. for player1 in players:
#.     for player2 in players:
#.         if player1 != player2:
#.             print(f'{player1} vs {player2}')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#. 
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
msgid "code_bits.'Charlie'"
msgstr "'Charlie'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#. 
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text
#. 
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
msgid "code_bits.'Dylan'"
msgstr "'Dylan'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. 
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#. 
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. 
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.'French'"
msgstr "'French'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. 
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#. 
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. 
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.'German'"
msgstr "'German'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
#. 
#. number = '1'
#. for i in range(int(number)):
#.     print('Starting... ' + str(i + 1))
#. print('Go!')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion.text
#. 
#.     number = '3'
#.     for i in range(number):
#.         print('Starting... ' + i + 1)
#.     print('Go!')
msgid "code_bits.'Go!'"
msgstr "'Go!'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. 
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. 
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. 
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#. 
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#. 
#.     print(char1 + ' ' + char2)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
#. 
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. word = 'Goodbye'
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.text
#. 
#.     word = 'Goodbye'
#.     print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_assign_goodbye
#. 
#. word = 'Goodbye'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.WritingPrograms.steps.editor_hello_world
#. 
#. word = 'Hello'
#. name = 'World'
#. print(word + ' ' + name)
#. word = 'Goodbye'
#. print(word + ' ' + name)
msgid "code_bits.'Goodbye'"
msgstr "'Goodbye'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
#. 
#. sentence = 'HELLO THERE'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.     else:
#.         char = char.lower()
#.     new_sentence += char
#.     upper = False
#. 
#. print(new_sentence)
msgid "code_bits.'HELLO THERE'"
msgstr "'HELLO THERE'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.hello_plus_name
#. 
#. 'Hello ' + your_name
msgid "code_bits.'Hello '"
msgstr "'Hello '"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.final_text.text
#. 
#.     sentence = 'Hello World'
#.     excited = True
#. 
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#. 
#.     sentence = new_sentence
#.     print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
#. 
#. sentence = 'Hello World'
#. excited = True
#. 
#. if excited:
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char + '!'
#.     sentence = new_sentence
#. 
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.if_upper_else_lower
#. 
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     sentence = sentence.upper()
#. else:
#.     sentence = sentence.lower()
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.if_upper_else_lower_false
#. 
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     sentence = sentence.upper()
#. else:
#.     sentence = sentence.lower()
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char
#. 
#. sentence = 'Hello World'
#. excited = False
#. 
#. if excited:
#.     char = '!'
#. sentence += char
#. 
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char.text
#. 
#.     sentence = 'Hello World'
#.     excited = True
#. 
#.     if excited:
#.         char = '!'
#.     sentence += char
#. 
#.     print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise.text
#. 
#.     sentence = 'Hello World'
#.     excited = False
#.     confused = True
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_example
#. 
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     sentence += '!'
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_false_example
#. 
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     sentence += '!'
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.five_different_types
#. 
#. print(type('Hello World'))
#. print(type(23))
#. print(type(True))
#. print(type([1, 2, 3]))
#. print(type(4.56))
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
#. 
#. sentence = 'Hello World'
#. 
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. 
#. print(new_sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop
#. 
#. sentence = 'Hello World'
#. 
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. 
#. print(new_sentence)
msgid "code_bits.'Hello World'"
msgstr "'Hello World'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
#. 
#. sentence = 'Hello there'
#. excited = True
#. if excited:
#.     char = '!'
#. else:
#.     char = '.'
#. sentence += char
#. 
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
#. 
#. sentence = 'Hello there'
#. include = True
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = False
#. 
#. print(new_sentence)
msgid "code_bits.'Hello there'"
msgstr "'Hello there'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.hello_plus_equals
#. 
#. hello = 'Hello'
#. print(hello)
#. hello = hello + '!'
#. print(hello)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.methods_of_str
#. 
#. word = 'Hello'
#. print(word.upper)
#. print(word.upper())
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.no_append_for_str
#. 
#. word = 'Hello'
#. word.append('!')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
#. 
#. string1 = 'Hello'
#. string2 = 'World'
#. for i in range(len(string1)):
#.     char1 = string1[i]
#.     char2 = string2[i]
#.     print(char1 + ' ' + char2)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise
#. 
#. sentence = 'Hello'
#. excited = True
#. confused = True
#. if excited:
#.     sentence += '!'
#. if confused:
#.     sentence += '?'
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.can_contain_anything
#. 
#. x = 1
#. things = ['Hello', x, x + 3]
#. print(things)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_assign
#. 
#. word = 'Hello'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
#. 
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. word = 'Goodbye'
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
#. 
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign.text
#. 
#.     word = 'Hello'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.WritingPrograms.steps.editor_hello_world
#. 
#. word = 'Hello'
#. name = 'World'
#. print(word + ' ' + name)
#. word = 'Goodbye'
#. print(word + ' ' + name)
msgid "code_bits.'Hello'"
msgstr "'Hello'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.first_if_else
#. 
#. condition = True
#. if condition:
#.     print('Yes')
#. else:
#.     print('No')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.first_if_else_false
#. 
#. condition = False
#. if condition:
#.     print('Yes')
#. else:
#.     print('No')
msgid "code_bits.'No'"
msgstr "'No'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
#. 
#. sentence = 'One more exercise, and then you can relax.'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.         upper = False
#.     else:
#.         char = char.lower()
#.         upper = True
#.     new_sentence += char
#. 
#. print(new_sentence)
msgid "code_bits.'One more exercise, and then you can relax.'"
msgstr "'One more exercise, and then you can relax.'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words
#. 
#. words = ['Python']
#. for index in range(len(words)):
#.     print(index)
#.     print(words[index])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
#. 
#. words = ['Python']
#. print(words[len(words) - 1])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.mutation_string_append
#. 
#. 'Python'.append(' is cool!')
msgid "code_bits.'Python'"
msgstr "'Python'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
#. 
#. number = '1'
#. for i in range(int(number)):
#.     print('Starting... ' + str(i + 1))
#. print('Go!')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion.text
#. 
#.     number = '3'
#.     for i in range(number):
#.         print('Starting... ' + i + 1)
#.     print('Go!')
msgid "code_bits.'Starting... '"
msgstr "'Starting... '"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. 
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. 
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#. 
#.     def substitute(string, d):
#.         ...
#. 
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}), expected)
msgid "code_bits.'TCATCGCAGGAATCAATGTCCTACCGAATA'"
msgstr "'TCATCGCAGGAATCAATGTCCTACCGAATA'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.brokn_kyboard
#. 
#. sentence = 'The e key on my keyboard is broken'
#. new_sentence = ''
#. for c in sentence:
#.     if c != 'e':
#.         new_sentence += c
#. print(new_sentence)
msgid "code_bits.'The e key on my keyboard is broken'"
msgstr "'The e key on my keyboard is broken'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.first_if_statements
#. 
#. if True:
#.     print('This gets printed')
#. 
#. if False:
#.     print('This does not')
msgid "code_bits.'This does not'"
msgstr "'This does not'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.first_if_statements
#. 
#. if True:
#.     print('This gets printed')
#. 
#. if False:
#.     print('This does not')
msgid "code_bits.'This gets printed'"
msgstr "'This gets printed'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
#. 
#. words = ['This', 'is', 'a', 'list']
#. total = ''
#. for word in words:
#.     total += word
#. 
#. print(total)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. 
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. 
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. 
#. print(total)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. 
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. 
#. print(found)
msgid "code_bits.'This'"
msgstr "'This'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.first_input
#. 
#. print('Type your name, then press Enter:')
#. name = input()
#. print(f'Hello {name}!')
msgid "code_bits.'Type your name, then press Enter:'"
msgstr "'Type your name, then press Enter:'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1
#. 
#. name = 'World'
#. for character in name:
#.     print('---' + character)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1.text
#. 
#.     name = 'World'
#. 
#.     for character in name:
#.         print(character)
#.         print('---')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_2
#. 
#. name = 'World'
#. for _ in name:
#.     print(name)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
#. 
#. name = 'World'
#. line = '-'
#. for char in name:
#.     line = line + char
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
#. 
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
#. 
#. name = 'World'
#. line = '-'
#. for char in name:
#.     print(line)
#.     line = line + char
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
#. 
#. name = 'World'
#. spaces = ''
#. for char in name:
#.     print(spaces + char)
#.     spaces += ' '
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
#. 
#. name = 'World'
#. line = ''
#. for _ in name:
#.     line += '-'
#. line = '+' + line + '+'
#. print(line)
#. print('|' + name + '|')
#. print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
#. 
#. name = 'World'
#. line = '+' + name + '+'
#. spaces = ''
#. for _ in name:
#.     spaces += ' '
#. 
#. print(line)
#. for char in name:
#.     print(char + spaces + char)
#. print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
#. 
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = char + line
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced
#. 
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char + ' '
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced.text
#. 
#.     name = 'World'
#.     line = ''
#.     for char in name:
#.         line = line + char
#.         print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
#. 
#. name = 'World'
#. line = ''
#. for _ in name:
#.     line += '-'
#. print(name)
#. print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
#. 
#. string1 = 'Hello'
#. string2 = 'World'
#. for i in range(len(string1)):
#.     char1 = string1[i]
#.     char2 = string2[i]
#.     print(char1 + ' ' + char2)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. 
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. 
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. 
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#. 
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#. 
#.     print(char1 + ' ' + char2)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.one_indented_line
#. 
#. name = 'World'
#. 
#. for character in name:
#.     print(character)
#. print('---')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.two_indented_lines
#. 
#. name = 'World'
#. 
#. for character in name:
#.     print(character)
#.     print('---')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingForLoops.steps.first_for_loop
#. 
#. name = 'World'
#. for character in name: print(character)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
#. 
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. word = 'Goodbye'
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
#. 
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.WritingPrograms.steps.editor_hello_world
#. 
#. word = 'Hello'
#. name = 'World'
#. print(word + ' ' + name)
#. word = 'Goodbye'
#. print(word + ' ' + name)
msgid "code_bits.'World'"
msgstr "'World'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple.text
#. 
#.     def format_board(board):
#.         ...
#. 
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'XOX\nO  \n XO'
#.     )
msgid "code_bits.'XOX\\nO  \\n XO'"
msgstr "'XOX\\nO  \\n XO'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#. 
#.     def format_board(board):
#.         ...
#. 
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'X|O|X\n-+-+-\nO| | \n-+-+-\n |X|O'
#.     )
msgid "code_bits.'X|O|X\\n-+-+-\\nO| | \\n-+-+-\\n |X|O'"
msgstr "'X|O|X\\n-+-+-\\nO| | \\n-+-+-\\n |X|O'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.first_if_else
#. 
#. condition = True
#. if condition:
#.     print('Yes')
#. else:
#.     print('No')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.first_if_else_false
#. 
#. condition = False
#. if condition:
#.     print('Yes')
#. else:
#.     print('No')
msgid "code_bits.'Yes'"
msgstr "'Yes'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#. 
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
#. 
#. def format_board(board):
#.     result = ''
#.     for i in range(len(board)):
#.         for char in board[i]:
#.             result += char
#.         if i != len(board) - 1:
#.             result += '\n'
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.introducing_newline
#. 
#. len('\n')
msgid "code_bits.'\\n'"
msgstr "'\\n'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#. 
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#. 
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#. 
#.     def play_move(board, player):
#.         ...
#. 
#.     play_game()
msgid "code_bits.'\\nO to play:\\n'"
msgstr "'\\nO to play:\\n'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#. 
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#. 
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#. 
#.     def play_move(board, player):
#.         ...
#. 
#.     play_game()
msgid "code_bits.'\\nX to play:\\n'"
msgstr "'\\nX to play:\\n'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.not_callable
#. 
#. f = 'a string'
#. print(callable(f))
#. f()
msgid "code_bits.'a string'"
msgstr "'a string'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.introducing_equality
#. 
#. print(1 + 2 == 3)
#. print(4 + 5 == 6)
#. print('ab' + 'c' == 'a' + 'bc')
msgid "code_bits.'ab'"
msgstr "'ab'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
#. 
#. strings = ['abc', 'de', 'fghi', 'jklmn', 'o']
#. print(strings[-2][-1])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
#. 
#. strings = ['abc', 'def', 'ghi']
#. string = strings[1]
#. print(string[0])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
#. 
#. strings = ['abc', 'def', 'ghi']
#. for i in range(len(strings[0])):
#.     line = ""
#.     for string in strings:
#.         line += string[i]
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.break_vs_return
#. 
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 break
#. 
#. foo()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function
#. 
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 return letter
#. 
#. foo()
msgid "code_bits.'abc'"
msgstr "'abc'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. 
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. 
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
msgid "code_bits.'abcqwe'"
msgstr "'abcqwe'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example
#. 
#. word = 'Amazing'
#. vowels = []
#. consonants = []
#. for letter in word:
#.     if letter.lower() in 'aeiou':
#.         vowels.append(letter)
#.     else:
#.         consonants.append(letter)
#. print(vowels)
#. print(consonants)
msgid "code_bits.'aeiou'"
msgstr "'aeiou'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#. 
#.     def print_words(french, german):
#.         ...
#. 
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. 
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#. 
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. 
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.'apfel'"
msgstr "'apfel'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#. 
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#. 
#.     def print_words(french):
#.         ...
#. 
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#. 
#.     def print_words(french, german):
#.         ...
#. 
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys
#. 
#. quantities = {'apple': 1, 'cat': 10}
#. print(quantities.keys())
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys.text
#. 
#.     quantities = {'apple': 1, 'cat': 10}
#.     print(quantities)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable
#. 
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities.keys():
#.     print(key)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable2
#. 
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities:
#.     print(key)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. 
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#. 
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. 
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access2
#. 
#. french['apple']
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.first_dict
#. 
#. french = {'apple': 'pomme', 'box': 'boite'}
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#. 
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#. 
#.     prices = {'apple': 2, 'apple': 3}
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#. 
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#. 
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.'apple'"
msgstr "'apple'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
#. 
#. strings = [['hello', 'there'], ['how', 'are', 'you']]
#. print(strings[1][2][0])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
msgid "code_bits.'are'"
msgstr "'are'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.introducing_equality
#. 
#. print(1 + 2 == 3)
#. print(4 + 5 == 6)
#. print('ab' + 'c' == 'a' + 'bc')
msgid "code_bits.'bc'"
msgstr "'bc'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#. 
#.     def print_words(french):
#.         ...
#. 
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#. 
#.     def print_words(french, german):
#.         ...
#. 
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. 
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#. 
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. 
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.first_dict
#. 
#. french = {'apple': 'pomme', 'box': 'boite'}
msgid "code_bits.'boite'"
msgstr "'boite'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#. 
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#. 
#.     def print_words(french):
#.         ...
#. 
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#. 
#.     def print_words(french, german):
#.         ...
#. 
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. 
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#. 
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. 
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access3
#. 
#. french['box']
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.first_dict
#. 
#. french = {'apple': 'pomme', 'box': 'boite'}
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#. 
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#. 
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#. 
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.'box'"
msgstr "'box'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#. 
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys
#. 
#. quantities = {'apple': 1, 'cat': 10}
#. print(quantities.keys())
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys.text
#. 
#.     quantities = {'apple': 1, 'cat': 10}
#.     print(quantities)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable
#. 
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities.keys():
#.     print(key)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable2
#. 
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities:
#.     print(key)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#. 
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#. 
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#. 
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.'cat'"
msgstr "'cat'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
#. 
#. strings = ['abc', 'de', 'fghi', 'jklmn', 'o']
#. print(strings[-2][-1])
msgid "code_bits.'de'"
msgstr "'de'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
#. 
#. strings = ['abc', 'def', 'ghi']
#. string = strings[1]
#. print(string[0])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. 
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. 
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
#. 
#. strings = ['abc', 'def', 'ghi']
#. for i in range(len(strings[0])):
#.     line = ""
#.     for string in strings:
#.         line += string[i]
#.     print(line)
msgid "code_bits.'def'"
msgstr "'def'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#. 
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#. 
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#. 
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#. 
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.'dog'"
msgstr "'dog'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
#. 
#. strings = ['abc', 'de', 'fghi', 'jklmn', 'o']
#. print(strings[-2][-1])
msgid "code_bits.'fghi'"
msgstr "'fghi'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
#. 
#. strings = ['abc', 'def', 'ghi']
#. string = strings[1]
#. print(string[0])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
#. 
#. strings = ['abc', 'def', 'ghi']
#. for i in range(len(strings[0])):
#.     line = ""
#.     for string in strings:
#.         line += string[i]
#.     print(line)
msgid "code_bits.'ghi'"
msgstr "'ghi'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. 
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. 
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
msgid "code_bits.'ghiq'"
msgstr "'ghiq'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.'goodbye world'"
msgstr "'goodbye world'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.'goodbye'"
msgstr "'goodbye'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.final_text.text
#. 
#.     'hello ' + 'world'
#.     'hello' + ' world'
#.     'hello' + ' ' + 'world'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_space
#. 
#. 'hello ' + 'world'
msgid "code_bits.'hello '"
msgstr "'hello '"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.'hello there'"
msgstr "'hello there'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.'hello world'"
msgstr "'hello world'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.final_text.text
#. 
#.     'hello ' + 'world'
#.     'hello' + ' world'
#.     'hello' + ' ' + 'world'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_concat
#. 
#. 'hello' + 'world'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
#. 
#. strings = [['hello', 'there'], ['how', 'are', 'you']]
#. print(strings[1][2][0])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingStrings.steps.hello_string
#. 
#. 'hello'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
msgid "code_bits.'hello'"
msgstr "'hello'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.'how are you'"
msgstr "'how are you'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
#. 
#. strings = [['hello', 'there'], ['how', 'are', 'you']]
#. print(strings[1][2][0])
msgid "code_bits.'how'"
msgstr "'how'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
#. 
#. words = ['This', 'is', 'a', 'list']
#. total = ''
#. for word in words:
#.     total += word
#. 
#. print(total)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. 
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. 
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. 
#. print(total)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. 
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. 
#. print(found)
msgid "code_bits.'is'"
msgstr "'is'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
#. 
#. strings = ['abc', 'de', 'fghi', 'jklmn', 'o']
#. print(strings[-2][-1])
msgid "code_bits.'jklmn'"
msgstr "'jklmn'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#. 
#.     def print_words(french, german):
#.         ...
#. 
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. 
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#. 
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. 
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.'kasten'"
msgstr "'kasten'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters
#. 
#. name = 'kesha'
#. new_name = ''
#. for c in name:
#.     if c == 's':
#.         c = '$'
#.     new_name += c
#. 
#. print(new_name)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters_exercise
#. 
#. name = 'kesha'
#. new_name = ''
#. for c in name:
#.     if c == 'e':
#.         c = '3'
#.     if c == 's':
#.         c = '$'
#.     if c == 'a':
#.         c = '@'
#.     new_name += c
#. 
#. print(new_name)
msgid "code_bits.'kesha'"
msgstr "'kesha'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
#. 
#. words = ['This', 'is', 'a', 'list']
#. total = ''
#. for word in words:
#.     total += word
#. 
#. print(total)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. 
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. 
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. 
#. print(total)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. 
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. 
#. print(found)
msgid "code_bits.'list'"
msgstr "'list'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
#. 
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.'on'"
msgstr "'on'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#. 
#.     def print_words(french):
#.         ...
#. 
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#. 
#.     def print_words(french, german):
#.         ...
#. 
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. 
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#. 
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. 
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access4
#. 
#. french['pomme']
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.first_dict
#. 
#. french = {'apple': 'pomme', 'box': 'boite'}
msgid "code_bits.'pomme'"
msgstr "'pomme'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
#. 
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.'store'"
msgstr "'store'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
#. 
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.'the'"
msgstr "'the'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
#. 
#. strings = [['hello', 'there'], ['how', 'are', 'you']]
#. print(strings[1][2][0])
msgid "code_bits.'there'"
msgstr "'there'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
#. 
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.'to'"
msgstr "'to'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
#. 
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.'way'"
msgstr "'way'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_string_check
#. 
#. 'word'
msgid "code_bits.'word'"
msgstr "'word'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.final_text.text
#. 
#.     'hello ' + 'world'
#.     'hello' + ' world'
#.     'hello' + ' ' + 'world'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_concat
#. 
#. 'hello' + 'world'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_space
#. 
#. 'hello ' + 'world'
msgid "code_bits.'world'"
msgstr "'world'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.final_text.text
#. 
#.     if word.lower() == 'yes':
msgid "code_bits.'yes'"
msgstr "'yes'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
#. 
#. strings = [['hello', 'there'], ['how', 'are', 'you']]
#. print(strings[1][2][0])
msgid "code_bits.'you'"
msgstr "'you'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise.text
#. 
#.     Hello
#.     Hello
msgid "code_bits.Hello"
msgstr "Hello"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.two_separate_lists.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.append_vs_concatenate.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.printing_the_range.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.using_len_first_time.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.one_indented_line.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.two_indented_lines.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.first_input.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.first_birdseye_example.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.first_dict.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotTrueOrTrue.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InputAliceBob.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.naive_make_board.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.run_broken_with_python_tutor.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.double_return_in_one_function.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MultiLineExpressions.steps.valid_multiline.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.modify_list_in_function.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_two_lines.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.introducing_newline.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.one_way_to_print_board.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.brokn_kyboard.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.mutation_string_append.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_count_index.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_in_step.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_lower_upper.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.different_types_look_same.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.five_different_types.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.less_than_has_two_meanings.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.less_than_sorting_strings.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.plus_has_two_meanings.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithPythonTutor.steps.run_with_python_tutor.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.first_print.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_assign_goodbye.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name.text
#. 
#.     __program_indented__
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.WritingPrograms.steps.editor_hello_world.text
#. 
#.     __program_indented__
msgid "code_bits.__program_indented__"
msgstr "__program_indented__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal.text
#. 
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
msgid "code_bits.actual"
msgstr "actual"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
#. 
#. name = "Alice"
#. age = 20
#. print(f'Hello {name}. You are {age} years old.')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
#. 
#. name = "Alice"
#. age = 20
#. print("Hello " + name + ". You are " + age + " years old.")
msgid "code_bits.age"
msgstr "age"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
#. 
#. def surround(string, sides):
#.     return sides + string + sides
#. 
#. def alert(string, level):
#.     string = surround(string, ' ')
#.     for _ in range(level):
#.         string = surround(string, '!')
#.     return string
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#. 
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#. 
#.     def alert(string, level):
msgid "code_bits.alert"
msgstr "alert"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#. 
#.         diagonal1 = all_equal([board[0][0], board[1][1], board[2][2]])
#.         diagonal2 = all_equal([board[2][0], board[1][1], board[0][2]])
#.         return diagonal1 or diagonal2
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
#. 
#. def all_equal(row):
#.     return row[0] == row[1] and row[0] == row[2]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow.text
#. 
#.     def all_equal(row):
#.         ...
#. 
#.     assert_equal(all_equal(["X", "X", "X"]), True)
#.     assert_equal(all_equal(["O", "O", "O"]), True)
#.     assert_equal(all_equal(["X", "O", "X"]), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.final_text.text
#. 
#.     def all_equal(row):
#.         return row[0] == row[1] and row[0] == row[2]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
#. 
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         all_equal = True
#.         piece = board[0][col]
#.         for row in board:
#.             if row[col] == ' ' or row[col] != piece:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
#. 
#. def row_winner(board):
#.     for row in board:
#.         all_equal = True
#.         piece = row[0]
#.         for entry in row:
#.             if entry == ' ' or piece != entry:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
msgid "code_bits.all_equal"
msgstr "all_equal"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
#. 
#. def diagonal_winner(board):
#.     all_equal1 = True
#.     all_equal2 = True
#.     topleft = board[0][0]
#.     topright = board[0][-1]
#.     for i in range(len(board)):
#.         if board[i][i] == ' ' or board[i][i] != topleft:
#.             all_equal1 = False
#.         if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:
#.             all_equal2 = False
#.     return all_equal1 or all_equal2
msgid "code_bits.all_equal1"
msgstr "all_equal1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
#. 
#. def diagonal_winner(board):
#.     all_equal1 = True
#.     all_equal2 = True
#.     topleft = board[0][0]
#.     topright = board[0][-1]
#.     for i in range(len(board)):
#.         if board[i][i] == ' ' or board[i][i] != topleft:
#.             all_equal1 = False
#.         if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:
#.             all_equal2 = False
#.     return all_equal1 or all_equal2
msgid "code_bits.all_equal2"
msgstr "all_equal2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithPythonTutor.steps.run_with_python_tutor
#. 
#. all_numbers = [2, 4, 8, 1, 9, 7]
#. 
#. small_numbers = []
#. big_numbers = []
#. 
#. for number in all_numbers:
#.     if number <= 5:
#.         small_numbers.append(number)
#.     else:
#.         big_numbers.append(number)
#. 
#. print(small_numbers)
#. print(big_numbers)
msgid "code_bits.all_numbers"
msgstr "all_numbers"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority.text
#. 
#.     def diagonal_winner(board):
#.         ...
#. 
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'O', 'X'],
#.                 ['X', 'X', 'O'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         True
#.     )
#. 
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', 'O'],
#.                 ['X', 'O', 'O'],
#.                 ['O', 'X', 'X']
#.             ]
#.         ),
#.         True
#.     )
#. 
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O'],
#.                 ['X', 'X', 'X'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#. 
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise.text
#. 
#.     def is_valid_percentage(x):
#.         if x < 0 or x > 100:
#.             return False
#.         else:
#.             return True
#. 
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow.text
#. 
#.     def all_equal(row):
#.         ...
#. 
#.     assert_equal(all_equal(["X", "X", "X"]), True)
#.     assert_equal(all_equal(["O", "O", "O"]), True)
#.     assert_equal(all_equal(["X", "O", "X"]), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#. 
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#. 
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#. 
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#. 
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake
#. 
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#. 
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement
#. 
#. def is_friend(name):
#.     return name == "Alice" or name == "Bob"
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr
#. 
#. def is_friend(name):
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InputAliceBob
#. 
#. def is_friend(name):
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#.     else:
#.         return False
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InspectWithBirdseye
#. 
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner.text
#. 
#.     def column_winner(board):
#.         ...
#. 
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' '],
#.                 ['X', 'O', ' '],
#.                 ['O', 'X', ' ']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' ', 'X'],
#.                 [' ', 'O', 'X', 'O'],
#.                 ['O', 'O', 'X', 'X'],
#.                 ['O', 'O', 'X', ' ']
#.             ]
#.         ),
#.         True
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner.text
#. 
#.     def diagonal_winner(board):
#.         ...
#. 
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O', 'X'],
#.                 [' ', 'O', 'X', ' '],
#.                 ['X', 'X', ' ', 'X'],
#.                 ['X', ' ', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', ' '],
#.                 ['X', ' ', 'O'],
#.                 [' ', 'O', 'O']
#.             ]
#.         ),
#.         False
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner.text
#. 
#.     def row_winner(board):
#.         ...
#. 
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['A', 'A', 'B', 'A'],
#.                 [' ', ' ', ' ', ' '],
#.                 ['A', ' ', ' ', 'A'],
#.                 ['B', ' ', 'B', 'A']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'X'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#. 
#.     def winner(board):
#.         ...
#. 
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#. 
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#. 
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#. 
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.naive_make_board
#. 
#. def make_board(size):
#.     row = []
#.     for _ in range(size):
#.         row.append(' ')
#.     board = []
#.     for _ in range(size):
#.         board.append(row)
#.     return board
#. 
#. def test():
#.     board = make_board(3)
#.     assert_equal(board, [
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#.     board[0][0] = 'X'
#.     assert_equal(board, [
#.         ['X', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#. 
#. test()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values
#. 
#. def double_numbers(numbers):
#.     for x in numbers:
#.         return x * 2
#. 
#. assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function.text
#. 
#.     def double_numbers(numbers):
#.         doubles = []
#.         for x in numbers:
#.             doubles.append(x * 2)
#.         return doubles
#. 
#.     assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#. 
#.     def format_board(board):
#.         ...
#. 
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'X|O|X\n-+-+-\nO| | \n-+-+-\n |X|O'
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple.text
#. 
#.     def format_board(board):
#.         ...
#. 
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'XOX\nO  \n XO'
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text
#. 
#.     assert_equal(print_board([...]), "...")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text
#. 
#.     def format_board(board):
#.         ...
#.         return ...
#. 
#.     assert_equal(format_board([...]), "...")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#. 
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.complete_quadruple_tests
#. 
#. def double(x):
#.     return x * 2
#. 
#. def quadruple(x):
#.     return double(double(x))
#. 
#. assert_equal(quadruple(2), 8)
#. assert_equal(quadruple(5), 20)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.complete_quadruple_tests.text
#. 
#.     def double(x):
#.         return x * 2
#. 
#.     def quadruple(x):
#.         return double(double(x))
#. 
#.     assert_equal(quadruple(2))
#.     assert_equal(quadruple(5))
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal
#. 
#. def double(x):
#.     return x * 2
#. 
#. assert_equal(double(2), 4)
#. assert_equal(double(5), 10)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal.text
#. 
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.make_tests_fail
#. 
#. def double(x):
#.     return x * 3
#. 
#. assert_equal(double(2), 4)
#. assert_equal(double(5), 10)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#. 
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers.text
#. 
#.     def format_board(board):
#.         ...
#. 
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         ' 123\n1XOX\n2O  \n3 XO'
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. 
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. 
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#. 
#.     def substitute(string, d):
#.         ...
#. 
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}), expected)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#. 
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#. 
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.assert_equal"
msgstr "assert_equal"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
#. 
#. numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. big_numbers = []
#. for number in numbers:
#.     if number > 5:
#.         big_numbers.append(number)
#. print(big_numbers)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy2
#. 
#. numbers = [10, 7, 8, 3, 12, 15]
#. big_numbers = numbers.copy()
#. 
#. for number in numbers:
#.     if number <= 10:
#.         big_numbers.remove(number)
#. print(big_numbers)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_new_list
#. 
#. numbers = [10, 7, 8, 3, 12, 15]
#. big_numbers = []
#. 
#. for number in numbers:
#.     if number > 10:
#.         big_numbers.append(number)
#. print(big_numbers)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithPythonTutor.steps.run_with_python_tutor
#. 
#. all_numbers = [2, 4, 8, 1, 9, 7]
#. 
#. small_numbers = []
#. big_numbers = []
#. 
#. for number in all_numbers:
#.     if number <= 5:
#.         small_numbers.append(number)
#.     else:
#.         big_numbers.append(number)
#. 
#. print(small_numbers)
#. print(big_numbers)
msgid "code_bits.big_numbers"
msgstr "big_numbers"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
#. 
#. def diagonal_winner(board):
#.     middle = board[1][1]
#.     return (
#.             (middle == board[0][0] and middle == board[2][2]) or
#.             (middle == board[0][2] and middle == board[2][0])
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority.text
#. 
#.     board = [
#.         ['X', 'O', 'X'],
#.         ['X', 'X', 'O'],
#.         ['O', 'O', 'X']
#.     ]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority.text
#. 
#.     def diagonal_winner(board):
#.         ...
#. 
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'O', 'X'],
#.                 ['X', 'X', 'O'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         True
#.     )
#. 
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', 'O'],
#.                 ['X', 'O', 'O'],
#.                 ['O', 'X', 'X']
#.             ]
#.         ),
#.         True
#.     )
#. 
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O'],
#.                 ['X', 'X', 'X'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#. 
#.         diagonal1 = all_equal([board[0][0], board[1][1], board[2][2]])
#.         diagonal2 = all_equal([board[2][0], board[1][1], board[0][2]])
#.         return diagonal1 or diagonal2
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#. 
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
#. 
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         all_equal = True
#.         piece = board[0][col]
#.         for row in board:
#.             if row[col] == ' ' or row[col] != piece:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner.text
#. 
#.     def column_winner(board):
#.         ...
#. 
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' '],
#.                 ['X', 'O', ' '],
#.                 ['O', 'X', ' ']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' ', 'X'],
#.                 [' ', 'O', 'X', 'O'],
#.                 ['O', 'O', 'X', 'X'],
#.                 ['O', 'O', 'X', ' ']
#.             ]
#.         ),
#.         True
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
#. 
#. def diagonal_winner(board):
#.     all_equal1 = True
#.     all_equal2 = True
#.     topleft = board[0][0]
#.     topright = board[0][-1]
#.     for i in range(len(board)):
#.         if board[i][i] == ' ' or board[i][i] != topleft:
#.             all_equal1 = False
#.         if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:
#.             all_equal2 = False
#.     return all_equal1 or all_equal2
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner.text
#. 
#.     def diagonal_winner(board):
#.         ...
#. 
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O', 'X'],
#.                 [' ', 'O', 'X', ' '],
#.                 ['X', 'X', ' ', 'X'],
#.                 ['X', ' ', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', ' '],
#.                 ['X', ' ', 'O'],
#.                 [' ', 'O', 'O']
#.             ]
#.         ),
#.         False
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner.text
#. 
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
#. 
#. def row_winner(board):
#.     for row in board:
#.         all_equal = True
#.         piece = row[0]
#.         for entry in row:
#.             if entry == ' ' or piece != entry:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner.text
#. 
#.     board = [
#.         ['A', 'B', 'A', 'A'],
#.         ['B', ' ', ' ', 'A'],
#.         [' ', 'A', 'B', 'B'],
#.         [' ', 'A', 'B', ' ']
#.     ]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner.text
#. 
#.     board = [
#.         ['X', 'O', 'X'],
#.         ['O', ' ', ' '],
#.         [' ', 'X', 'O']
#.     ]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner.text
#. 
#.     def row_winner(board):
#.         ...
#. 
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['A', 'A', 'B', 'A'],
#.                 [' ', ' ', ' ', ' '],
#.                 ['A', ' ', ' ', 'A'],
#.                 ['B', ' ', 'B', 'A']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'X'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. 
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. 
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. 
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. 
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#. 
#.     def winner(board):
#.         ...
#. 
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#. 
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#. 
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#. 
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#. 
#.     board.append(row.copy())
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#. 
#.     def make_board(size):
#.         board = []
#.         for _ in range(size):
#.             row = []
#.             for _ in range(size):
#.                 row.append(' ')
#.             board.append(row)
#.         return board
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#. 
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#. 
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#. 
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#. 
#.     test()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
#. 
#. def make_board(size):
#.     board = []
#.     for _ in range(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board.append(row)
#.     return board
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#. 
#.     board = [row, row, row]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#. 
#.     board[0][0] = 'X'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#. 
#.     board[0][0] = 'X'
#.     board[1][0] = 'X'
#.     board[2][0] = 'X'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#. 
#.     board[1][0] = 'X'
#.     board[2][0] = 'X'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.naive_make_board
#. 
#. def make_board(size):
#.     row = []
#.     for _ in range(size):
#.         row.append(' ')
#.     board = []
#.     for _ in range(size):
#.         board.append(row)
#.     return board
#. 
#. def test():
#.     board = make_board(3)
#.     assert_equal(board, [
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#.     board[0][0] = 'X'
#.     assert_equal(board, [
#.         ['X', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#. 
#. test()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.modify_list_in_function
#. 
#. def play_move(board, player):
#.     board[1] = player
#. 
#. def play_game():
#.     game_board = [" ", " ", " "]
#.     play_move(game_board, "X")
#.     print(game_board)
#. 
#. play_game()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
#. 
#. def play_move(board, player):
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#. 
#.     board[1][0] = player
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#. 
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#. 
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#. 
#.     def play_move(board, player):
#.         ...
#. 
#.     play_game()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#. 
#.     row = board[1]
#.     row[0] = player
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_two_lines
#. 
#. def play_move(board, player):
#.     row = board[1]
#.     row[0] = player
#. 
#. def play_game():
#.     board = [
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.     ]
#.     play_move(board, "X")
#.     print(board)
#. 
#. play_game()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
#. 
#. def format_board(board):
#.     joined_rows = []
#.     for row in board:
#.         joined_rows.append("|".join(row))
#.     lines = []
#.     for _ in board[0]:
#.         lines.append("-")
#.     line = f'\n{"+".join(lines)}\n'
#.     return line.join(joined_rows)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#. 
#.     board = [
#.         ['X', 'O', 'X'],
#.         [' ', 'O', 'O'],
#.         [' ', 'X', ' ']
#.     ]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#. 
#.     def format_board(board):
#.         ...
#. 
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'X|O|X\n-+-+-\nO| | \n-+-+-\n |X|O'
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#. 
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#. 
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
#. 
#. def format_board(board):
#.     result = ''
#.     for i in range(len(board)):
#.         for char in board[i]:
#.             result += char
#.         if i != len(board) - 1:
#.             result += '\n'
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple.text
#. 
#.     def format_board(board):
#.         ...
#. 
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'XOX\nO  \n XO'
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text
#. 
#.     def format_board(board):
#.         ...
#.         return ...
#. 
#.     assert_equal(format_board([...]), "...")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.one_way_to_print_board
#. 
#. def print_board(board):
#.     for row in board:
#.         print("".join(row))
#. 
#. print_board([
#.     ['X', 'O', 'X'],
#.     [' ', 'O', 'O'],
#.     [' ', 'X', ' ']
#. ])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
#. 
#. def format_board(board):
#.     first_row = ' '
#.     for i in range(len(board)):
#.         first_row += str(i + 1)
#.     joined_rows = [first_row]
#.     for i in range(len(board)):
#.         joined_row = str(i + 1) + ''.join(board[i])
#.         joined_rows.append(joined_row)
#.     return "\n".join(joined_rows)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers.text
#. 
#.     def format_board(board):
#.         ...
#. 
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         ' 123\n1XOX\n2O  \n3 XO'
#.     )
msgid "code_bits.board"
msgstr "board"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.board_size"
msgstr "board_size"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
#. 
#. letters = 'AB'
#. for c1 in letters:
#.     for c2 in letters:
#.         for c3 in letters:
#.             for c4 in letters:
#.                 print(c1 + c2 + c3 + c4)
msgid "code_bits.c1"
msgstr "c1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
#. 
#. letters = 'AB'
#. for c1 in letters:
#.     for c2 in letters:
#.         for c3 in letters:
#.             for c4 in letters:
#.                 print(c1 + c2 + c3 + c4)
msgid "code_bits.c2"
msgstr "c2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
#. 
#. letters = 'AB'
#. for c1 in letters:
#.     for c2 in letters:
#.         for c3 in letters:
#.             for c4 in letters:
#.                 print(c1 + c2 + c3 + c4)
msgid "code_bits.c3"
msgstr "c3"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
#. 
#. letters = 'AB'
#. for c1 in letters:
#.     for c2 in letters:
#.         for c3 in letters:
#.             for c4 in letters:
#.                 print(c1 + c2 + c3 + c4)
msgid "code_bits.c4"
msgstr "c4"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
#. 
#. def total_cost(cart, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         result += price
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#. 
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. 
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#. 
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.cart"
msgstr "cart"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
#. 
#. name = 'World'
#. line = '-'
#. for char in name:
#.     line = line + char
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
#. 
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
#. 
#. name = 'World'
#. line = '-'
#. for char in name:
#.     print(line)
#.     line = line + char
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
#. 
#. name = 'World'
#. spaces = ''
#. for char in name:
#.     print(spaces + char)
#.     spaces += ' '
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
#. 
#. name = 'World'
#. line = '+' + name + '+'
#. spaces = ''
#. for _ in name:
#.     spaces += ' '
#. 
#. print(line)
#. for char in name:
#.     print(char + spaces + char)
#. print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
#. 
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = char + line
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced
#. 
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char + ' '
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced.text
#. 
#.     name = 'World'
#.     line = ''
#.     for char in name:
#.         line = line + char
#.         print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined.text
#. 
#.     line += char
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined.text
#. 
#.     line = line + char
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.final_text.text
#. 
#.     sentence = 'Hello World'
#.     excited = True
#. 
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#. 
#.     sentence = new_sentence
#.     print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
#. 
#. sentence = 'Hello World'
#. excited = True
#. 
#. if excited:
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char + '!'
#.     sentence = new_sentence
#. 
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
#. 
#. sentence = 'HELLO THERE'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.     else:
#.         char = char.lower()
#.     new_sentence += char
#.     upper = False
#. 
#. print(new_sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
#. 
#. sentence = 'Hello there'
#. excited = True
#. if excited:
#.     char = '!'
#. else:
#.     char = '.'
#. sentence += char
#. 
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
#. 
#. sentence = 'One more exercise, and then you can relax.'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.         upper = False
#.     else:
#.         char = char.lower()
#.         upper = True
#.     new_sentence += char
#. 
#. print(new_sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char
#. 
#. sentence = 'Hello World'
#. excited = False
#. 
#. if excited:
#.     char = '!'
#. sentence += char
#. 
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char.text
#. 
#.     sentence = 'Hello World'
#.     excited = True
#. 
#.     if excited:
#.         char = '!'
#.     sentence += char
#. 
#.     print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example
#. 
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     if char == 'T':
#.         char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     if char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. 
#. print(opposite_dna)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_elif
#. 
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     elif char == 'T':
#.         char = 'A'
#.     elif char == 'G':
#.         char = 'C'
#.     elif char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. 
#. print(opposite_dna)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_elif.text
#. 
#.     if char == 'A':
#.         char = 'T'
#.     elif char == 'T':
#.         char = 'A'
#.     elif char == 'G':
#.         char = 'C'
#.     elif char == 'C':
#.         char = 'G'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else
#. 
#. dna = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     else:
#.         if char == 'T':
#.             char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     else:
#.         if char == 'C':
#.             char = 'G'
#.     opposite_dna += char
#. 
#. print(opposite_dna)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else.hints.0.text
#. 
#.     if char == 'A':
#.         char = 'T'
#.     if char == 'T':
#.         char = 'A'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else.text
#. 
#.     if char == 'A':
#.         char = 'T'
#.     else:
#.         if char == 'T':
#.             char = 'A'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#. 
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
#. 
#. def format_board(board):
#.     result = ''
#.     for i in range(len(board)):
#.         for char in board[i]:
#.             result += char
#.         if i != len(board) - 1:
#.             result += '\n'
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
#. 
#. sentence = 'Hello there'
#. include = True
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = False
#. 
#. print(new_sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
#. 
#. sentence = 'Hello World'
#. 
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. 
#. print(new_sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop
#. 
#. sentence = 'Hello World'
#. 
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. 
#. print(new_sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. 
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. 
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
msgid "code_bits.char"
msgstr "char"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
#. 
#. string1 = 'Hello'
#. string2 = 'World'
#. for i in range(len(string1)):
#.     char1 = string1[i]
#.     char2 = string2[i]
#.     print(char1 + ' ' + char2)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. 
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. 
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. 
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#. 
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#. 
#.     print(char1 + ' ' + char2)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.1.text
#. 
#.     for i in range(...):
#.         ...
#.         print(char1 + ' ' + char2)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.text
#. 
#.     for i in range(len(string1)):
#.         char1 = string1[i]
#.         char2 = string2[i]
#.         print(char1 + ' ' + char2)
msgid "code_bits.char1"
msgstr "char1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
#. 
#. string1 = 'Hello'
#. string2 = 'World'
#. for i in range(len(string1)):
#.     char1 = string1[i]
#.     char2 = string2[i]
#.     print(char1 + ' ' + char2)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. 
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. 
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. 
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#. 
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#. 
#.     print(char1 + ' ' + char2)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.1.text
#. 
#.     for i in range(...):
#.         ...
#.         print(char1 + ' ' + char2)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.text
#. 
#.     for i in range(len(string1)):
#.         char1 = string1[i]
#.         char2 = string2[i]
#.         print(char1 + ' ' + char2)
msgid "code_bits.char2"
msgstr "char2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1
#. 
#. name = 'World'
#. for character in name:
#.     print('---' + character)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1.text
#. 
#.     name = 'World'
#. 
#.     for character in name:
#.         print(character)
#.         print('---')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.missing_indentation.text
#. 
#.     for character in name:
#.         print(character)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.missing_indentation.text
#. 
#.     for character in name: print(character)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.one_indented_line
#. 
#. name = 'World'
#. 
#. for character in name:
#.     print(character)
#. print('---')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.two_indented_lines
#. 
#. name = 'World'
#. 
#. for character in name:
#.     print(character)
#.     print('---')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingForLoops.steps.first_for_loop
#. 
#. name = 'World'
#. for character in name: print(character)
msgid "code_bits.character"
msgstr "character"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
#. 
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         all_equal = True
#.         piece = board[0][col]
#.         for row in board:
#.             if row[col] == ' ' or row[col] != piece:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. 
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. 
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. 
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. 
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#. 
#.     def winner(board):
#.         ...
#. 
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#. 
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#. 
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#. 
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
#. 
#. def play_move(board, player):
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.col"
msgstr "col"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. 
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. 
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. 
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. 
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#. 
#.     def winner(board):
#.         ...
#. 
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#. 
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#. 
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#. 
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
msgid "code_bits.column"
msgstr "column"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
#. 
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         all_equal = True
#.         piece = board[0][col]
#.         for row in board:
#.             if row[col] == ' ' or row[col] != piece:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner.text
#. 
#.     def column_winner(board):
#.         ...
#. 
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' '],
#.                 ['X', 'O', ' '],
#.                 ['O', 'X', ' ']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' ', 'X'],
#.                 [' ', 'O', 'X', 'O'],
#.                 ['O', 'O', 'X', 'X'],
#.                 ['O', 'O', 'X', ' ']
#.             ]
#.         ),
#.         True
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. 
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. 
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. 
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. 
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#. 
#.     def winner(board):
#.         ...
#. 
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#. 
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#. 
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#. 
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.column_winner"
msgstr "column_winner"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.first_if_else
#. 
#. condition = True
#. if condition:
#.     print('Yes')
#. else:
#.     print('No')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.first_if_else_false
#. 
#. condition = False
#. if condition:
#.     print('Yes')
#. else:
#.     print('No')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.introducing_booleans
#. 
#. condition = True
#. print(condition)
#. condition = False
#. print(condition)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values.text
#. 
#.     if condition:
#.         return value1
#.     else:
#.         return value2
msgid "code_bits.condition"
msgstr "condition"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise
#. 
#. sentence = 'Hello'
#. excited = True
#. confused = True
#. if excited:
#.     sentence += '!'
#. if confused:
#.     sentence += '?'
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise.text
#. 
#.     sentence = 'Hello World'
#.     excited = False
#.     confused = True
msgid "code_bits.confused"
msgstr "confused"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example
#. 
#. word = 'Amazing'
#. vowels = []
#. consonants = []
#. for letter in word:
#.     if letter.lower() in 'aeiou':
#.         vowels.append(letter)
#.     else:
#.         consonants.append(letter)
#. print(vowels)
#. print(consonants)
msgid "code_bits.consonants"
msgstr "consonants"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#. 
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#. 
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#. 
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#. 
#.     test()
msgid "code_bits.cube"
msgstr "cube"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#. 
#.         diagonal1 = all_equal([board[0][0], board[1][1], board[2][2]])
#.         diagonal2 = all_equal([board[2][0], board[1][1], board[0][2]])
#.         return diagonal1 or diagonal2
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. 
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. 
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. 
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. 
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#. 
#.     def winner(board):
#.         ...
#. 
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#. 
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#. 
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#. 
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
msgid "code_bits.diagonal1"
msgstr "diagonal1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#. 
#.         diagonal1 = all_equal([board[0][0], board[1][1], board[2][2]])
#.         diagonal2 = all_equal([board[2][0], board[1][1], board[0][2]])
#.         return diagonal1 or diagonal2
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. 
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. 
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. 
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. 
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#. 
#.     def winner(board):
#.         ...
#. 
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#. 
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#. 
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#. 
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
msgid "code_bits.diagonal2"
msgstr "diagonal2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
#. 
#. def diagonal_winner(board):
#.     middle = board[1][1]
#.     return (
#.             (middle == board[0][0] and middle == board[2][2]) or
#.             (middle == board[0][2] and middle == board[2][0])
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority.text
#. 
#.     def diagonal_winner(board):
#.         ...
#. 
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'O', 'X'],
#.                 ['X', 'X', 'O'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         True
#.     )
#. 
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', 'O'],
#.                 ['X', 'O', 'O'],
#.                 ['O', 'X', 'X']
#.             ]
#.         ),
#.         True
#.     )
#. 
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O'],
#.                 ['X', 'X', 'X'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#. 
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
#. 
#. def diagonal_winner(board):
#.     all_equal1 = True
#.     all_equal2 = True
#.     topleft = board[0][0]
#.     topright = board[0][-1]
#.     for i in range(len(board)):
#.         if board[i][i] == ' ' or board[i][i] != topleft:
#.             all_equal1 = False
#.         if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:
#.             all_equal2 = False
#.     return all_equal1 or all_equal2
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner.text
#. 
#.     def diagonal_winner(board):
#.         ...
#. 
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O', 'X'],
#.                 [' ', 'O', 'X', ' '],
#.                 ['X', 'X', ' ', 'X'],
#.                 ['X', ' ', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', ' '],
#.                 ['X', ' ', 'O'],
#.                 [' ', 'O', 'O']
#.             ]
#.         ),
#.         False
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner.text
#. 
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. 
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. 
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. 
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. 
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#. 
#.     def winner(board):
#.         ...
#. 
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#. 
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#. 
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#. 
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.diagonal_winner"
msgstr "diagonal_winner"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example
#. 
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     if char == 'T':
#.         char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     if char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. 
#. print(opposite_dna)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_elif
#. 
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     elif char == 'T':
#.         char = 'A'
#.     elif char == 'G':
#.         char = 'C'
#.     elif char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. 
#. print(opposite_dna)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else
#. 
#. dna = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     else:
#.         if char == 'T':
#.             char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     else:
#.         if char == 'C':
#.             char = 'G'
#.     opposite_dna += char
#. 
#. print(opposite_dna)
msgid "code_bits.dna"
msgstr "dna"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
#. 
#. numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. double = []
#. for number in numbers:
#.     double += [number * 2]
#. print(double)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.final_text.text
#. 
#.     def quadruple(x):
#.         x = double(x)
#.         x = double(x)
#.         return x
#. 
#.     def quadruple(x):
#.         return double(double(x))
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.first_return
#. 
#. def double(x):
#.     return x * 2
#. 
#. number = 5
#. twice = double(number)
#. print(number)
#. print(twice)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.losing_return_value
#. 
#. def double(x):
#.     return x * 2
#. 
#. number = 5
#. double(number)
#. print(number)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
#. 
#. def double(x):
#.     return x * 2
#. 
#. def quadruple(x):
#.     return double(double(x))
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.complete_quadruple_tests
#. 
#. def double(x):
#.     return x * 2
#. 
#. def quadruple(x):
#.     return double(double(x))
#. 
#. assert_equal(quadruple(2), 8)
#. assert_equal(quadruple(5), 20)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.complete_quadruple_tests.text
#. 
#.     def double(x):
#.         return x * 2
#. 
#.     def quadruple(x):
#.         return double(double(x))
#. 
#.     assert_equal(quadruple(2))
#.     assert_equal(quadruple(5))
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal
#. 
#. def double(x):
#.     return x * 2
#. 
#. assert_equal(double(2), 4)
#. assert_equal(double(5), 10)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.make_tests_fail
#. 
#. def double(x):
#.     return x * 3
#. 
#. assert_equal(double(2), 4)
#. assert_equal(double(5), 10)
msgid "code_bits.double"
msgstr "double"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values
#. 
#. def double_numbers(numbers):
#.     for x in numbers:
#.         return x * 2
#. 
#. assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function.text
#. 
#.     def double_numbers(numbers):
#.         doubles = []
#.         for x in numbers:
#.             doubles.append(x * 2)
#.         return doubles
#. 
#.     assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
msgid "code_bits.double_numbers"
msgstr "double_numbers"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function.text
#. 
#.     def double_numbers(numbers):
#.         doubles = []
#.         for x in numbers:
#.             doubles.append(x * 2)
#.         return doubles
#. 
#.     assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
msgid "code_bits.doubles"
msgstr "doubles"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers.text
#. 
#.     some_list += [element]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers.text
#. 
#.     some_list.append(element)
msgid "code_bits.element"
msgstr "element"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
#. 
#. def row_winner(board):
#.     for row in board:
#.         all_equal = True
#.         piece = row[0]
#.         for entry in row:
#.             if entry == ' ' or piece != entry:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. 
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. 
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. 
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. 
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#. 
#.     def winner(board):
#.         ...
#. 
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#. 
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#. 
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#. 
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
msgid "code_bits.entry"
msgstr "entry"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.final_text.text
#. 
#.     sentence = 'Hello World'
#.     excited = True
#. 
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#. 
#.     sentence = new_sentence
#.     print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
#. 
#. sentence = 'Hello World'
#. excited = True
#. 
#. if excited:
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char + '!'
#.     sentence = new_sentence
#. 
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
#. 
#. sentence = 'Hello there'
#. excited = True
#. if excited:
#.     char = '!'
#. else:
#.     char = '.'
#. sentence += char
#. 
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.if_upper_else_lower
#. 
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     sentence = sentence.upper()
#. else:
#.     sentence = sentence.lower()
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.if_upper_else_lower_false
#. 
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     sentence = sentence.upper()
#. else:
#.     sentence = sentence.lower()
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char
#. 
#. sentence = 'Hello World'
#. excited = False
#. 
#. if excited:
#.     char = '!'
#. sentence += char
#. 
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char.text
#. 
#.     sentence = 'Hello World'
#.     excited = True
#. 
#.     if excited:
#.         char = '!'
#.     sentence += char
#. 
#.     print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise
#. 
#. sentence = 'Hello'
#. excited = True
#. confused = True
#. if excited:
#.     sentence += '!'
#. if confused:
#.     sentence += '?'
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise.text
#. 
#.     sentence = 'Hello World'
#.     excited = False
#.     confused = True
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_example
#. 
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     sentence += '!'
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_false_example
#. 
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     sentence += '!'
#. print(sentence)
msgid "code_bits.excited"
msgstr "excited"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal.text
#. 
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. 
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. 
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#. 
#.     def substitute(string, d):
#.         ...
#. 
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}), expected)
msgid "code_bits.expected"
msgstr "expected"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. 
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#. 
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. 
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.f\"---\""
msgstr "f\"---\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.eval_expr_inside_f_string
#. 
#. f"2 * 3 + 4 is equal to {2 * 3 + 4}"
msgid "code_bits.f\"2 * 3 + 4 is equal to {2 * 3 + 4}\""
msgstr "f\"2 * 3 + 4 is equal to {2 * 3 + 4}\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. 
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#. 
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. 
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.f\"English: {word}\""
msgstr "f\"English: {word}\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal.text
#. 
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
msgid "code_bits.f\"Error! {repr(actual)} != {repr(expected)}\""
msgstr "f\"Error! {repr(actual)} != {repr(expected)}\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
#. 
#. def say_hello(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#. say_hello("Alice")
#. say_hello("Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name.text
#. 
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.define_greet
#. 
#. def greet(name):
#.     print(f"Hello {name}!")
#. 
#. greet("Alice")
#. greet("Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
#. 
#. def greet(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#. greet("Alice")
#. greet("Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you.text
#. 
#.     def greet(name):
#.         print(f"Hello {name}!")
#.         print("How are you?")
msgid "code_bits.f\"Hello {name}!\""
msgstr "f\"Hello {name}!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
#. 
#. def say_hello(person_name):
#.     print(f"Hello {person_name}!")
#.     print("How are you?")
#. 
#. say_hello("Alice")
#. say_hello("Bob")
msgid "code_bits.f\"Hello {person_name}!\""
msgstr "f\"Hello {person_name}!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
#. 
#. people = ['Alice', 'Bob', 'Charlie']
#. print(f"There are {len(people)} people waiting, the first one's name is {people[0]}.")
msgid "code_bits.f\"There are {len(people)} people waiting, the first one's name is {people[0]}.\""
msgstr "f\"There are {len(people)} people waiting, the first one's name is {people[0]}.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. 
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#. 
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. 
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.f\"{language}: {translations[language]}\""
msgstr "f\"{language}: {translations[language]}\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.break_vs_return
#. 
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 break
#. 
#. foo()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function
#. 
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 return letter
#. 
#. foo()
msgid "code_bits.f\"{letter} {number}\""
msgstr "f\"{letter} {number}\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
#. 
#. name = "Alice"
#. friend = 'Bob'
#. meal = "lunch"
#. print(f"{name} went to {meal} with {friend}.")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.requirements
#. 
#.     f"{name} went to {meal} with {friend}."
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#. 
#.     print(f"{name} went to {meal} with {friend}.")
msgid "code_bits.f\"{name} went to {meal} with {friend}.\""
msgstr "f\"{name} went to {meal} with {friend}.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.f'  {\" \".join(str(i + 1) for i in range(size))}\\n{line.join(rows)}'"
msgstr "f'  {\" \".join(str(i + 1) for i in range(size))}\\n{line.join(rows)}'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.first_input
#. 
#. print('Type your name, then press Enter:')
#. name = input()
#. print(f'Hello {name}!')
msgid "code_bits.f'Hello {name}!'"
msgstr "f'Hello {name}!'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
#. 
#. name = "Alice"
#. age = 20
#. print(f'Hello {name}. You are {age} years old.')
msgid "code_bits.f'Hello {name}. You are {age} years old.'"
msgstr "f'Hello {name}. You are {age} years old.'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.f'\\n  {\"+\".join(\"-\" * size)}\\n'"
msgstr "f'\\n  {\"+\".join(\"-\" * size)}\\n'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
#. 
#. def format_board(board):
#.     joined_rows = []
#.     for row in board:
#.         joined_rows.append("|".join(row))
#.     lines = []
#.     for _ in board[0]:
#.         lines.append("-")
#.     line = f'\n{"+".join(lines)}\n'
#.     return line.join(joined_rows)
msgid "code_bits.f'\\n{\"+\".join(lines)}\\n'"
msgstr "f'\\n{\"+\".join(lines)}\\n'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.f'{i + 1} {\"|\".join(row)}'"
msgstr "f'{i + 1} {\"|\".join(row)}'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
#. 
#. for left in range(12):
#.     left += 1
#.     for right in range(12):
#.         right += 1
#.         print(f'{left} x {right} = {left * right}')
#.     print('---')
msgid "code_bits.f'{left} x {right} = {left * right}'"
msgstr "f'{left} x {right} = {left * right}'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.first_nested_loop
#. 
#. for letter in "ABC":
#.     print(letter)
#.     for number in range(4):
#.         print(f'{letter} {number}')
#.     print('---')
msgid "code_bits.f'{letter} {number}'"
msgstr "f'{letter} {number}'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
#. 
#. players = ['Alice', 'Bob', 'Charlie']
#. for player1 in players:
#.     for player2 in players:
#.         if player1 != player2:
#.             print(f'{player1} vs {player2}')
msgid "code_bits.f'{player1} vs {player2}'"
msgstr "f'{player1} vs {player2}'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#. 
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
#. 
#. players = ['Alice', 'Bob', 'Charlie']
#. for i in range(len(players)):
#.     for j in range(len(players)):
#.         if i < j:
#.             print(f'{players[i]} vs {players[j]}')
msgid "code_bits.f'{players[i]} vs {players[j]}'"
msgstr "f'{players[i]} vs {players[j]}'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.f'{player} to play:'"
msgstr "f'{player} to play:'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.f'{player} wins!'"
msgstr "f'{player} wins!'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
#. 
#. def invalid_image(filename):
#.     return not (filename.endswith(".png") or filename.endswith(".jpg"))
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#. 
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#. 
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.3.text
#. 
#.     def valid_image(filename):
#.         return filename.endswith(".png") or filename.endswith(".jpg")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#. 
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#. 
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#. 
#.     if invalid_image(filename):
#.         print("I can't process " + filename)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.final_text.text
#. 
#.     def invalid_image(filename):
#.         return not (filename.endswith(".png") or filename.endswith(".jpg"))
#. 
#.     def invalid_image(filename):
#.         return not filename.endswith(".png") and not filename.endswith(".jpg")
msgid "code_bits.filename"
msgstr "filename"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#. 
#.     first = x1
#. 
#.     if x2 < first:
#.         first = x2
#. 
#.     if x3 < first:
#.         first = x3
#. 
#.     print(first)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#. 
#.     if x1 < x2:
#.         if x1 < x3:
#.             first = x1
#.         else:
#.             first = x3
#.     else:
#.         if x2 < x3:
#.             first = x2
#.         else:
#.             first = x3
#. 
#.     print(first)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise
#. 
#. x1 = 1
#. x2 = 2
#. x3 = 3
#. if x1 < x2:
#.     if x1 < x3:
#.         first = x1
#.     else:
#.         first = x3
#. else:
#.     if x2 < x3:
#.         first = x2
#.     else:
#.         first = x3
#. print(first)
msgid "code_bits.first"
msgstr "first"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#. 
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#. 
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#. 
#.     def play_move(board, player):
#.         ...
#. 
#.     play_game()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
#. 
#. def format_board(board):
#.     first_row = ' '
#.     for i in range(len(board)):
#.         first_row += str(i + 1)
#.     joined_rows = [first_row]
#.     for i in range(len(board)):
#.         joined_row = str(i + 1) + ''.join(board[i])
#.         joined_rows.append(joined_row)
#.     return "\n".join(joined_rows)
msgid "code_bits.first_row"
msgstr "first_row"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.break_vs_return
#. 
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 break
#. 
#. foo()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.double_return_in_one_function
#. 
#. def foo():
#.     return 1
#.     return 2
#. 
#. print(foo())
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function
#. 
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 return letter
#. 
#. foo()
msgid "code_bits.foo"
msgstr "foo"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#. 
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#. 
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#. 
#.     def play_move(board, player):
#.         ...
#. 
#.     play_game()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
#. 
#. def format_board(board):
#.     joined_rows = []
#.     for row in board:
#.         joined_rows.append("|".join(row))
#.     lines = []
#.     for _ in board[0]:
#.         lines.append("-")
#.     line = f'\n{"+".join(lines)}\n'
#.     return line.join(joined_rows)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#. 
#.     def format_board(board):
#.         ...
#. 
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'X|O|X\n-+-+-\nO| | \n-+-+-\n |X|O'
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#. 
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#. 
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
#. 
#. def format_board(board):
#.     result = ''
#.     for i in range(len(board)):
#.         for char in board[i]:
#.             result += char
#.         if i != len(board) - 1:
#.             result += '\n'
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple.text
#. 
#.     def format_board(board):
#.         ...
#. 
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'XOX\nO  \n XO'
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text
#. 
#.     def format_board(board):
#.         ...
#.         return ...
#. 
#.     assert_equal(format_board([...]), "...")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
#. 
#. def format_board(board):
#.     first_row = ' '
#.     for i in range(len(board)):
#.         first_row += str(i + 1)
#.     joined_rows = [first_row]
#.     for i in range(len(board)):
#.         joined_row = str(i + 1) + ''.join(board[i])
#.         joined_rows.append(joined_row)
#.     return "\n".join(joined_rows)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers.text
#. 
#.     def format_board(board):
#.         ...
#. 
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         ' 123\n1XOX\n2O  \n3 XO'
#.     )
msgid "code_bits.format_board"
msgstr "format_board"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#. 
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.             break
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#. 
#.     found = False
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#. 
#.     print(found)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. 
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. 
#. print(found)
msgid "code_bits.found"
msgstr "found"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
#. 
#. def print_words(french):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("---")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#. 
#.     def print_words(french):
#.         ...
#. 
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. 
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#. 
#.     def print_words(french, german):
#.         ...
#. 
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access
#. 
#. french[0]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access2
#. 
#. french['apple']
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access3
#. 
#. french['box']
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access4
#. 
#. french['pomme']
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.first_dict
#. 
#. french = {'apple': 'pomme', 'box': 'boite'}
msgid "code_bits.french"
msgstr "french"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
#. 
#. name = "Alice"
#. friend = 'Bob'
#. meal = "lunch"
#. print(f"{name} went to {meal} with {friend}.")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.requirements
#. 
#.     name + " went to " + meal + " with " + friend + '.'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#. 
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
msgid "code_bits.friend"
msgstr "friend"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.modify_list_in_function
#. 
#. def play_move(board, player):
#.     board[1] = player
#. 
#. def play_game():
#.     game_board = [" ", " ", " "]
#.     play_move(game_board, "X")
#.     print(game_board)
#. 
#. play_game()
msgid "code_bits.game_board"
msgstr "game_board"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. 
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#. 
#.     def print_words(french, german):
#.         ...
#. 
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
msgid "code_bits.german"
msgstr "german"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.grades_example
#. 
#. percentage = 73
#. 
#. if percentage < 40:
#.     grade = 'F'
#. elif percentage < 60:
#.     grade = 'C'
#. elif percentage < 80:
#.     grade = 'B'
#. else:
#.     grade = 'A'
#. 
#. print(grade)
msgid "code_bits.grade"
msgstr "grade"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.define_greet
#. 
#. def greet(name):
#.     print(f"Hello {name}!")
#. 
#. greet("Alice")
#. greet("Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
#. 
#. def greet(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#. greet("Alice")
#. greet("Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you.text
#. 
#.     def greet(name):
#.         print(f"Hello {name}!")
#.         print("How are you?")
msgid "code_bits.greet"
msgstr "greet"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
#. 
#. super_secret_number = 7
#. print("What number am I thinking of?")
#. guess = input()
#. if int(guess) == super_secret_number:
#.     print("Amazing! Are you psychic?")
#. else:
#.     print("Nope!")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text
#. 
#.     super_secret_number = 7
#. 
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.final_text.text
#. 
#.     if guess == str(super_secret_number):
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.final_text.text
#. 
#.     if int(guess) == super_secret_number:
msgid "code_bits.guess"
msgstr "guess"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.hello_plus_equals
#. 
#. hello = 'Hello'
#. print(hello)
#. hello = hello + '!'
#. print(hello)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle.text
#. 
#.     temp = hello
#.     hello = temp + '!'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle.text
#. 
#.     temp = hello + '!'
#.     hello = temp
msgid "code_bits.hello"
msgstr "hello"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
#. 
#. sentence = 'Hello there'
#. include = True
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = False
#. 
#. print(new_sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
#. 
#. sentence = 'Hello World'
#. 
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. 
#. print(new_sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop
#. 
#. sentence = 'Hello World'
#. 
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. 
#. print(new_sentence)
msgid "code_bits.include"
msgstr "include"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_predict_exercise.text
#. 
#.     some_list.pop(index)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_predict.text
#. 
#.     some_list[index] = new_value
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words
#. 
#. words = ['Python']
#. for index in range(len(words)):
#.     print(index)
#.     print(words[index])
msgid "code_bits.index"
msgstr "index"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.indices_out_of_bounds
#. 
#. indices[4]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.printing_the_range
#. 
#. indices = range(4)
#. 
#. print(indices[0])
#. print(indices[1])
#. print(indices[2])
#. print(indices[3])
msgid "code_bits.indices"
msgstr "indices"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.text
#. 
#.     x = ['a', 'b', 'c']
#.     y = (insert_one_line_from_above)
#.     print(y)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.text
#. 
#.     x = ['a', 'b', 'c']
#.     (insert_one_line_from_above)
#.     print(x)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.text
#. 
#.     x = ['a', 'b', 'c']
#.     (insert_one_line_from_above)
#.     print(x)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise.text
#. 
#.     x = [15, 12, -6, 3]
#.     y = (insert_one_line_from_above)
#.     print(y)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.text
#. 
#.     x = [12, -6, 2, -1, 3]
#.     y = (insert_one_line_from_above)
#.     print(y)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.text
#. 
#.     x = 100
#.     y = (insert_one_line_from_above)
#.     print(y)
msgid "code_bits.insert_one_line_from_above"
msgstr "insert_one_line_from_above"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
#. 
#. def invalid_image(filename):
#.     return not (filename.endswith(".png") or filename.endswith(".jpg"))
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#. 
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#. 
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#. 
#.     if invalid_image(filename):
#.         print("I can't process " + filename)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.final_text.text
#. 
#.     def invalid_image(filename):
#.         return not (filename.endswith(".png") or filename.endswith(".jpg"))
#. 
#.     def invalid_image(filename):
#.         return not filename.endswith(".png") and not filename.endswith(".jpg")
msgid "code_bits.invalid_image"
msgstr "invalid_image"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake
#. 
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement
#. 
#. def is_friend(name):
#.     return name == "Alice" or name == "Bob"
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr
#. 
#. def is_friend(name):
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InputAliceBob
#. 
#. def is_friend(name):
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#.     else:
#.         return False
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InspectWithBirdseye
#. 
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MultiLineExpressions.steps.valid_multiline
#. 
#. name = "Bob"
#. 
#. is_friend = name == "Alice" or \
#.             name == "Bob"
#. print(is_friend)
#. 
#. is_friend = (name == "Alice" or
#.              name == "Bob")
#. print(is_friend)
#. 
#. is_friend = [name == "Alice",
#.              name == "Bob"]
#. print(is_friend)
#. 
#. print(name == "Alice" or
#.       name == "Bob")
msgid "code_bits.is_friend"
msgstr "is_friend"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise
#. 
#. def is_valid_percentage(x):
#.     if 0 <= x and x <= 100:
#.         return True
#.     else:
#.         return False
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise.text
#. 
#.     def is_valid_percentage(x):
#.         if x < 0 or x > 100:
#.             return False
#.         else:
#.             return True
#. 
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow.text
#. 
#.     def is_valid_percentage(x):
#.         if 0 <= x and x <= 100:
#.             return True
#.         else:
#.             return False
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow.text
#. 
#.     def is_valid_percentage(x):
#.         return 0 <= x <= 100
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow.text
#. 
#.     def is_valid_percentage(x):
#.         return 0 <= x and x <= 100
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
#. 
#. def is_valid_percentage(x):
#.     if x < 0 or x > 100:
#.         return False
#.     else:
#.         return True
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#. 
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
msgid "code_bits.is_valid_percentage"
msgstr "is_valid_percentage"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. 
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#. 
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
#. 
#. def total_cost(cart, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         result += price
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#. 
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. 
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#. 
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.item"
msgstr "item"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#. 
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#. 
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#. 
#.     def play_move(board, player):
#.         ...
#. 
#.     play_game()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
#. 
#. def format_board(board):
#.     first_row = ' '
#.     for i in range(len(board)):
#.         first_row += str(i + 1)
#.     joined_rows = [first_row]
#.     for i in range(len(board)):
#.         joined_row = str(i + 1) + ''.join(board[i])
#.         joined_rows.append(joined_row)
#.     return "\n".join(joined_rows)
msgid "code_bits.joined_row"
msgstr "joined_row"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#. 
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#. 
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#. 
#.     def play_move(board, player):
#.         ...
#. 
#.     play_game()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
#. 
#. def format_board(board):
#.     joined_rows = []
#.     for row in board:
#.         joined_rows.append("|".join(row))
#.     lines = []
#.     for _ in board[0]:
#.         lines.append("-")
#.     line = f'\n{"+".join(lines)}\n'
#.     return line.join(joined_rows)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#. 
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
#. 
#. def format_board(board):
#.     first_row = ' '
#.     for i in range(len(board)):
#.         first_row += str(i + 1)
#.     joined_rows = [first_row]
#.     for i in range(len(board)):
#.         joined_row = str(i + 1) + ''.join(board[i])
#.         joined_rows.append(joined_row)
#.     return "\n".join(joined_rows)
msgid "code_bits.joined_rows"
msgstr "joined_rows"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable
#. 
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities.keys():
#.     print(key)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable2
#. 
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities:
#.     print(key)
msgid "code_bits.key"
msgstr "key"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. 
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#. 
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. 
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.language"
msgstr "language"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
#. 
#. for left in range(12):
#.     left += 1
#.     for right in range(12):
#.         right += 1
#.         print(f'{left} x {right} = {left * right}')
#.     print('---')
msgid "code_bits.left"
msgstr "left"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.len_of_none
#. 
#. things = print([1, 2, 3])
#. length = len(things)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.print_returns_none
#. 
#. things = [1, 2, 3]
#. length = len(things)
#. printed = print(length)
#. print(printed)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. 
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. 
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. 
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#. 
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#. 
#.     print(char1 + ' ' + char2)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
#. 
#. size = 3
#. for i in range(size):
#.     length = size - i
#.     line = ''
#.     for _ in range(length):
#.         line += '+'
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. 
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. 
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
msgid "code_bits.length"
msgstr "length"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. 
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. 
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. 
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#. 
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#. 
#.     print(char1 + ' ' + char2)
msgid "code_bits.length1"
msgstr "length1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. 
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. 
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. 
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#. 
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#. 
#.     print(char1 + ' ' + char2)
msgid "code_bits.length2"
msgstr "length2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. 
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. 
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
msgid "code_bits.lengths"
msgstr "lengths"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example
#. 
#. word = 'Amazing'
#. vowels = []
#. consonants = []
#. for letter in word:
#.     if letter.lower() in 'aeiou':
#.         vowels.append(letter)
#.     else:
#.         consonants.append(letter)
#. print(vowels)
#. print(consonants)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.first_nested_loop
#. 
#. for letter in "ABC":
#.     print(letter)
#.     for number in range(4):
#.         print(f'{letter} {number}')
#.     print('---')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.break_vs_return
#. 
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 break
#. 
#. foo()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function
#. 
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 return letter
#. 
#. foo()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
#. 
#. def substitute(string, d):
#.     result = ""
#.     for letter in string:
#.         result += d[letter]
#.     return result
msgid "code_bits.letter"
msgstr "letter"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
#. 
#. letters = 'AB'
#. for c1 in letters:
#.     for c2 in letters:
#.         for c3 in letters:
#.             for c4 in letters:
#.                 print(c1 + c2 + c3 + c4)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise.text
#. 
#.     letters = "ABCD"
msgid "code_bits.letters"
msgstr "letters"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
#. 
#. def surround(string, sides):
#.     return sides + string + sides
#. 
#. def alert(string, level):
#.     string = surround(string, ' ')
#.     for _ in range(level):
#.         string = surround(string, '!')
#.     return string
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#. 
#.     def alert(string, level):
msgid "code_bits.level"
msgstr "level"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
#. 
#. name = 'World'
#. line = '-'
#. for char in name:
#.     line = line + char
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
#. 
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
#. 
#. name = 'World'
#. line = '-'
#. for char in name:
#.     print(line)
#.     line = line + char
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
#. 
#. name = 'World'
#. line = ''
#. for _ in name:
#.     line += '-'
#. line = '+' + line + '+'
#. print(line)
#. print('|' + name + '|')
#. print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
#. 
#. name = 'World'
#. line = '+' + name + '+'
#. spaces = ''
#. for _ in name:
#.     spaces += ' '
#. 
#. print(line)
#. for char in name:
#.     print(char + spaces + char)
#. print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
#. 
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = char + line
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced
#. 
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char + ' '
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced.text
#. 
#.     name = 'World'
#.     line = ''
#.     for char in name:
#.         line = line + char
#.         print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
#. 
#. name = 'World'
#. line = ''
#. for _ in name:
#.     line += '-'
#. print(name)
#. print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined.text
#. 
#.     line += char
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined.text
#. 
#.     line = line + char
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
#. 
#. size = 3
#. for i in range(size):
#.     length = size - i
#.     line = ''
#.     for _ in range(length):
#.         line += '+'
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. 
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. 
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
#. 
#. strings = ['abc', 'def', 'ghi']
#. for i in range(len(strings[0])):
#.     line = ""
#.     for string in strings:
#.         line += string[i]
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
#. 
#. def format_board(board):
#.     joined_rows = []
#.     for row in board:
#.         joined_rows.append("|".join(row))
#.     lines = []
#.     for _ in board[0]:
#.         lines.append("-")
#.     line = f'\n{"+".join(lines)}\n'
#.     return line.join(joined_rows)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.line"
msgstr "line"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
#. 
#. def format_board(board):
#.     joined_rows = []
#.     for row in board:
#.         joined_rows.append("|".join(row))
#.     lines = []
#.     for _ in board[0]:
#.         lines.append("-")
#.     line = f'\n{"+".join(lines)}\n'
#.     return line.join(joined_rows)
msgid "code_bits.lines"
msgstr "lines"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.final_text.text
#. 
#.     list2 = list1.copy()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.same_list
#. 
#. list1 = [1, 2, 3]
#. list2 = list1
#. 
#. print(list1)
#. print(list2)
#. print(list1 == list2)
#. 
#. print(list1 is list2)
#. 
#. list1.append(4)
#. 
#. print(list1)
#. print(list2)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.two_separate_lists
#. 
#. list1 = [1, 2, 3]
#. list2 = [1, 2, 3]
#. 
#. print(list1)
#. print(list2)
#. print(list1 == list2)
#. 
#. print(list1 is list2)
#. 
#. list1.append(4)
#. 
#. print(list1)
#. print(list2)
msgid "code_bits.list1"
msgstr "list1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.final_text.text
#. 
#.     list2 = list1.copy()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.same_list
#. 
#. list1 = [1, 2, 3]
#. list2 = list1
#. 
#. print(list1)
#. print(list2)
#. print(list1 == list2)
#. 
#. print(list1 is list2)
#. 
#. list1.append(4)
#. 
#. print(list1)
#. print(list2)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.two_separate_lists
#. 
#. list1 = [1, 2, 3]
#. list2 = [1, 2, 3]
#. 
#. print(list1)
#. print(list2)
#. print(list1 == list2)
#. 
#. print(list1 is list2)
#. 
#. list1.append(4)
#. 
#. print(list1)
#. print(list2)
msgid "code_bits.list2"
msgstr "list2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.main_diagonal_winner"
msgstr "main_diagonal_winner"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#. 
#.     def make_board(size):
#.         board = []
#.         for _ in range(size):
#.             row = []
#.             for _ in range(size):
#.                 row.append(' ')
#.             board.append(row)
#.         return board
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#. 
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#. 
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#. 
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#. 
#.     test()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
#. 
#. def make_board(size):
#.     board = []
#.     for _ in range(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board.append(row)
#.     return board
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.naive_make_board
#. 
#. def make_board(size):
#.     row = []
#.     for _ in range(size):
#.         row.append(' ')
#.     board = []
#.     for _ in range(size):
#.         board.append(row)
#.     return board
#. 
#. def test():
#.     board = make_board(3)
#.     assert_equal(board, [
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#.     board[0][0] = 'X'
#.     assert_equal(board, [
#.         ['X', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#. 
#. test()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.make_board"
msgstr "make_board"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#. 
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#. 
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#. 
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#. 
#.     test()
msgid "code_bits.make_cube"
msgstr "make_cube"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
#. 
#. name = "Alice"
#. friend = 'Bob'
#. meal = "lunch"
#. print(f"{name} went to {meal} with {friend}.")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.requirements
#. 
#.     name + " went to " + meal + " with " + friend + '.'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#. 
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
msgid "code_bits.meal"
msgstr "meal"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
#. 
#. def diagonal_winner(board):
#.     middle = board[1][1]
#.     return (
#.             (middle == board[0][0] and middle == board[2][2]) or
#.             (middle == board[0][2] and middle == board[2][0])
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#. 
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner.text
#. 
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
msgid "code_bits.middle"
msgstr "middle"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1
#. 
#. name = 'World'
#. for character in name:
#.     print('---' + character)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1.text
#. 
#.     name = 'World'
#. 
#.     for character in name:
#.         print(character)
#.         print('---')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_2
#. 
#. name = 'World'
#. for _ in name:
#.     print(name)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
#. 
#. name = 'World'
#. line = '-'
#. for char in name:
#.     line = line + char
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
#. 
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
#. 
#. name = 'World'
#. line = '-'
#. for char in name:
#.     print(line)
#.     line = line + char
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
#. 
#. name = 'World'
#. spaces = ''
#. for char in name:
#.     print(spaces + char)
#.     spaces += ' '
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
#. 
#. name = 'World'
#. line = ''
#. for _ in name:
#.     line += '-'
#. line = '+' + line + '+'
#. print(line)
#. print('|' + name + '|')
#. print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
#. 
#. name = 'World'
#. line = '+' + name + '+'
#. spaces = ''
#. for _ in name:
#.     spaces += ' '
#. 
#. print(line)
#. for char in name:
#.     print(char + spaces + char)
#. print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
#. 
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = char + line
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced
#. 
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char + ' '
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced.text
#. 
#.     name = 'World'
#.     line = ''
#.     for char in name:
#.         line = line + char
#.         print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
#. 
#. name = 'World'
#. line = ''
#. for _ in name:
#.     line += '-'
#. print(name)
#. print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
#. 
#. def say_hello(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#. say_hello("Alice")
#. say_hello("Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name.text
#. 
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.define_greet
#. 
#. def greet(name):
#.     print(f"Hello {name}!")
#. 
#. greet("Alice")
#. greet("Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
#. 
#. def greet(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#. greet("Alice")
#. greet("Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you.text
#. 
#.     def greet(name):
#.         print(f"Hello {name}!")
#.         print("How are you?")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.missing_indentation.text
#. 
#.     for character in name:
#.         print(character)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.missing_indentation.text
#. 
#.     for character in name: print(character)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.one_indented_line
#. 
#. name = 'World'
#. 
#. for character in name:
#.     print(character)
#. print('---')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.two_indented_lines
#. 
#. name = 'World'
#. 
#. for character in name:
#.     print(character)
#.     print('---')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.first_input
#. 
#. print('Type your name, then press Enter:')
#. name = input()
#. print(f'Hello {name}!')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingForLoops.steps.first_for_loop
#. 
#. name = 'World'
#. for character in name: print(character)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
#. 
#. name = "Alice"
#. age = 20
#. print(f'Hello {name}. You are {age} years old.')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
#. 
#. name = "Alice"
#. age = 20
#. print("Hello " + name + ". You are " + age + " years old.")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
#. 
#. name = "Alice"
#. friend = 'Bob'
#. meal = "lunch"
#. print(f"{name} went to {meal} with {friend}.")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.requirements
#. 
#.     name + " went to " + meal + " with " + friend + '.'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#. 
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake
#. 
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.requirements
#. 
#.     return name == "Alice" or "Bob"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.requirements
#. 
#.     return name == "Alice" or name == "Bob"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#. 
#.     return name == "Alice" or "Bob"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#. 
#.     return name == "Alice" or name == "Bob"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#. 
#.     (name == "Alice") or ("Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#. 
#.     name == "Alice" or "Bob"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#. 
#.     name == ("Alice" or "Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#. 
#.     return name in ["Alice", "Bob", "Charlie"]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement
#. 
#. def is_friend(name):
#.     return name == "Alice" or name == "Bob"
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.requirements
#. 
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.requirements
#. 
#.     return name == "Alice" or name == "Bob"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.text
#. 
#.     name == "Alice" or name == "Bob"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr
#. 
#. def is_friend(name):
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#. 
#.     if name == "Alice" or name == "Bob":
#.         return True
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#. 
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InputAliceBob
#. 
#. def is_friend(name):
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#.     else:
#.         return False
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InspectWithBirdseye
#. 
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. 
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MultiLineExpressions.steps.valid_multiline
#. 
#. name = "Bob"
#. 
#. is_friend = name == "Alice" or \
#.             name == "Bob"
#. print(is_friend)
#. 
#. is_friend = (name == "Alice" or
#.              name == "Bob")
#. print(is_friend)
#. 
#. is_friend = [name == "Alice",
#.              name == "Bob"]
#. print(is_friend)
#. 
#. print(name == "Alice" or
#.       name == "Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quotes_apostrophe.text
#. 
#.     name = 'Alice'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
#. 
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. word = 'Goodbye'
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
#. 
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters
#. 
#. name = 'kesha'
#. new_name = ''
#. for c in name:
#.     if c == 's':
#.         c = '$'
#.     new_name += c
#. 
#. print(new_name)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters_exercise
#. 
#. name = 'kesha'
#. new_name = ''
#. for c in name:
#.     if c == 'e':
#.         c = '3'
#.     if c == 's':
#.         c = '$'
#.     if c == 'a':
#.         c = '@'
#.     new_name += c
#. 
#. print(new_name)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.WritingPrograms.steps.editor_hello_world
#. 
#. word = 'Hello'
#. name = 'World'
#. print(word + ' ' + name)
#. word = 'Goodbye'
#. print(word + ' ' + name)
msgid "code_bits.name"
msgstr "name"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters
#. 
#. name = 'kesha'
#. new_name = ''
#. for c in name:
#.     if c == 's':
#.         c = '$'
#.     new_name += c
#. 
#. print(new_name)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters_exercise
#. 
#. name = 'kesha'
#. new_name = ''
#. for c in name:
#.     if c == 'e':
#.         c = '3'
#.     if c == 's':
#.         c = '$'
#.     if c == 'a':
#.         c = '@'
#.     new_name += c
#. 
#. print(new_name)
msgid "code_bits.new_name"
msgstr "new_name"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers.text
#. 
#.     numbers = [1, 2] + [3, 4]
#.     print(numbers)
#.     new_numbers = []
#.     new_numbers += numbers
#.     new_numbers += [5]
#.     print(new_numbers)
msgid "code_bits.new_numbers"
msgstr "new_numbers"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.append_vs_concatenate
#. 
#. nums = [1, 2, 3]
#. new_nums = nums + [4, 5]
#. print(new_nums)
#. print(nums)
#. nums.append(4)
#. print(nums)
msgid "code_bits.new_nums"
msgstr "new_nums"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.final_text.text
#. 
#.     sentence = 'Hello World'
#.     excited = True
#. 
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#. 
#.     sentence = new_sentence
#.     print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
#. 
#. sentence = 'Hello World'
#. excited = True
#. 
#. if excited:
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char + '!'
#.     sentence = new_sentence
#. 
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
#. 
#. sentence = 'HELLO THERE'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.     else:
#.         char = char.lower()
#.     new_sentence += char
#.     upper = False
#. 
#. print(new_sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
#. 
#. sentence = 'One more exercise, and then you can relax.'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.         upper = False
#.     else:
#.         char = char.lower()
#.         upper = True
#.     new_sentence += char
#. 
#. print(new_sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.brokn_kyboard
#. 
#. sentence = 'The e key on my keyboard is broken'
#. new_sentence = ''
#. for c in sentence:
#.     if c != 'e':
#.         new_sentence += c
#. print(new_sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_lower_upper
#. 
#. sentence = "Python rocks!"
#. new_sentence = sentence.upper()
#. print(sentence)
#. print(new_sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
#. 
#. sentence = 'Hello there'
#. include = True
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = False
#. 
#. print(new_sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
#. 
#. sentence = 'Hello World'
#. 
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. 
#. print(new_sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop
#. 
#. sentence = 'Hello World'
#. 
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. 
#. print(new_sentence)
msgid "code_bits.new_sentence"
msgstr "new_sentence"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_predict.text
#. 
#.     some_list[index] = new_value
msgid "code_bits.new_value"
msgstr "new_value"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. 
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. 
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. 
#. print(total)
msgid "code_bits.not_first"
msgstr "not_first"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_loop_python_tutor
#. 
#. numbers = [[1, 2, 3], [4, 5], [6], []]
#. for sublist in numbers:
#.     for num in sublist:
#.         print(num)
#.     print('---')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example
#. 
#. numbers = [[1, 2, 3], [4, 5], [6], []]
#. for sublist in numbers:
#.     for num in sublist:
#.         print(num)
#.     print('---')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.text
#. 
#.     for sublist in numbers:
#.         for num in sublist:
#.             print(num)
#.         print('---')
msgid "code_bits.num"
msgstr "num"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
#. 
#. numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. double = []
#. for number in numbers:
#.     double += [number * 2]
#. print(double)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
#. 
#. numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. big_numbers = []
#. for number in numbers:
#.     if number > 5:
#.         big_numbers.append(number)
#. print(big_numbers)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.numbers_sum
#. 
#. numbers = [3, 1, 4, 1, 5, 9]
#. 
#. total = 0
#. for number in numbers:
#.     total += number
#. 
#. print(total)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.first_nested_loop
#. 
#. for letter in "ABC":
#.     print(letter)
#.     for number in range(4):
#.         print(f'{letter} {number}')
#.     print('---')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy
#. 
#. numbers = [10, 7, 8, 3, 12, 15]
#. for number in numbers.copy():
#.     if number <= 10:
#.         numbers.remove(number)
#. print(numbers)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy.requirements
#. 
#.     for number in numbers.copy():
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy.requirements
#. 
#.     for number in numbers:
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy.text
#. 
#.     for number in numbers.copy():
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy2
#. 
#. numbers = [10, 7, 8, 3, 12, 15]
#. big_numbers = numbers.copy()
#. 
#. for number in numbers:
#.     if number <= 10:
#.         big_numbers.remove(number)
#. print(big_numbers)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_new_list
#. 
#. numbers = [10, 7, 8, 3, 12, 15]
#. big_numbers = []
#. 
#. for number in numbers:
#.     if number > 10:
#.         big_numbers.append(number)
#. print(big_numbers)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.remove_instead_of_pop
#. 
#. numbers = [10, 7, 8, 3, 12, 15]
#. for number in numbers:
#.     if number <= 10:
#.         numbers.remove(number)
#. print(numbers)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.run_broken_with_python_tutor
#. 
#. numbers = [10, 7, 8, 3, 12, 15]
#. for i in range(len(numbers)):
#.     number = numbers[i]
#.     if number <= 10:
#.         numbers.pop(i)
#. print(numbers)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.break_vs_return
#. 
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 break
#. 
#. foo()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function
#. 
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 return letter
#. 
#. foo()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.first_return
#. 
#. def double(x):
#.     return x * 2
#. 
#. number = 5
#. twice = double(number)
#. print(number)
#. print(twice)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.losing_return_value
#. 
#. def double(x):
#.     return x * 2
#. 
#. number = 5
#. double(number)
#. print(number)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
#. 
#. number = '1'
#. for i in range(int(number)):
#.     print('Starting... ' + str(i + 1))
#. print('Go!')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion.text
#. 
#.     number = '3'
#.     for i in range(number):
#.         print('Starting... ' + i + 1)
#.     print('Go!')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithPythonTutor.steps.run_with_python_tutor
#. 
#. all_numbers = [2, 4, 8, 1, 9, 7]
#. 
#. small_numbers = []
#. big_numbers = []
#. 
#. for number in all_numbers:
#.     if number <= 5:
#.         small_numbers.append(number)
#.     else:
#.         big_numbers.append(number)
#. 
#. print(small_numbers)
#. print(big_numbers)
msgid "code_bits.number"
msgstr "number"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
#. 
#. numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. double = []
#. for number in numbers:
#.     double += [number * 2]
#. print(double)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers.text
#. 
#.     numbers = [1, 2] + [3, 4]
#.     print(numbers)
#.     new_numbers = []
#.     new_numbers += numbers
#.     new_numbers += [5]
#.     print(new_numbers)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers.text
#. 
#.     numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
#. 
#. numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. big_numbers = []
#. for number in numbers:
#.     if number > 5:
#.         big_numbers.append(number)
#. print(big_numbers)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers.text
#. 
#.     numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.numbers_sum
#. 
#. numbers = [3, 1, 4, 1, 5, 9]
#. 
#. total = 0
#. for number in numbers:
#.     total += number
#. 
#. print(total)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_loop_python_tutor
#. 
#. numbers = [[1, 2, 3], [4, 5], [6], []]
#. for sublist in numbers:
#.     for num in sublist:
#.         print(num)
#.     print('---')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example
#. 
#. numbers = [[1, 2, 3], [4, 5], [6], []]
#. for sublist in numbers:
#.     for num in sublist:
#.         print(num)
#.     print('---')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.text
#. 
#.     for sublist in numbers:
#.         for num in sublist:
#.             print(num)
#.         print('---')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.text
#. 
#.     numbers = [[1, 2, 3], [4, 5], [6], []]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy
#. 
#. numbers = [10, 7, 8, 3, 12, 15]
#. for number in numbers.copy():
#.     if number <= 10:
#.         numbers.remove(number)
#. print(numbers)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy.requirements
#. 
#.     for number in numbers.copy():
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy.requirements
#. 
#.     for number in numbers:
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy.text
#. 
#.     for number in numbers.copy():
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy2
#. 
#. numbers = [10, 7, 8, 3, 12, 15]
#. big_numbers = numbers.copy()
#. 
#. for number in numbers:
#.     if number <= 10:
#.         big_numbers.remove(number)
#. print(big_numbers)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_new_list
#. 
#. numbers = [10, 7, 8, 3, 12, 15]
#. big_numbers = []
#. 
#. for number in numbers:
#.     if number > 10:
#.         big_numbers.append(number)
#. print(big_numbers)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.remove_instead_of_pop
#. 
#. numbers = [10, 7, 8, 3, 12, 15]
#. for number in numbers:
#.     if number <= 10:
#.         numbers.remove(number)
#. print(numbers)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.run_broken_with_python_tutor
#. 
#. numbers = [10, 7, 8, 3, 12, 15]
#. for i in range(len(numbers)):
#.     number = numbers[i]
#.     if number <= 10:
#.         numbers.pop(i)
#. print(numbers)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values
#. 
#. def double_numbers(numbers):
#.     for x in numbers:
#.         return x * 2
#. 
#. assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function.text
#. 
#.     def double_numbers(numbers):
#.         doubles = []
#.         for x in numbers:
#.             doubles.append(x * 2)
#.         return doubles
#. 
#.     assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
msgid "code_bits.numbers"
msgstr "numbers"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.append_vs_concatenate
#. 
#. nums = [1, 2, 3]
#. new_nums = nums + [4, 5]
#. print(new_nums)
#. print(nums)
#. nums.append(4)
#. print(nums)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_predict_exercise
#. 
#. nums = [1, 2, 3]
#. print(nums.pop(1))
#. print(nums)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_predict_exercise
#. 
#. nums = [1, 2, 3]
#. nums.remove(1)
#. print(nums)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_predict
#. 
#. nums = [1, 2, 3]
#. nums[1] = 9
#. print(nums)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.list_insert
#. 
#. nums = [1, 2, 3, 4, 5]
#. nums.insert(2, 9)
#. print(nums)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.text
#. 
#.     nums = [1, 2, 3, 4, 5]
#.     nums.append(9)
#.     print(nums)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.in_predict_exercise
#. 
#. nums = [2, 9, 1, 8, 5, 64]
#. print(7 in nums)
#. print(2 in nums)
msgid "code_bits.nums"
msgstr "nums"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example
#. 
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     if char == 'T':
#.         char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     if char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. 
#. print(opposite_dna)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_elif
#. 
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     elif char == 'T':
#.         char = 'A'
#.     elif char == 'G':
#.         char = 'C'
#.     elif char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. 
#. print(opposite_dna)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else
#. 
#. dna = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     else:
#.         if char == 'T':
#.             char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     else:
#.         if char == 'C':
#.             char = 'G'
#.     opposite_dna += char
#. 
#. print(opposite_dna)
msgid "code_bits.opposite_dna"
msgstr "opposite_dna"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. 
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. 
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#. 
#.     def substitute(string, d):
#.         ...
#. 
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}), expected)
msgid "code_bits.original"
msgstr "original"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
#. 
#. people = ['Alice', 'Bob', 'Charlie']
#. print(f"There are {len(people)} people waiting, the first one's name is {people[0]}.")
msgid "code_bits.people"
msgstr "people"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.grades_example
#. 
#. percentage = 73
#. 
#. if percentage < 40:
#.     grade = 'F'
#. elif percentage < 60:
#.     grade = 'C'
#. elif percentage < 80:
#.     grade = 'B'
#. else:
#.     grade = 'A'
#. 
#. print(grade)
msgid "code_bits.percentage"
msgstr "percentage"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
#. 
#. def say_hello(person_name):
#.     print(f"Hello {person_name}!")
#.     print("How are you?")
#. 
#. say_hello("Alice")
#. say_hello("Bob")
msgid "code_bits.person_name"
msgstr "person_name"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
#. 
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         all_equal = True
#.         piece = board[0][col]
#.         for row in board:
#.             if row[col] == ' ' or row[col] != piece:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
#. 
#. def row_winner(board):
#.     for row in board:
#.         all_equal = True
#.         piece = row[0]
#.         for entry in row:
#.             if entry == ' ' or piece != entry:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. 
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. 
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. 
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. 
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#. 
#.     def winner(board):
#.         ...
#. 
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#. 
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#. 
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#. 
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
msgid "code_bits.piece"
msgstr "piece"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.modify_list_in_function
#. 
#. def play_move(board, player):
#.     board[1] = player
#. 
#. def play_game():
#.     game_board = [" ", " ", " "]
#.     play_move(game_board, "X")
#.     print(game_board)
#. 
#. play_game()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#. 
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#. 
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#. 
#.     def play_move(board, player):
#.         ...
#. 
#.     play_game()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_two_lines
#. 
#. def play_move(board, player):
#.     row = board[1]
#.     row[0] = player
#. 
#. def play_game():
#.     board = [
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.     ]
#.     play_move(board, "X")
#.     print(board)
#. 
#. play_game()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.play_game"
msgstr "play_game"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.modify_list_in_function
#. 
#. def play_move(board, player):
#.     board[1] = player
#. 
#. def play_game():
#.     game_board = [" ", " ", " "]
#.     play_move(game_board, "X")
#.     print(game_board)
#. 
#. play_game()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
#. 
#. def play_move(board, player):
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#. 
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#. 
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#. 
#.     def play_move(board, player):
#.         ...
#. 
#.     play_game()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_two_lines
#. 
#. def play_move(board, player):
#.     row = board[1]
#.     row[0] = player
#. 
#. def play_game():
#.     board = [
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.     ]
#.     play_move(board, "X")
#.     print(board)
#. 
#. play_game()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.play_move"
msgstr "play_move"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.modify_list_in_function
#. 
#. def play_move(board, player):
#.     board[1] = player
#. 
#. def play_game():
#.     game_board = [" ", " ", " "]
#.     play_move(game_board, "X")
#.     print(game_board)
#. 
#. play_game()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
#. 
#. def play_move(board, player):
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#. 
#.     board[1][0] = player
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#. 
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#. 
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#. 
#.     def play_move(board, player):
#.         ...
#. 
#.     play_game()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#. 
#.     row = board[1]
#.     row[0] = player
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_two_lines
#. 
#. def play_move(board, player):
#.     row = board[1]
#.     row[0] = player
#. 
#. def play_game():
#.     board = [
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.     ]
#.     play_move(board, "X")
#.     print(board)
#. 
#. play_game()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.player"
msgstr "player"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
#. 
#. players = ['Alice', 'Bob', 'Charlie']
#. for player1 in players:
#.     for player2 in players:
#.         if player1 != player2:
#.             print(f'{player1} vs {player2}')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.player1"
msgstr "player1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
#. 
#. players = ['Alice', 'Bob', 'Charlie']
#. for player1 in players:
#.     for player2 in players:
#.         if player1 != player2:
#.             print(f'{player1} vs {player2}')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.player2"
msgstr "player2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#. 
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
#. 
#. players = ['Alice', 'Bob', 'Charlie']
#. for i in range(len(players)):
#.     for j in range(len(players)):
#.         if i < j:
#.             print(f'{players[i]} vs {players[j]}')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text
#. 
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
#. 
#. players = ['Alice', 'Bob', 'Charlie']
#. for player1 in players:
#.     for player2 in players:
#.         if player1 != player2:
#.             print(f'{player1} vs {player2}')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise.text
#. 
#.     players = ["Alice", "Bob", "Charlie"]
msgid "code_bits.players"
msgstr "players"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.present"
msgstr "present"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. 
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#. 
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
#. 
#. def total_cost(cart, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         result += price
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#. 
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. 
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#. 
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.price"
msgstr "price"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. 
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#. 
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
#. 
#. def total_cost(cart, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         result += price
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#. 
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#. 
#.     prices = {'apple': 2, 'apple': 3}
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#. 
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. 
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#. 
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.prices"
msgstr "prices"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text
#. 
#.     assert_equal(print_board([...]), "...")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.one_way_to_print_board
#. 
#. def print_board(board):
#.     for row in board:
#.         print("".join(row))
#. 
#. print_board([
#.     ['X', 'O', 'X'],
#.     [' ', 'O', 'O'],
#.     [' ', 'X', ' ']
#. ])
msgid "code_bits.print_board"
msgstr "print_board"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.print_draw"
msgstr "print_draw"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.print_twice_call_print_many
#. 
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. 
#. def print_twice(x):
#.     print_many(2, x)
#. 
#. print_twice("Hello")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_birdseye
#. 
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. 
#. def print_twice(x):
#.     print_many(2, x)
#. 
#. print_twice("Hello")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_pythontutor
#. 
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. 
#. def print_twice(x):
#.     print_many(2, x)
#. 
#. print_twice("Hello")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_snoop
#. 
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. 
#. def print_twice(x):
#.     print_many(2, x)
#. 
#. print_twice("Hello")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_many
#. 
#. def print_many(thing, n):
#.     for _ in range(n):
#.         print(thing)
#. 
#. print_many("Hello", 3)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
#. 
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. 
#. print_many(3, "Hello")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters.text
#. 
#.     def print_many(n, thing):
msgid "code_bits.print_many"
msgstr "print_many"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.print_twice_call_print_many
#. 
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. 
#. def print_twice(x):
#.     print_many(2, x)
#. 
#. print_twice("Hello")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_birdseye
#. 
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. 
#. def print_twice(x):
#.     print_many(2, x)
#. 
#. print_twice("Hello")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_pythontutor
#. 
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. 
#. def print_twice(x):
#.     print_many(2, x)
#. 
#. print_twice("Hello")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_snoop
#. 
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. 
#. def print_twice(x):
#.     print_many(2, x)
#. 
#. print_twice("Hello")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
#. 
#. def print_twice(x):
#.     print(x)
#.     print(x)
msgid "code_bits.print_twice"
msgstr "print_twice"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.print_winner"
msgstr "print_winner"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
#. 
#. def print_words(french):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("---")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#. 
#.     def print_words(french):
#.         ...
#. 
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. 
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#. 
#.     def print_words(french, german):
#.         ...
#. 
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. 
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#. 
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. 
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.print_words"
msgstr "print_words"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.print_returns_none
#. 
#. things = [1, 2, 3]
#. length = len(things)
#. printed = print(length)
#. print(printed)
msgid "code_bits.printed"
msgstr "printed"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.final_text.text
#. 
#.     def quadruple(x):
#.         x = double(x)
#.         x = double(x)
#.         return x
#. 
#.     def quadruple(x):
#.         return double(double(x))
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
#. 
#. def double(x):
#.     return x * 2
#. 
#. def quadruple(x):
#.     return double(double(x))
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.complete_quadruple_tests
#. 
#. def double(x):
#.     return x * 2
#. 
#. def quadruple(x):
#.     return double(double(x))
#. 
#. assert_equal(quadruple(2), 8)
#. assert_equal(quadruple(5), 20)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.complete_quadruple_tests.text
#. 
#.     def double(x):
#.         return x * 2
#. 
#.     def quadruple(x):
#.         return double(double(x))
#. 
#.     assert_equal(quadruple(2))
#.     assert_equal(quadruple(5))
msgid "code_bits.quadruple"
msgstr "quadruple"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. 
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#. 
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys
#. 
#. quantities = {'apple': 1, 'cat': 10}
#. print(quantities.keys())
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys.text
#. 
#.     quantities = {'apple': 1, 'cat': 10}
#.     print(quantities)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable
#. 
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities.keys():
#.     print(key)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable2
#. 
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities:
#.     print(key)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. 
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#. 
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.quantities"
msgstr "quantities"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. 
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#. 
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. 
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#. 
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.quantity"
msgstr "quantity"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. 
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#. 
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#. 
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
#. 
#. def format_board(board):
#.     result = ''
#.     for i in range(len(board)):
#.         for char in board[i]:
#.             result += char
#.         if i != len(board) - 1:
#.             result += '\n'
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. 
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. 
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
#. 
#. def substitute(string, d):
#.     result = ""
#.     for letter in string:
#.         result += d[letter]
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
#. 
#. def total_cost(cart, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         result += price
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#. 
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. 
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#. 
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.result"
msgstr "result"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
#. 
#. for left in range(12):
#.     left += 1
#.     for right in range(12):
#.         right += 1
#.         print(f'{left} x {right} = {left * right}')
#.     print('---')
msgid "code_bits.right"
msgstr "right"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
#. 
#. def all_equal(row):
#.     return row[0] == row[1] and row[0] == row[2]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow.text
#. 
#.     def all_equal(row):
#.         ...
#. 
#.     assert_equal(all_equal(["X", "X", "X"]), True)
#.     assert_equal(all_equal(["O", "O", "O"]), True)
#.     assert_equal(all_equal(["X", "O", "X"]), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.final_text.text
#. 
#.         return row == [row[0], row[0], row[0]]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.final_text.text
#. 
#.         return row[0] == row[1] == row[2]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.final_text.text
#. 
#.     def all_equal(row):
#.         return row[0] == row[1] and row[0] == row[2]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
#. 
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         all_equal = True
#.         piece = board[0][col]
#.         for row in board:
#.             if row[col] == ' ' or row[col] != piece:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
#. 
#. def row_winner(board):
#.     for row in board:
#.         all_equal = True
#.         piece = row[0]
#.         for entry in row:
#.             if entry == ' ' or piece != entry:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. 
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. 
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. 
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. 
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#. 
#.     def winner(board):
#.         ...
#. 
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#. 
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#. 
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#. 
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#. 
#.     board.append(row.copy())
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#. 
#.     def make_board(size):
#.         board = []
#.         for _ in range(size):
#.             row = []
#.             for _ in range(size):
#.                 row.append(' ')
#.             board.append(row)
#.         return board
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#. 
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#. 
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#. 
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#. 
#.     test()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
#. 
#. def make_board(size):
#.     board = []
#.     for _ in range(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board.append(row)
#.     return board
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#. 
#.     board = [row, row, row]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#. 
#.     row[0] = 'X'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.naive_make_board
#. 
#. def make_board(size):
#.     row = []
#.     for _ in range(size):
#.         row.append(' ')
#.     board = []
#.     for _ in range(size):
#.         board.append(row)
#.     return board
#. 
#. def test():
#.     board = make_board(3)
#.     assert_equal(board, [
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#.     board[0][0] = 'X'
#.     assert_equal(board, [
#.         ['X', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#. 
#. test()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
#. 
#. def play_move(board, player):
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#. 
#.     row = board[1]
#.     row[0] = player
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_two_lines
#. 
#. def play_move(board, player):
#.     row = board[1]
#.     row[0] = player
#. 
#. def play_game():
#.     board = [
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.     ]
#.     play_move(board, "X")
#.     print(board)
#. 
#. play_game()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
#. 
#. def format_board(board):
#.     joined_rows = []
#.     for row in board:
#.         joined_rows.append("|".join(row))
#.     lines = []
#.     for _ in board[0]:
#.         lines.append("-")
#.     line = f'\n{"+".join(lines)}\n'
#.     return line.join(joined_rows)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#. 
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.one_way_to_print_board
#. 
#. def print_board(board):
#.     for row in board:
#.         print("".join(row))
#. 
#. print_board([
#.     ['X', 'O', 'X'],
#.     [' ', 'O', 'O'],
#.     [' ', 'X', ' ']
#. ])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.row"
msgstr "row"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
#. 
#. def row_winner(board):
#.     for row in board:
#.         all_equal = True
#.         piece = row[0]
#.         for entry in row:
#.             if entry == ' ' or piece != entry:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner.text
#. 
#.     def row_winner(board):
#.         ...
#. 
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['A', 'A', 'B', 'A'],
#.                 [' ', ' ', ' ', ' '],
#.                 ['A', ' ', ' ', 'A'],
#.                 ['B', ' ', 'B', 'A']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'X'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. 
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. 
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. 
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. 
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#. 
#.     def winner(board):
#.         ...
#. 
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#. 
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#. 
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#. 
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.row_winner"
msgstr "row_winner"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.rows"
msgstr "rows"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
#. 
#. def say_hello(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#. say_hello("Alice")
#. say_hello("Bob")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
#. 
#. def say_hello(person_name):
#.     print(f"Hello {person_name}!")
#.     print("How are you?")
#. 
#. say_hello("Alice")
#. say_hello("Bob")
msgid "code_bits.say_hello"
msgstr "say_hello"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.final_text.text
#. 
#.     sentence = 'Hello World'
#.     excited = True
#. 
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#. 
#.     sentence = new_sentence
#.     print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
#. 
#. sentence = 'Hello World'
#. excited = True
#. 
#. if excited:
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char + '!'
#.     sentence = new_sentence
#. 
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
#. 
#. sentence = 'HELLO THERE'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.     else:
#.         char = char.lower()
#.     new_sentence += char
#.     upper = False
#. 
#. print(new_sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
#. 
#. sentence = 'Hello there'
#. excited = True
#. if excited:
#.     char = '!'
#. else:
#.     char = '.'
#. sentence += char
#. 
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.if_upper_else_lower
#. 
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     sentence = sentence.upper()
#. else:
#.     sentence = sentence.lower()
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.if_upper_else_lower_false
#. 
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     sentence = sentence.upper()
#. else:
#.     sentence = sentence.lower()
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
#. 
#. sentence = 'One more exercise, and then you can relax.'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.         upper = False
#.     else:
#.         char = char.lower()
#.         upper = True
#.     new_sentence += char
#. 
#. print(new_sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char
#. 
#. sentence = 'Hello World'
#. excited = False
#. 
#. if excited:
#.     char = '!'
#. sentence += char
#. 
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char.text
#. 
#.     sentence = 'Hello World'
#.     excited = True
#. 
#.     if excited:
#.         char = '!'
#.     sentence += char
#. 
#.     print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise
#. 
#. sentence = 'Hello'
#. excited = True
#. confused = True
#. if excited:
#.     sentence += '!'
#. if confused:
#.     sentence += '?'
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise.text
#. 
#.     sentence = 'Hello World'
#.     excited = False
#.     confused = True
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_example
#. 
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     sentence += '!'
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_false_example
#. 
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     sentence += '!'
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.brokn_kyboard
#. 
#. sentence = 'The e key on my keyboard is broken'
#. new_sentence = ''
#. for c in sentence:
#.     if c != 'e':
#.         new_sentence += c
#. print(new_sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
#. 
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. word = 'Goodbye'
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.text
#. 
#.     word = 'Goodbye'
#.     print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
#. 
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_lower_upper
#. 
#. sentence = "Python rocks!"
#. new_sentence = sentence.upper()
#. print(sentence)
#. print(new_sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
#. 
#. sentence = 'Hello there'
#. include = True
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = False
#. 
#. print(new_sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
#. 
#. sentence = 'Hello World'
#. 
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. 
#. print(new_sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop
#. 
#. sentence = 'Hello World'
#. 
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. 
#. print(new_sentence)
msgid "code_bits.sentence"
msgstr "sentence"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. 
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. 
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. 
#. print(total)
msgid "code_bits.separator"
msgstr "separator"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
#. 
#. def surround(string, sides):
#.     return sides + string + sides
#. 
#. def alert(string, level):
#.     string = surround(string, ' ')
#.     for _ in range(level):
#.         string = surround(string, '!')
#.     return string
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
#. 
#. def surround(string, sides):
#.     return sides + string + sides
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#. 
#.     def surround(string, sides):
msgid "code_bits.sides"
msgstr "sides"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
#. 
#. size = 3
#. for i in range(size):
#.     length = size - i
#.     line = ''
#.     for _ in range(length):
#.         line += '+'
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.text
#. 
#.     size = 5
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#. 
#.     def make_board(size):
#.         board = []
#.         for _ in range(size):
#.             row = []
#.             for _ in range(size):
#.                 row.append(' ')
#.             board.append(row)
#.         return board
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#. 
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#. 
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#. 
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#. 
#.     test()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
#. 
#. def make_board(size):
#.     board = []
#.     for _ in range(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board.append(row)
#.     return board
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.naive_make_board
#. 
#. def make_board(size):
#.     row = []
#.     for _ in range(size):
#.         row.append(' ')
#.     board = []
#.     for _ in range(size):
#.         board.append(row)
#.     return board
#. 
#. def test():
#.     board = make_board(3)
#.     assert_equal(board, [
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#.     board[0][0] = 'X'
#.     assert_equal(board, [
#.         ['X', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#. 
#. test()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.size"
msgstr "size"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithPythonTutor.steps.run_with_python_tutor
#. 
#. all_numbers = [2, 4, 8, 1, 9, 7]
#. 
#. small_numbers = []
#. big_numbers = []
#. 
#. for number in all_numbers:
#.     if number <= 5:
#.         small_numbers.append(number)
#.     else:
#.         big_numbers.append(number)
#. 
#. print(small_numbers)
#. print(big_numbers)
msgid "code_bits.small_numbers"
msgstr "small_numbers"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers.text
#. 
#.     some_list += [element]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers.text
#. 
#.     some_list.append(element)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.index_predict_exercise.text
#. 
#.     some_list.index(value)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_predict_exercise.text
#. 
#.     some_list.pop(index)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_predict_exercise.text
#. 
#.     some_list.remove(value)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_predict.text
#. 
#.     some_list[index] = new_value
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_predict_exercise.text
#. 
#.     some_list.count(value)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.in_predict_exercise.text
#. 
#.     value in some_list
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sorted_predict_exercise.text
#. 
#.     sorted(some_list)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_predict_exercise.text
#. 
#.     sum(some_list)
msgid "code_bits.some_list"
msgstr "some_list"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
#. 
#. name = 'World'
#. spaces = ''
#. for char in name:
#.     print(spaces + char)
#.     spaces += ' '
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
#. 
#. name = 'World'
#. line = '+' + name + '+'
#. spaces = ''
#. for _ in name:
#.     spaces += ' '
#. 
#. print(line)
#. for char in name:
#.     print(char + spaces + char)
#. print(line)
msgid "code_bits.spaces"
msgstr "spaces"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting.text
#. 
#.     string = strings[1]
#.     print(string[0])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
#. 
#. strings = ['abc', 'def', 'ghi']
#. string = strings[1]
#. print(string[0])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. 
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. 
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
#. 
#. strings = ['abc', 'def', 'ghi']
#. for i in range(len(strings[0])):
#.     line = ""
#.     for string in strings:
#.         line += string[i]
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.discovering_newline
#. 
#. string
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
#. 
#. def surround(string, sides):
#.     return sides + string + sides
#. 
#. def alert(string, level):
#.     string = surround(string, ' ')
#.     for _ in range(level):
#.         string = surround(string, '!')
#.     return string
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#. 
#.     def alert(string, level):
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
#. 
#. def surround(string, sides):
#.     return sides + string + sides
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#. 
#.     def surround(string, sides):
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. 
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. 
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
#. 
#. def substitute(string, d):
#.     result = ""
#.     for letter in string:
#.         result += d[letter]
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#. 
#.     def substitute(string, d):
#.         ...
#. 
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}), expected)
msgid "code_bits.string"
msgstr "string"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
#. 
#. string1 = 'Hello'
#. string2 = 'World'
#. for i in range(len(string1)):
#.     char1 = string1[i]
#.     char2 = string2[i]
#.     print(char1 + ' ' + char2)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. 
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. 
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. 
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#. 
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#. 
#.     print(char1 + ' ' + char2)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.text
#. 
#.     for i in range(len(string1)):
#.         char1 = string1[i]
#.         char2 = string2[i]
#.         print(char1 + ' ' + char2)
msgid "code_bits.string1"
msgstr "string1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
#. 
#. string1 = 'Hello'
#. string2 = 'World'
#. for i in range(len(string1)):
#.     char1 = string1[i]
#.     char2 = string2[i]
#.     print(char1 + ' ' + char2)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. 
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. 
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. 
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#. 
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#. 
#.     print(char1 + ' ' + char2)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.text
#. 
#.     for i in range(len(string1)):
#.         char1 = string1[i]
#.         char2 = string2[i]
#.         print(char1 + ' ' + char2)
msgid "code_bits.string2"
msgstr "string2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting
#. 
#. strings = ["abc", "def", "ghi"]
#. print(strings[1][0])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting.text
#. 
#.     print(strings[1][0])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting.text
#. 
#.     string = strings[1]
#.     print(string[0])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
#. 
#. strings = ['abc', 'de', 'fghi', 'jklmn', 'o']
#. print(strings[-2][-1])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.final_text.text
#. 
#.     strings[1].append("today?")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
#. 
#. strings = ['abc', 'def', 'ghi']
#. string = strings[1]
#. print(string[0])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise.text
#. 
#.     strings = ["abc", "def", "ghi"]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
#. 
#. strings = [['hello', 'there'], ['how', 'are', 'you']]
#. print(strings[1][2][0])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. 
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. 
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. 
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. 
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#. 
#.     def winner(board):
#.         ...
#. 
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#. 
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#. 
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#. 
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#. 
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#. 
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#. 
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. 
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. 
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
#. 
#. strings = ['abc', 'def', 'ghi']
#. for i in range(len(strings[0])):
#.     line = ""
#.     for string in strings:
#.         line += string[i]
#.     print(line)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.text
#. 
#.     strings = ["abc", "def", "ghi"]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.strings"
msgstr "strings"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_loop_python_tutor
#. 
#. numbers = [[1, 2, 3], [4, 5], [6], []]
#. for sublist in numbers:
#.     for num in sublist:
#.         print(num)
#.     print('---')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example
#. 
#. numbers = [[1, 2, 3], [4, 5], [6], []]
#. for sublist in numbers:
#.     for num in sublist:
#.         print(num)
#.     print('---')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.text
#. 
#.     for sublist in numbers:
#.         for num in sublist:
#.             print(num)
#.         print('---')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.sublist"
msgstr "sublist"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. 
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. 
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
#. 
#. def substitute(string, d):
#.     result = ""
#.     for letter in string:
#.         result += d[letter]
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#. 
#.     def substitute(string, d):
#.         ...
#. 
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}), expected)
msgid "code_bits.substitute"
msgstr "substitute"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.sunshine_undefined_check
#. 
#. sunshine
msgid "code_bits.sunshine"
msgstr "sunshine"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
#. 
#. super_secret_number = 7
#. print("What number am I thinking of?")
#. guess = input()
#. if int(guess) == super_secret_number:
#.     print("Amazing! Are you psychic?")
#. else:
#.     print("Nope!")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text
#. 
#.     super_secret_number = 7
#. 
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.final_text.text
#. 
#.     if guess == str(super_secret_number):
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.final_text.text
#. 
#.     if int(guess) == super_secret_number:
msgid "code_bits.super_secret_number"
msgstr "super_secret_number"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
#. 
#. def surround(string, sides):
#.     return sides + string + sides
#. 
#. def alert(string, level):
#.     string = surround(string, ' ')
#.     for _ in range(level):
#.         string = surround(string, '!')
#.     return string
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
#. 
#. def surround(string, sides):
#.     return sides + string + sides
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#. 
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#. 
#.     def surround(string, sides):
msgid "code_bits.surround"
msgstr "surround"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle.text
#. 
#.     temp = hello
#.     hello = temp + '!'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle.text
#. 
#.     temp = hello + '!'
#.     hello = temp
msgid "code_bits.temp"
msgstr "temp"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#. 
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#. 
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#. 
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#. 
#.     test()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.naive_make_board
#. 
#. def make_board(size):
#.     row = []
#.     for _ in range(size):
#.         row.append(' ')
#.     board = []
#.     for _ in range(size):
#.         board.append(row)
#.     return board
#. 
#. def test():
#.     board = make_board(3)
#.     assert_equal(board, [
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#.     board[0][0] = 'X'
#.     assert_equal(board, [
#.         ['X', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#. 
#. test()
msgid "code_bits.test"
msgstr "test"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.print_twice_call_print_many
#. 
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. 
#. def print_twice(x):
#.     print_many(2, x)
#. 
#. print_twice("Hello")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_birdseye
#. 
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. 
#. def print_twice(x):
#.     print_many(2, x)
#. 
#. print_twice("Hello")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_pythontutor
#. 
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. 
#. def print_twice(x):
#.     print_many(2, x)
#. 
#. print_twice("Hello")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_snoop
#. 
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. 
#. def print_twice(x):
#.     print_many(2, x)
#. 
#. print_twice("Hello")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_many
#. 
#. def print_many(thing, n):
#.     for _ in range(n):
#.         print(thing)
#. 
#. print_many("Hello", 3)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
#. 
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. 
#. print_many(3, "Hello")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters.text
#. 
#.     def print_many(n, thing):
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters.text
#. 
#.     thing = "Hello"
#.     n = 3
#.     for _ in range(n):
#.         print(thing)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#. 
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.             break
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#. 
#.     found = False
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#. 
#.     print(found)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. 
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. 
#. print(found)
msgid "code_bits.thing"
msgstr "thing"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#. 
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.             break
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#. 
#.     found = False
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#. 
#.     print(found)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. 
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. 
#. print(found)
msgid "code_bits.thing_to_find"
msgstr "thing_to_find"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.len_of_none
#. 
#. things = print([1, 2, 3])
#. length = len(things)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.print_returns_none
#. 
#. things = [1, 2, 3]
#. length = len(things)
#. printed = print(length)
#. print(printed)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
#. 
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.can_contain_anything
#. 
#. x = 1
#. things = ['Hello', x, x + 3]
#. print(things)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#. 
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.             break
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#. 
#.     found = False
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#. 
#.     print(found)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. 
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. 
#. print(found)
msgid "code_bits.things"
msgstr "things"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
#. 
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.to_find"
msgstr "to_find"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
#. 
#. def diagonal_winner(board):
#.     all_equal1 = True
#.     all_equal2 = True
#.     topleft = board[0][0]
#.     topright = board[0][-1]
#.     for i in range(len(board)):
#.         if board[i][i] == ' ' or board[i][i] != topleft:
#.             all_equal1 = False
#.         if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:
#.             all_equal2 = False
#.     return all_equal1 or all_equal2
msgid "code_bits.topleft"
msgstr "topleft"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
#. 
#. def diagonal_winner(board):
#.     all_equal1 = True
#.     all_equal2 = True
#.     topleft = board[0][0]
#.     topright = board[0][-1]
#.     for i in range(len(board)):
#.         if board[i][i] == ' ' or board[i][i] != topleft:
#.             all_equal1 = False
#.         if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:
#.             all_equal2 = False
#.     return all_equal1 or all_equal2
msgid "code_bits.topright"
msgstr "topright"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.numbers_sum
#. 
#. numbers = [3, 1, 4, 1, 5, 9]
#. 
#. total = 0
#. for number in numbers:
#.     total += number
#. 
#. print(total)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
#. 
#. words = ['This', 'is', 'a', 'list']
#. total = ''
#. for word in words:
#.     total += word
#. 
#. print(total)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. 
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. 
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. 
#. print(total)
msgid "code_bits.total"
msgstr "total"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. 
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#. 
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
#. 
#. def total_cost(cart, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         result += price
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#. 
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. 
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#. 
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.total_cost"
msgstr "total_cost"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. 
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#. 
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. 
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.translations"
msgstr "translations"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.first_return
#. 
#. def double(x):
#.     return x * 2
#. 
#. number = 5
#. twice = double(number)
#. print(number)
#. print(twice)
msgid "code_bits.twice"
msgstr "twice"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
#. 
#. sentence = 'HELLO THERE'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.     else:
#.         char = char.lower()
#.     new_sentence += char
#.     upper = False
#. 
#. print(new_sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
#. 
#. sentence = 'One more exercise, and then you can relax.'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.         upper = False
#.     else:
#.         char = char.lower()
#.         upper = True
#.     new_sentence += char
#. 
#. print(new_sentence)
msgid "code_bits.upper"
msgstr "upper"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#. 
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#. 
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.3.text
#. 
#.     def valid_image(filename):
#.         return filename.endswith(".png") or filename.endswith(".jpg")
msgid "code_bits.valid_image"
msgstr "valid_image"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.index_predict_exercise.text
#. 
#.     some_list.index(value)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_predict_exercise.text
#. 
#.     some_list.remove(value)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_predict_exercise.text
#. 
#.     some_list.count(value)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.in_predict_exercise.text
#. 
#.     value in some_list
msgid "code_bits.value"
msgstr "value"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values.text
#. 
#.     if condition:
#.         return value1
#.     else:
#.         return value2
msgid "code_bits.value1"
msgstr "value1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values.text
#. 
#.     if condition:
#.         return value1
#.     else:
#.         return value2
msgid "code_bits.value2"
msgstr "value2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example
#. 
#. word = 'Amazing'
#. vowels = []
#. consonants = []
#. for letter in word:
#.     if letter.lower() in 'aeiou':
#.         vowels.append(letter)
#.     else:
#.         consonants.append(letter)
#. print(vowels)
#. print(consonants)
msgid "code_bits.vowels"
msgstr "vowels"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. 
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. 
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. 
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. 
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#. 
#.     def winner(board):
#.         ...
#. 
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#. 
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#. 
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#. 
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.winner"
msgstr "winner"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. 
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. 
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. 
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. 
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#. 
#.     def winner(board):
#.         ...
#. 
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#. 
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#. 
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#. 
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. 
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. 
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. 
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. 
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. 
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. 
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. 
#. def print_winner(player):
#.     print(f'{player} wins!')
#. 
#. def print_draw():
#.     print("It's a draw!")
#. 
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#. 
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#. 
#.         if winner(board):
#.             print_winner(player)
#.             return
#. 
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#. 
#.     print_draw()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#. 
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
msgid "code_bits.winning_line"
msgstr "winning_line"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.methods_of_str
#. 
#. word = 'Hello'
#. print(word.upper)
#. print(word.upper())
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.no_append_for_str
#. 
#. word = 'Hello'
#. word.append('!')
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
#. 
#. def print_words(french):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("---")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. 
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. 
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#. 
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. 
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example
#. 
#. word = 'Amazing'
#. vowels = []
#. consonants = []
#. for letter in word:
#.     if letter.lower() in 'aeiou':
#.         vowels.append(letter)
#.     else:
#.         consonants.append(letter)
#. print(vowels)
#. print(consonants)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
#. 
#. words = ['This', 'is', 'a', 'list']
#. total = ''
#. for word in words:
#.     total += word
#. 
#. print(total)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. 
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. 
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. 
#. print(total)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_assign
#. 
#. word = 'Hello'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_check
#. 
#. word
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#. 
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#. 
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. 
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#. 
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
#. 
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. word = 'Goodbye'
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.text
#. 
#.     word = 'Goodbye'
#.     print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
#. 
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.final_text.text
#. 
#.     if word.lower() == 'yes':
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_lower_upper.text
#. 
#.     word.lower()
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.first_print
#. 
#. print(word + ' ' + your_name)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.goodbye_plus_name
#. 
#. word + ' ' + your_name
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign.text
#. 
#.     word = 'Hello'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_assign_goodbye
#. 
#. word = 'Goodbye'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name
#. 
#. word + your_name
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name_with_space
#. 
#. word + ' ' + your_name
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.WritingPrograms.steps.editor_hello_world
#. 
#. word = 'Hello'
#. name = 'World'
#. print(word + ' ' + name)
#. word = 'Goodbye'
#. print(word + ' ' + name)
msgid "code_bits.word"
msgstr "word"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. 
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#. 
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. 
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words
#. 
#. words = ['Python']
#. for index in range(len(words)):
#.     print(index)
#.     print(words[index])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words.text
#. 
#.     [0, 1, 2, ..., len(words) - 2, len(words) - 1]
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
#. 
#. words = ['Python']
#. print(words[len(words) - 1])
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
#. 
#. words = ['This', 'is', 'a', 'list']
#. total = ''
#. for word in words:
#.     total += word
#. 
#. print(total)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. 
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. 
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. 
#. print(total)
msgid "code_bits.words"
msgstr "words"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#. 
#.     first = x1
#. 
#.     if x2 < first:
#.         first = x2
#. 
#.     if x3 < first:
#.         first = x3
#. 
#.     print(first)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#. 
#.     if x1 < x2:
#.         if x1 < x3:
#.             first = x1
#.         else:
#.             first = x3
#.     else:
#.         if x2 < x3:
#.             first = x2
#.         else:
#.             first = x3
#. 
#.     print(first)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#. 
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise
#. 
#. x1 = 1
#. x2 = 2
#. x3 = 3
#. if x1 < x2:
#.     if x1 < x3:
#.         first = x1
#.     else:
#.         first = x3
#. else:
#.     if x2 < x3:
#.         first = x2
#.     else:
#.         first = x3
#. print(first)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise.text
#. 
#.     x1 = 30
#.     x2 = 10
#.     x3 = 20
msgid "code_bits.x1"
msgstr "x1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#. 
#.     first = x1
#. 
#.     if x2 < first:
#.         first = x2
#. 
#.     if x3 < first:
#.         first = x3
#. 
#.     print(first)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#. 
#.     if x1 < x2:
#.         if x1 < x3:
#.             first = x1
#.         else:
#.             first = x3
#.     else:
#.         if x2 < x3:
#.             first = x2
#.         else:
#.             first = x3
#. 
#.     print(first)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#. 
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise
#. 
#. x1 = 1
#. x2 = 2
#. x3 = 3
#. if x1 < x2:
#.     if x1 < x3:
#.         first = x1
#.     else:
#.         first = x3
#. else:
#.     if x2 < x3:
#.         first = x2
#.     else:
#.         first = x3
#. print(first)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise.text
#. 
#.     x1 = 30
#.     x2 = 10
#.     x3 = 20
msgid "code_bits.x2"
msgstr "x2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#. 
#.     first = x1
#. 
#.     if x2 < first:
#.         first = x2
#. 
#.     if x3 < first:
#.         first = x3
#. 
#.     print(first)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#. 
#.     if x1 < x2:
#.         if x1 < x3:
#.             first = x1
#.         else:
#.             first = x3
#.     else:
#.         if x2 < x3:
#.             first = x2
#.         else:
#.             first = x3
#. 
#.     print(first)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#. 
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise
#. 
#. x1 = 1
#. x2 = 2
#. x3 = 3
#. if x1 < x2:
#.     if x1 < x3:
#.         first = x1
#.     else:
#.         first = x3
#. else:
#.     if x2 < x3:
#.         first = x2
#.     else:
#.         first = x3
#. print(first)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise.text
#. 
#.     x1 = 30
#.     x2 = 10
#.     x3 = 20
msgid "code_bits.x3"
msgstr "x3"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.first_print
#. 
#. print(word + ' ' + your_name)
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.goodbye_plus_name
#. 
#. word + ' ' + your_name
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.hello_plus_name
#. 
#. 'Hello ' + your_name
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
#. 
#. your_name = 'Alex'
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name
#. 
#. word + your_name
#. 
#. ------
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name_with_space
#. 
#. word + ' ' + your_name
msgid "code_bits.your_name"
msgstr "your_name"

msgid "frontend.are_you_sure"
msgstr "Are you sure?"

msgid "frontend.ask_for_help"
msgstr "Ask for Help"

msgid "frontend.assessment"
msgstr "Assessment"

msgid "frontend.assessment_description"
msgstr "When you run code that doesn't pass the current step, this section will *sometimes* explain what's wrong."

msgid "frontend.assessment_lint"
msgstr "Found the following generic problem(s) in your code:"

msgid "frontend.assessment_passed_tests"
msgstr "On the bright side, your code passed ${num} test(s)!"

msgid "frontend.cancel"
msgstr "Cancel"

msgid "frontend.chat_on_slack"
msgstr "Chat on Slack"

msgid "frontend.click_for_error_details"
msgstr "Click for error details"

msgid "frontend.click_to_expand"
msgstr "Click to expand"

msgid "frontend.contact_directly"
msgstr "Alternatively, you can contact us directly:"

msgid "frontend.copy_warning"
msgstr ""
"**STOP!**\n"
"\n"
"Try to avoid copy pasting code. You will learn, absorb, and remember better if you type in the code yourself.\n"
"\n"
"When copying is appropriate, there will be a button to click to make it easy. If there's no button, try typing.\n"
"\n"
"Having said that, we're not going to force you. Copy if you really want to."

msgid "frontend.copying_solution_not_allowed"
msgstr "Copying from the hints/solution area is not allowed!"

msgid "frontend.current_page"
msgstr "(current)"

msgid "frontend.description"
msgstr "Description"

msgid "frontend.developer_mode"
msgstr "Developer mode"

msgid "frontend.developer_mode_description"
msgstr "Enables the \"Reverse step\" and \"Skip step\" buttons."

msgid "frontend.did_you_mean"
msgstr "Did you mean..."

msgid "frontend.error_has_been_reported"
msgstr "The error has been reported."

msgid "frontend.error_traceback"
msgstr "Error traceback:"

msgid "frontend.exercise_requirement"
msgstr ""
"This step is an exercise. You need to figure out what code will produce the correct result. Many different correct "
"answers are possible."

msgid "frontend.exercise_stdin"
msgstr ""
"Your program needs to receive input from the user via the `input()` function. When it's tested for correctness, "
"different user inputs will be simulated."

msgid "frontend.feedback"
msgstr "Feedback"

msgid "frontend.feedback_email_placeholder"
msgstr "Email (optional)"

msgid "frontend.function_exercise"
msgstr ""
"Define a function starting like this:\n"
"\n"
"${header}\n"
"\n"
"Then fill in the indented body with your implementation.\n"
"\n"
"The function will be called with different arguments to test that it works generally. You can also call the function yourself to test it as you work, but it doesn't affect the assessment."

msgid "frontend.function_exercise_goal"
msgstr "Your function needs to `${print_or_return}` the correct result."

msgid "frontend.get_another_hint"
msgstr "Get another hint"

msgid "frontend.get_hint"
msgstr "Get a hint"

msgid "frontend.give_feedback"
msgstr "Give feedback"

msgid "frontend.give_feedback_from_menu"
msgstr "Give feedback from the top-left menu."

msgid "frontend.give_feedback_instructions"
msgstr ""
"Tell us what you like or don't like! If you're reporting a bug, give a detailed description of the problem:\n"
"\n"
"- What were you doing before and when the problem occurred?\n"
"- What steps can someone take to reproduce it?\n"
"- What do you observe happening, and what do you expect to happen instead?"

msgid "frontend.hidden_solution_instructions"
msgstr ""
"Above is an example solution, but it's hidden. Click the Reveal button repeatedly to reveal the solution bit by bit. "
"Try to stop when you think you've revealed enough and can fill in the remaining gaps yourself. Then type a solution in"
" the editor and run it. Your solution doesn't have to be the same as the one above."

msgid "frontend.hints_and_solution"
msgstr "Hints and Solution"

msgid "frontend.hints_progress"
msgstr "Shown ${numHints} of ${totalHints} hints"

msgid "frontend.internal_error_start"
msgstr "Oops, something went wrong! ${maybeErrorReported} Here's what you can do:"

msgid "frontend.loading_wait"
msgstr "Loading..."

msgid "frontend.login_or_sign_up"
msgstr "Login / Sign up"

msgid "frontend.new"
msgstr "New"

msgid "frontend.next"
msgstr "Next"

msgid "frontend.no"
msgstr "No"

msgid "frontend.no_hints_available"
msgstr ""
"This step doesn't have any hints. Try reading the instructions and requirements again. You can still check the "
"solution if you're really stuck."

msgid "frontend.no_input_variables"
msgstr "This exercise has no input variables."

msgid "frontend.non_function_exercise"
msgstr ""
"Your code *must* start by assigning value(s) to input variable(s), e.g:\n"
"\n"
"${inputs}\n"
"\n"
"The values are just examples, you can choose different ones. Your code will be tested automatically with different values to check that it works generally."

msgid "frontend.ok"
msgstr "OK"

msgid "frontend.open_github_issue"
msgstr "Open an issue on GitHub"

msgid "frontend.output_prediction_correct"
msgstr "Correct!"

msgid "frontend.output_prediction_error_choice"
msgstr "Error"

msgid "frontend.output_prediction_question"
msgstr "What do you think the result will be?"

msgid "frontend.output_prediction_wrong_once"
msgstr "Oops, that's not right. You can try one more time!"

msgid "frontend.output_prediction_wrong_twice"
msgstr "Sorry, wrong answer. Try again next time!"

msgid "frontend.parsons_solution_instructions"
msgstr ""
"Above is an example solution with the lines out of order. You can drag them around to reorder them. Finding a correct "
"order is up to you, and we won't will tell you if you get it right. Experimenting and running partial solutions in the"
" editor may help you figure it out. You still need to type a correct solution into the editor and run it to continue."

msgid "frontend.previous"
msgstr "Previous"

msgid "frontend.program_in_text"
msgstr "The exact code that you need to run is shown in the text above, in one piece."

msgid "frontend.question_wizard"
msgstr "Question Wizard"

msgid "frontend.question_wizard_expected_output"
msgstr ""
"Good, now enter the output you expect/want from your program below. What would it show if it worked correctly? If it's not supposed to output anything, then add some `print()` calls to your code so that it would output something useful.\n"
"\n"
"When you're done, click 'Run' again to generate your question."

msgid "frontend.question_wizard_intro"
msgstr ""
"If you need help, there are many sites like [Stack Overflow](https://stackoverflow.com/) and [reddit](https://www.reddit.com/r/learnpython/) where you can ask questions. This is a tool to help you write a good quality question that is likely to get answers.\n"
"\n"
"Enter and run your code on the right. If you don't have any code because you don't know where to get started, I'm afraid this tool can't help you. You can still ask for help, but it might be good to first read [What types of questions should I avoid asking?](https://stackoverflow.com/help/dont-ask)\n"
"\n"
"If your question is about servers (e.g. Django or Flask), web requests, databases, or a package that can't be imported here, then this tool won't work. However, just because your current code *involves* those things, that doesn't mean that's what your question is *about*. If you're having a general Python/programming/logic problem, then extract that problem from the other stuff. Python with Django is still Python. If you can't do that, then read [How to create a Minimal, Reproducible Example](https://stackoverflow.com/help/minimal-reproducible-example) before asking your question."

msgid "frontend.refresh_and_try_again"
msgstr "Reload/refresh the page and try again."

msgid "frontend.repeated_frames_description"
msgstr "${name} at line ${lineno} (${count} times)"

msgid "frontend.requirements"
msgstr "Requirements"

msgid "frontend.requirements_description"
msgstr ""
"You need to run some code according to the instructions above. In case those aren't clear enough, here's some extra "
"clarification:"

msgid "frontend.reveal"
msgstr "Reveal"

msgid "frontend.reverse_step"
msgstr "Reverse step"

msgid "frontend.run"
msgstr "Run"

msgid "frontend.send_email_to"
msgstr "Email"

msgid "frontend.settings"
msgstr "Settings"

msgid "frontend.show_shuffled_solution"
msgstr "Show shuffled solution"

msgid "frontend.show_solution"
msgstr "Show solution"

msgid "frontend.show_unscrambled_solution"
msgstr "Show unscrambled solution"

msgid "frontend.sign_out"
msgstr "Sign out"

msgid "frontend.similar_frames_skipped"
msgstr "Similar frames skipped:"

msgid "frontend.skip_step"
msgstr "Skip step"

msgid "frontend.stop"
msgstr "Stop"

msgid "frontend.submit"
msgstr "Submit"

msgid "frontend.table_of_contents"
msgstr "Table of Contents"

msgid "frontend.title"
msgstr "Title"

msgid "frontend.toc_instructions"
msgstr ""
"Below are links to different pages in the course. You can start anywhere and go in any order, and your progress on each page will be recorded.\n"
"\n"
"If you're completely new to programming, or you have doubts, just start at the beginning and click Next as you finish each page."

msgid "frontend.try_running_code_again"
msgstr "Try running the code again."

msgid "frontend.try_using_different_browser"
msgstr "Try using a different browser."

msgid "frontend.verbatim"
msgstr ""
"This step has only one correct answer. You must run exactly the correct code, so check your spelling carefully. Only a"
" few kinds of details (such as spaces in certain places) will be ignored, as they don't make any difference to the "
"program."

msgid "frontend.yes"
msgstr "Yes"

msgid "linting_messages.pyflakes.ImportShadowedByLoopVar.message_format"
msgstr ""
"**Import `{0}` shadowed by loop variable**\n"
"\n"
"The name of the loop variable `{0}` should be changed as it redefines the `{0}` module imported earlier.\n"
"Choose a different loop variable to avoid this error."

msgid "linting_messages.pyflakes.ImportStarNotPermitted.message_format"
msgstr ""
"**Import made using `*` **\n"
"\n"
"`from {0} import *` imports everything from the module `{0}` into the current namespace.\n"
"This creates a bunch of invisible unknown variables.\n"
"It makes it hard to read and understand code and see where things come from.\n"
"\n"
"Avoid this kind of import and instead explicitly import exactly the names you need."

msgid "linting_messages.pyflakes.IsLiteral.message_format"
msgstr ""
"**`is` comparison with literal**\n"
"\n"
"You used the `is`/`is not` operator to compare with a literal (e.g. a string or number).\n"
"You should have rather used the `==` / `!=` operator.\n"
"\n"
"The `is` operator checks if two expressions refer to the exact same object.\n"
"You rarely want to use them, certainly not for basic data types like strings and numbers.\n"
"In those cases they will seem to work sometimes (e.g. for small numbers) and mysteriously\n"
"fail on other occasions."

msgid "linting_messages.pyflakes.MultiValueRepeatedKeyLiteral.message_format"
msgstr ""
"**Dictionary key `{0}` repeated with different values**\n"
"\n"
"A dictionary cannot have multiple entries for the same key.\n"
"Check your code again and change the repeated key to something unique."

msgid "linting_messages.pyflakes.RedefinedWhileUnused.message_format"
msgstr ""
"**Redefined `{0}` without using it**\n"
"\n"
"You defined `{0}` on line `{1}`, but before ever using it you redefined it,\n"
"overwriting the original definition.\n"
"\n"
"In general your functions and classes should have different names.\n"
"Check that you use everything you define, e.g. that you called your functions."

msgid "linting_messages.pyflakes.UnusedImport.message_format"
msgstr ""
"**Unused import `{0}`**\n"
"\n"
"You imported `{0}` but never used it. Did you forget to use it?\n"
"Maybe you used the wrong variable in its place? If you don't need the import, just remove it entirely."

msgid "linting_messages.pyflakes.UnusedVariable.message_format"
msgstr ""
"**Unused variable `{0}`**\n"
"\n"
"You defined a variable `{0}` but never used it. Did you forget to use it?\n"
"Maybe you used the wrong variable in its place? If you don't need it, just remove it entirely."

msgid "misc_terms.blank_result"
msgstr "<nothing>"

msgid "misc_terms.case_sensitive"
msgstr ""
"Python is case sensitive! That means that small and capital letters matter and changing them changes the meaning of "
"the program. The strings `'hello'` and `'Hello'` are different, as are the variable names `word` and `Word`."

msgid "misc_terms.code_should_start_like"
msgstr ""
"Your code should start like this:\n"
"\n"
"{expected_start}\n"

msgid "misc_terms.copy_button"
msgstr "Copy"

msgid "misc_terms.disallowed_default_label"
msgstr "more than {max_count} {label}"

msgid "misc_terms.disallowed_default_message"
msgstr ""
"Well done, you have found a solution! However, for this exercise and your learning, you're not allowed to use {label}."

msgid "misc_terms.expected_mode_birdseye"
msgstr "With your code in the editor, click the `birdseye` button."

msgid "misc_terms.expected_mode_pythontutor"
msgstr "With your code in the editor, click the Python Tutor button."

msgid "misc_terms.expected_mode_shell"
msgstr "Type your code directly in the shell after `>>>` and press Enter."

msgid "misc_terms.expected_mode_snoop"
msgstr "With your code in the editor, click the `snoop` button."

msgid "misc_terms.incorrect_mode"
msgstr "The code is correct, but you didn't run it as instructed."

msgid "misc_terms.invalid_inputs"
msgstr "The values of your input variables are invalid, try using values like the example."

msgid "misc_terms.must_define_function"
msgstr "You must define a function `{function_name}`"

msgid "misc_terms.no_more_test_inputs"
msgstr "No more test inputs - solution should have finished by now"

msgid "misc_terms.not_a_function"
msgstr "`{function_name}` is not a function."

msgid "misc_terms.q_wiz_debugger"
msgstr ""
"It's great that you're using a debugger! Solving the problem on your own is ideal. If you can't, use the 'Run' button "
"to generate the question."

msgid "misc_terms.q_wiz_final_message"
msgstr ""
"\n"
"Great! Here's some final tips:\n"
"\n"
"- Make sure the output is showing the problem you have and not something else.\n"
"- Reduce your code to a **minimal** example. Remove any code that isn't directly related to the problem.\n"
"- Run your code through the `snoop`, `birdseye`, and Python Tutor debuggers to understand what it's doing.\n"
"- Search for your problem online.\n"
"- Read [How do I ask a good question?](https://stackoverflow.com/help/how-to-ask)\n"
"\n"
"If you're really ready, copy and paste the below into the question website,\n"
"and replace the first line with a description of your problem.\n"
"\n"
"You can still change your code or expected output and click Run again to regenerate the question.\n"
"\n"
"    __copyable__\n"
"    *Explain what you're trying to do and why*\n"
"\n"
"    Here's my code:\n"
"\n"
"{}\n"
"\n"
"    This is the result:\n"
"\n"
"{}\n"
"\n"
"    The expected output is:\n"
"\n"
"{}\n"

msgid "misc_terms.q_wiz_input_and_add"
msgstr ""
"and add\n"
"\n"
"    {list_line}\n"
"\n"
"to the top of your code."

msgid "misc_terms.q_wiz_input_message_start"
msgstr ""
"`input()` makes it harder to ask and answer questions about code. Replace calls to input with strings so that everyone"
" can run the code instantly and get the same results."

msgid "misc_terms.q_wiz_input_replace_with"
msgstr ""
"Replace:\n"
"\n"
"{original_lines}\n"
"\n"
"with\n"
"\n"
"{replaced_lines}"

msgid "misc_terms.q_wiz_no_output"
msgstr ""
"Your code didn't output anything. Add some `print()` calls so that at least it outputs *something*. Use code to show "
"readers exactly where the problem is."

msgid "misc_terms.q_wiz_same_as_expected_output"
msgstr ""
"Your output is the same as your expected output! If your problem is still there, adjust your code and/or your expected"
" output so that the two outputs don't match. Make it clear what would be different if the code worked the way you want"
" it to."

msgid "misc_terms.signature_should_be"
msgstr ""
"The signature should be:\n"
"\n"
"    def {function_name}{needed_signature}:\n"
"\n"
"not:\n"
"\n"
"    def {function_name}{actual_signature}:"

msgid "misc_terms.string_spaces_differ"
msgstr ""
"Check that the strings in your code have the correct spaces. For example, `'Hello'` is different from `'Hello '` "
"because of the space at the end."

msgid "misc_terms.syntax_error_at_line"
msgstr "at line"

msgid "misc_terms.when_it_should_output"
msgstr "when it should output:"

msgid "misc_terms.which_is_correct"
msgstr "which is correct!"

msgid "misc_terms.your_code_outputs"
msgstr "Your code outputs:"

msgid "misc_terms.your_code_outputs_given_values"
msgstr ""
"Given these values:\n"
"\n"
"{given_values}\n"
"\n"
"your code outputs:"

#. Special choice at the end of all output prediction multiple choice questions
msgid "output_predictions.Error"
msgstr "Error"

#. https://futurecoder.io/course/#AddingStrings
#. 
#.     # __code0__:
#.     'hello ' + 'world'
#.     'hello' + ' world'
#.     'hello' + ' ' + 'world'
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27+world%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27hello%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27hello+%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27world%27
msgid "pages.AddingStrings.steps.final_text.text"
msgstr ""
"Well done! Any of the following are valid solutions:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#AddingStrings
msgid "pages.AddingStrings.steps.hello_world_concat.text"
msgstr ""
"Strings can be added together using `+`, although this means something very different from adding numbers. For example, try:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#AddingStrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_space
msgid "pages.AddingStrings.steps.hello_world_space.hints.0.text"
msgstr "A space is a character just like any other, like `o` or `w`."

#. https://futurecoder.io/course/#AddingStrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_space
msgid "pages.AddingStrings.steps.hello_world_space.hints.1.text"
msgstr "The space character must be somewhere inside quotes."

#. https://futurecoder.io/course/#AddingStrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_space
msgid "pages.AddingStrings.steps.hello_world_space.messages.literal_answer.text"
msgstr "You must still add two or more strings together."

#. https://futurecoder.io/course/#AddingStrings
msgid "pages.AddingStrings.steps.hello_world_space.requirements"
msgstr "Use `+` to add two or more strings together, so that the result is the string `'hello world'`."

#. https://futurecoder.io/course/#AddingStrings
msgid "pages.AddingStrings.steps.hello_world_space.text"
msgstr ""
"You can see that `+` combines or joins two strings together end to end. Technically, this is called concatenation.\n"
"\n"
"Here's an exercise: change the previous code slightly so that the result is the string `'hello world'`, i.e. with a space between the words.\n"
"\n"
"By the way, if you get stuck, you can click the lightbulb icon in the bottom right for a hint."

#. https://futurecoder.io/course/#AddingStrings
msgid "pages.AddingStrings.title"
msgstr "Adding Strings"

#. https://futurecoder.io/course/#BasicForLoopExercises
msgid "pages.BasicForLoopExercises.steps.final_text.text"
msgstr ""
"We're making really good progress! You're solving problems and writing new code!\n"
"Let's keep making things more interesting."

#. https://futurecoder.io/course/#BasicForLoopExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1
msgid "pages.BasicForLoopExercises.steps.loop_exercise_1.hints.0.text"
msgstr "You should only use one `print`, since each print outputs on a different line."

#. https://futurecoder.io/course/#BasicForLoopExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1
msgid "pages.BasicForLoopExercises.steps.loop_exercise_1.hints.1.text"
msgstr "You will need to use `+`."

#. https://futurecoder.io/course/#BasicForLoopExercises
#. 
#.     # __code0__:
#.     name = 'World'
#. 
#.     for character in name:
#.         print(character)
#.         print('---')
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27World%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.character
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.BasicForLoopExercises.steps.loop_exercise_1.text"
msgstr ""
"Time for some exercises! Modify this program:\n"
"\n"
"__code0__\n"
"\n"
"to instead output:\n"
"\n"
"    __no_auto_translate__\n"
"    ---W\n"
"    ---o\n"
"    ---r\n"
"    ---l\n"
"    ---d"

#. https://futurecoder.io/course/#BasicForLoopExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_2
msgid "pages.BasicForLoopExercises.steps.loop_exercise_2.hints.0.text"
msgstr "Forget loops for a moment. How would you write a program which prints `name` 3 times?"

#. https://futurecoder.io/course/#BasicForLoopExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_2
msgid "pages.BasicForLoopExercises.steps.loop_exercise_2.hints.1.text"
msgstr "The solution looks very similar to the other programs we've seen in this section."

#. https://futurecoder.io/course/#BasicForLoopExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_2
msgid "pages.BasicForLoopExercises.steps.loop_exercise_2.hints.2.text"
msgstr "The for loop will create a variable such as `character`, but the program doesn't need to use it."

#. https://futurecoder.io/course/#BasicForLoopExercises
msgid "pages.BasicForLoopExercises.steps.loop_exercise_2.text"
msgstr ""
"Splendid! Now write a program which prints `name` once for each character in `name`. For example, for `name = 'Amy'`, it should output:\n"
"\n"
"    __no_auto_translate__\n"
"    Amy\n"
"    Amy\n"
"    Amy\n"
"\n"
"For `name = 'World'`, it should output:\n"
"\n"
"    __no_auto_translate__\n"
"    World\n"
"    World\n"
"    World\n"
"    World\n"
"    World\n"
"\n"
"By the way, you can set `name` to anything in the first line. Only the rest of the program after that will be checked."

#. https://futurecoder.io/course/#BasicForLoopExercises
msgid "pages.BasicForLoopExercises.title"
msgstr "Basic For Loop Exercises"

#. https://futurecoder.io/course/#BasicTerminology
msgid "pages.BasicTerminology.steps.final_text.text"
msgstr ""
"Here's some words you need to know:\n"
"\n"
"An ***expression*** is a piece of code that has a value. For example, in this line of code:\n"
"\n"
"    __no_auto_translate__\n"
"    sentence = 'Hello ' + name\n"
"\n"
"there are three expressions:\n"
"\n"
"1. `'Hello '`\n"
"2. `name`\n"
"3. `'Hello ' + name`\n"
"\n"
"By contrast, the full line `sentence = ...` is a ***statement***. It's a command that tells the computer to perform an action. It has no value of its own. This means, for example, that you can't add statements together. This code is invalid:\n"
"\n"
"    (word = 'Hello') + (name = 'Bob')\n"
"\n"
"Specifically, a statement like `sentence = ...` where a variable is given a value is called ***assignment*** - the value is *assigned to* the the variable.\n"
"\n"
"A program is a list of statements which are executed in order. A `for` loop is a *compound statement*, meaning it has a body of its own which contains other statements. Most statements will also contain expressions, and expressions can contain other smaller expressions, but expressions cannot contain statements.\n"
"\n"
"The process of calculating the value of an expression is called ***evaluation*** - note how it almost contains the word 'value'. The computer *evaluates* `1 + 2` to get the value `3`.\n"
"\n"
"The process of executing a loop is called ***iteration***. Code like `for char in 'Hello':` is *iterating over* the string `'Hello'`. The fact that it's possible means that strings are *iterable*. By contrast, numbers are not iterable, which is exactly what Python will tell you if you try `for char in 3:`. Each run through the loop is *one iteration*, so in this example there will be 5 iterations."

#. https://futurecoder.io/course/#BasicTerminology
msgid "pages.BasicTerminology.title"
msgstr "Basic Terminology"

#. https://futurecoder.io/course/#BuildingNewLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.0.text"
msgstr "Remember that you can multiply numbers using `*`."

#. https://futurecoder.io/course/#BuildingNewLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.1.text"
msgstr ""
"This program is structurally very similar to the programs you've written to build up strings character by character."

#. https://futurecoder.io/course/#BuildingNewLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.2.text"
msgstr "Make a new list, and then build it up element by element in a for loop."

#. https://futurecoder.io/course/#BuildingNewLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.3.text"
msgstr "Start with an empty list."

#. https://futurecoder.io/course/#BuildingNewLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.4.text"
msgstr "You can make a list with one element `x` by just writing `[x]`."

#. https://futurecoder.io/course/#BuildingNewLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.5.text"
msgstr "You can add an element to a list by adding a list containing one element."

#. https://futurecoder.io/course/#BuildingNewLists
#. 
#.     # __code0__:
#.     numbers = [1, 2] + [3, 4]
#.     print(numbers)
#.     new_numbers = []
#.     new_numbers += numbers
#.     new_numbers += [5]
#.     print(new_numbers)
#. 
#.     # __code1__:
#.     numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. 
#.     # __code2__:
#.     [6, 2, 8, 2, 10, 18, 4, 12, 10]
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.new_numbers
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
msgid "pages.BuildingNewLists.steps.double_numbers.text"
msgstr ""
"Lists and strings have a lot in common.\n"
"For example, you can add two lists to combine them together into a new list.\n"
"You can also create an empty list that has no elements.\n"
"Check for yourself:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"With that knowledge, write a program which takes a list of numbers\n"
"and prints a list where each number has been doubled. For example, given:\n"
"\n"
"__code1__\n"
"\n"
"it would print:\n"
"\n"
"__code2__"

msgid "pages.BuildingNewLists.steps.filter_numbers.disallowed.0.message"
msgstr "Well done, that's correct! However, you should use `.append()` instead of `+=`."

#. https://futurecoder.io/course/#BuildingNewLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
msgid "pages.BuildingNewLists.steps.filter_numbers.hints.0.text"
msgstr "This is very similar to the previous exercise."

#. https://futurecoder.io/course/#BuildingNewLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
msgid "pages.BuildingNewLists.steps.filter_numbers.hints.1.text"
msgstr "The difference is that sometimes you should skip appending to the new list."

#. https://futurecoder.io/course/#BuildingNewLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
msgid "pages.BuildingNewLists.steps.filter_numbers.hints.2.text"
msgstr "Use an `if` statement."

#. https://futurecoder.io/course/#BuildingNewLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
msgid "pages.BuildingNewLists.steps.filter_numbers.hints.3.text"
msgstr "Use a comparison operator to test if a number is big enough to add."

#. https://futurecoder.io/course/#BuildingNewLists
#. 
#.     # __code2__:
#.     numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. 
#.     # __code1__:
#.     some_list.append(element)
#. 
#.     # __code0__:
#.     some_list += [element]
#. 
#.     # __code3__:
#.     [9, 6]
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.element
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid "pages.BuildingNewLists.steps.filter_numbers.text"
msgstr ""
"Great!\n"
"\n"
"When you want to add a single element to the end of a list, instead of:\n"
"\n"
"__code0__\n"
"\n"
"it's actually more common to write:\n"
"\n"
"__code1__\n"
"\n"
"There isn't really a big difference between these, but `.append`\n"
"will be more familiar and readable to most people.\n"
"\n"
"Now use `.append` to write a program which takes a list of numbers and\n"
"prints a new list containing only the numbers bigger than 5.\n"
"\n"
"For example, given:\n"
"\n"
"__code2__\n"
"\n"
"it would print:\n"
"\n"
"__code3__"

#. https://futurecoder.io/course/#BuildingNewLists
msgid "pages.BuildingNewLists.steps.final_text.text"
msgstr "Fantastic! We're making great progress."

#. https://futurecoder.io/course/#BuildingNewLists
msgid "pages.BuildingNewLists.title"
msgstr "Building New Lists"

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.steps.empty_string.text"
msgstr ""
"The last character in `name` only gets added to `line` at the end of the loop, after `print(line)` has already run for the last time. So that character and the full `name` never get printed at the bottom of the triangle. If you're confused, try putting `print(line)` both before and after `line = line + char`.\n"
"\n"
"Let's get rid of those `-` characters in the output. You might already be able to guess how.\n"
"\n"
"An *empty string* is a string containing no characters at all.\n"
"It's written as just a pair of quotes surrounding nothing: `''`.\n"
"It's like the zero of strings.\n"
"Adding it to another string just gives you the other string unchanged,\n"
"in the same way that `0 + 5` is just `5`.\n"
"\n"
"Try this in the shell:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.steps.final_text.text"
msgstr ""
"Isn't that pretty?\n"
"\n"
"The pattern of starting with something empty and building it up with a `for` loop is *very* common\n"
"and you're going to get lots of practice with it. Some initial empty values are\n"
"`''`, `0`, and `[]` - an empty list, which you'll see soon."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.hello_plus_equals
msgid "pages.BuildingUpStrings.steps.hello_plus_equals.output_prediction_choices.0"
msgstr ""
"Hello\n"
"Hello"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.hello_plus_equals
msgid "pages.BuildingUpStrings.steps.hello_plus_equals.output_prediction_choices.1"
msgstr ""
"Hello\n"
"Hello!"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.hello_plus_equals
msgid "pages.BuildingUpStrings.steps.hello_plus_equals.output_prediction_choices.2"
msgstr ""
"Hello!\n"
"Hello!"

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.steps.hello_plus_equals.text"
msgstr ""
"Before we look at some more loops, we need to quickly learn another concept. Look at this program:\n"
"\n"
"__program_indented__\n"
"\n"
"What do you think the line `hello = hello + '!'` does? Run the program to find out."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid "pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.0"
msgstr ""
"-\n"
"W\n"
"-\n"
"o\n"
"-\n"
"r\n"
"-\n"
"l\n"
"-\n"
"d"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid "pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.1"
msgstr ""
"-W\n"
"-o\n"
"-r\n"
"-l\n"
"-d"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid "pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.2"
msgstr "-World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid "pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.3"
msgstr "-W-o-r-l-d"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid "pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.4"
msgstr ""
"-W\n"
"-Wo\n"
"-Wor\n"
"-Worl\n"
"-World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid "pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.5"
msgstr ""
"-World\n"
"-Worl\n"
"-Wor\n"
"-Wo\n"
"-W"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid "pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.6"
msgstr ""
"-World\n"
"-World\n"
"-World\n"
"-World\n"
"-World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid "pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.7"
msgstr ""
"-World\n"
"--World\n"
"---World\n"
"----World\n"
"-----World"

#. https://futurecoder.io/course/#BuildingUpStrings
#. 
#.     # __code0__:
#.     temp = hello + '!'
#.     hello = temp
#. 
#.     # __code1__:
#.     temp = hello
#.     hello = temp + '!'
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.hello
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.temp
msgid "pages.BuildingUpStrings.steps.name_triangle.text"
msgstr ""
"Python doesn't care that `hello` is on both the left and the right of the `=`, it just does what it would always do if the variables were different: it calculates `hello + '!'` which at the time is `'Hello' + '!'` which is `'Hello!'`, and that becomes the new value of `hello`. If it helps, you can think of that line as split into two steps:\n"
"\n"
"__code0__\n"
"\n"
"or:\n"
"\n"
"__code1__\n"
"\n"
"This is very useful in a loop. Try out this program:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#BuildingUpStrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.hints.0.text"
msgstr "First make sure you're not working from the broken version of the previous program on this page."

#. https://futurecoder.io/course/#BuildingUpStrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.hints.1.text"
msgstr "That is, `line = line + char` should come before `print(line)`."

#. https://futurecoder.io/course/#BuildingUpStrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.hints.2.text"
msgstr "Apart from that, you only need to make one ***tiny*** change."

#. https://futurecoder.io/course/#BuildingUpStrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.hints.3.text"
msgstr "We want to get rid of the `-`. So just do that. Literally."

#. https://futurecoder.io/course/#BuildingUpStrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.hints.4.text"
msgstr "Use an empty string!"

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.text"
msgstr ""
"Don't confuse the empty string with `' '`, which is a non-empty string containing one character: a space.\n"
"\n"
"Now fix the original program to get rid of those lines in the output, so that\n"
"for `name = 'World'` it prints:\n"
"\n"
"    __no_auto_translate__\n"
"    W\n"
"    Wo\n"
"    Wor\n"
"    Worl\n"
"    World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
msgid "pages.BuildingUpStrings.steps.name_triangle_missing_last_line.output_prediction_choices.0"
msgstr ""
"-W\n"
"-Wo\n"
"-Wor\n"
"-Worl\n"
"-World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
msgid "pages.BuildingUpStrings.steps.name_triangle_missing_last_line.output_prediction_choices.1"
msgstr ""
"-Wo\n"
"-Wor\n"
"-Worl\n"
"-World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
msgid "pages.BuildingUpStrings.steps.name_triangle_missing_last_line.output_prediction_choices.2"
msgstr ""
"-\n"
"-W\n"
"-Wo\n"
"-Wor\n"
"-Worl"

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.steps.name_triangle_missing_last_line.text"
msgstr ""
"Take your time to make sure you understand this program fully. It's doing something like this:\n"
"\n"
"    line = '-'\n"
"\n"
"    char = 'W'\n"
"    line = line + char\n"
"         = '-'  + 'W'\n"
"         = '-W'\n"
"    print('-W')\n"
"\n"
"    char = 'o'\n"
"    line = line  + char\n"
"         = '-W'  + 'o'\n"
"         = '-Wo'\n"
"    print('-Wo')\n"
"\n"
"    char = 'r'\n"
"    line = line  + char\n"
"         = '-Wo' + 'r'\n"
"         = '-Wor'\n"
"    print('-Wor')\n"
"\n"
"    ...\n"
"\n"
"The details are important. What happens if you swap the last two lines and run this program instead?\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.title"
msgstr "Building Up Strings"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid "pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.0.text"
msgstr ""
"The first letter should have 0 spaces before it, the second letter should have 1 space before it, the third should "
"have 2, etc."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid "pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.1.text"
msgstr "You should keep the spaces in a variable and build them up in a loop, as before."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid "pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.2.text"
msgstr "The difference is that you need to print letters at the same time as building up spaces."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid "pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.3.text"
msgstr "In other words, you need a single loop that does both."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid "pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.4.text"
msgstr "The body of the loop needs to print the spaces and letter, and also add a space."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid "pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.5.text"
msgstr "Since the first letter should have no spaces before it, you need to add a space after printing a letter."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid "pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.messages.add_space_first.text"
msgstr ""
"Almost there! You have one space too many before each letter.\n"
"Make sure that the first time your loop calls `print`\n"
"your variable which will contain the spaces is an empty string.\n"
"Check the order of your code."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid "pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.text"
msgstr ""
"Sweet! You're really getting the hang of this!\n"
"\n"
"If you want you can do one more optional bonus challenge below.\n"
"If not, you can just continue to the [next page](#BasicTerminology) now.\n"
"You can come back and do this later if you want.\n"
"\n"
"Try writing a program that outputs the given `name` in a diagonal line, e.g:\n"
"\n"
"    W\n"
"     o\n"
"      r\n"
"       l\n"
"        d"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid "pages.BuildingUpStringsExercises.steps.final_text.text"
msgstr "Wow, nothing can stop you!"

msgid "pages.BuildingUpStringsExercises.steps.name_box.disallowed.0.message"
msgstr ""
"Well done, this solution is correct! However, it can be improved.\n"
"You only need to use one loop - using more is inefficient.\n"
"You can reuse the variable containing the line of `-` and `+`."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.0.text"
msgstr "You did all the hard stuff in the previous exercise. Now it's just some simple adding of strings."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.1.text"
msgstr "You only need one for loop - the one used to make the line of dashes from the previous exercise."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.2.text"
msgstr "Don't try and do everything at once. Break the problem up into smaller, easier subproblems."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.3.text"
msgstr ""
"Try writing a program that outputs:\n"
"\n"
"    -----\n"
"    World\n"
"    -----"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.4.text"
msgstr "Since you need to output three separate lines of text, you will need to call `print()` three times."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.5.text"
msgstr ""
"Try writing a program that outputs:\n"
"\n"
"    |World|"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid "pages.BuildingUpStringsExercises.steps.name_box.text"
msgstr ""
"Fantastic!\n"
"\n"
"By the way, when you don't need to use a variable, it's common convention to name that variable `_` (underscore), e.g. `for _ in name:`. This doesn't change how the program runs, but it's helpful to readers.\n"
"\n"
"Let's make this fancier. Extend your program to draw a box around the name, like this:\n"
"\n"
"    +-----+\n"
"    |World|\n"
"    +-----+"

msgid "pages.BuildingUpStringsExercises.steps.name_box_2.disallowed.0.message"
msgstr ""
"Well done, this solution is correct!\n"
"And you used a nested loop (a loop inside a loop) which we haven't even covered yet!\n"
"However, in this case a nested loop is inefficient.\n"
"You can make a variable containing spaces and reuse that in each line."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
msgid "pages.BuildingUpStringsExercises.steps.name_box_2.hints.0.text"
msgstr "You will need two separate for loops over `name`."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
msgid "pages.BuildingUpStringsExercises.steps.name_box_2.hints.1.text"
msgstr ""
"Each line except for the first and last has the same characters in the middle. That means you can reuse something."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
msgid "pages.BuildingUpStringsExercises.steps.name_box_2.hints.2.text"
msgstr "Create a variable containing the spaces in the middle and use it many times."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
msgid "pages.BuildingUpStringsExercises.steps.name_box_2.hints.3.text"
msgstr ""
"Use one loop to create a bunch of spaces, and a second loop to print a bunch of lines using the previously created "
"spaces."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid "pages.BuildingUpStringsExercises.steps.name_box_2.text"
msgstr ""
"You're getting good at this! Looks like you need more of a challenge...maybe instead of putting a name in a box, the name should be the box? Write a program that outputs this:\n"
"\n"
"    +World+\n"
"    W     W\n"
"    o     o\n"
"    r     r\n"
"    l     l\n"
"    d     d\n"
"    +World+"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
msgid "pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.0.text"
msgstr "The solution is very similar to the original triangle program, just make one small change."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
msgid "pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.1.text"
msgstr "You still want to add one character to `line` at a time, it's just a question of where you add it."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
msgid "pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.2.text"
msgstr "You want the lines to be reversed, so you need to reverse/flip something."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
msgid "pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.3.text"
msgstr "You need to add the character before the string, instead of after."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
msgid "pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.4.text"
msgstr "3 + 7 is equal to 7 + 3. Same for all numbers. Is this also true for strings?"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid "pages.BuildingUpStringsExercises.steps.name_triangle_backwards.text"
msgstr ""
"Tremendous! Now modify the program so that each line is backwards, like this:\n"
"\n"
"    __no_auto_translate__\n"
"    W\n"
"    oW\n"
"    roW\n"
"    lroW\n"
"    dlroW"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced
msgid "pages.BuildingUpStringsExercises.steps.name_triangle_spaced.hints.0.text"
msgstr "You will need to use one more `+`."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced
msgid "pages.BuildingUpStringsExercises.steps.name_triangle_spaced.hints.1.text"
msgstr "You will need to use a string consisting of one space: `' '`."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#.     # __code0__:
#.     name = 'World'
#.     line = ''
#.     for char in name:
#.         line = line + char
#.         print(line)
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27World%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.line
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.BuildingUpStringsExercises.steps.name_triangle_spaced.text"
msgstr ""
"Modify this program:\n"
"\n"
"__code0__\n"
"\n"
"to add a space after every character in the triangle, so the output looks like this:\n"
"\n"
"    W\n"
"    W o\n"
"    W o r\n"
"    W o r l\n"
"    W o r l d"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
msgid "pages.BuildingUpStringsExercises.steps.name_underlined.hints.0.text"
msgstr "Look at the triangle program for inspiration."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
msgid "pages.BuildingUpStringsExercises.steps.name_underlined.hints.1.text"
msgstr "Look at the program where you printed `name` once for each character for inspiration."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
msgid "pages.BuildingUpStringsExercises.steps.name_underlined.hints.2.text"
msgstr "You will need to build up a string of dashes (`-`) one character at a time."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
msgid "pages.BuildingUpStringsExercises.steps.name_underlined.hints.3.text"
msgstr "The for loop will create a variable such as `char`, but the program doesn't need to use it."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. 
#.     # __code0__:
#.     line = line + char
#. 
#.     # __code1__:
#.     line += char
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.line
msgid "pages.BuildingUpStringsExercises.steps.name_underlined.text"
msgstr ""
"Brilliant!\n"
"\n"
"Code like:\n"
"\n"
"__code0__\n"
"\n"
"is so common that Python lets you abbreviate it. This means the same thing:\n"
"\n"
"__code1__\n"
"\n"
"Note that there is no abbreviation for `line = char + line`.\n"
"\n"
"Now use `+=` and a for loop to write your own program which prints `name` 'underlined', like this:\n"
"\n"
"    World\n"
"    -----\n"
"\n"
"There should be one `-` for each character in `name`."

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid "pages.BuildingUpStringsExercises.title"
msgstr "Building Up Strings Exercises"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.final_text.text"
msgstr ""
"The word 'attribute' in the error message refers to the use of `.` - the error actually comes just from `word.append`,"
" without even a call."

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.introducing_callable.text"
msgstr ""
"An expression like `len(things)` or `print(things)` is a function ***call*** - when you write that, you are ***calling*** the function `len` or `print`. The fact that this is possible means that functions are ***callable***:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.len_of_none.text"
msgstr ""
"`None` is a special 'null' value which can't do anything interesting. It's a common placeholder that represents the lack of a real useful value. Functions that don't want to return anything return `None` by default. If you see an error message about `None` or `NoneType`, it often means you assigned the wrong thing to a variable:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.methods_of_str.text"
msgstr ""
"A ***method*** is a function which belongs to a type, and can be called on all values of that type using `.`. For example, `upper` and `lower` are methods of strings, which are called with e.g. `word.upper()`:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.no_append_for_str.text"
msgstr ""
"Another example is that `append` is a method of lists. But you can't use `.upper` on a list or `.append` on a string:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.not_callable.text"
msgstr ""
"Most things are not callable, so trying to call them will give you an error:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.print_functions.text"
msgstr ""
"It's time to expand your vocabulary some more.\n"
"\n"
"`print` and `len` are ***functions***. See for yourself:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.print_returns_none.text"
msgstr ""
"In the call `len(things)`, `things` is an ***argument***. Sometimes you will also see the word ***parameter***, which means basically the same thing as argument. It's a bit like you're giving the argument to the function - specifically we say that the argument `things` is *passed* to `len`, and `len` *accepts* or *receives* the argument.\n"
"\n"
"`len(things)` will evaluate to a number such as 3, in which case we say that `len` ***returned*** 3.\n"
"\n"
"All calls have to return something...even if it's nothing. For example, `print`'s job is to display something on screen, not to return a useful value. So it returns something useless instead:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.title"
msgstr "Terminology: Calling functions and methods"

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid "pages.CallingFunctionsWithinFunctions.steps.final_text.text"
msgstr ""
"`birdseye` only shows one frame (function call) at a time. At first you see the global frame.\n"
"At the bottom is the call to `print_twice`. Click on the little blue arrow to take\n"
"you into that frame, and then click on the next one to enter `print_many`."

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid "pages.CallingFunctionsWithinFunctions.steps.print_twice_call_print_many.text"
msgstr ""
"The body of a function can contain anything, including function calls. In fact we've already done that by calling\n"
"print. But calling one of our own functions is no different, so our functions can call each other!\n"
"\n"
"For example, we can implement `print_twice` using `print_many`:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid "pages.CallingFunctionsWithinFunctions.steps.see_stack_in_birdseye.requirements"
msgstr "Run the same program as above, but with `birdseye`."

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid "pages.CallingFunctionsWithinFunctions.steps.see_stack_in_birdseye.text"
msgstr ""
"Each time a function is called, a new *frame* is created, which contains the local variable values\n"
"in that call and other information about what's currently happening.\n"
"When the function call completes, the frame is deleted.\n"
"\n"
"You can see this in Python Tutor on the right under \"Frames\". At the top is the Global frame,\n"
"the top level frame where the whole program is running. As you click Next, new frames appear\n"
"and then disappear. In each one you can see the values of the variables.\n"
"\n"
"Finally, run the program with `birdseye`."

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid "pages.CallingFunctionsWithinFunctions.steps.see_stack_in_pythontutor.requirements"
msgstr "Run the same program as above, but with Python Tutor."

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid "pages.CallingFunctionsWithinFunctions.steps.see_stack_in_pythontutor.text"
msgstr ""
"`snoop` starts each function call with:\n"
"\n"
"1. A new level of indentation in the logs.\n"
"2. `>>> Call to <function name>`\n"
"3. The values of the arguments.\n"
"4. The function header line.\n"
"\n"
"It ends the call with `<<< Return value from <function name>`. We'll learn about return values soon.\n"
"\n"
"Now run the program again with Python Tutor."

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid "pages.CallingFunctionsWithinFunctions.steps.see_stack_in_snoop.requirements"
msgstr "Run the same program as above, but with `snoop`."

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid "pages.CallingFunctionsWithinFunctions.steps.see_stack_in_snoop.text"
msgstr ""
"It's important to get a good sense of what's going on here and to know how\n"
"to explore function calls, so we're going to try this out in each debugger.\n"
"\n"
"First, run the program again with `snoop`."

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid "pages.CallingFunctionsWithinFunctions.title"
msgstr "Calling Functions Within Functions"

#. https://futurecoder.io/course/#CombiningAndAndOr
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.0.text"
msgstr "How many diagonals are there on the board?"

#. https://futurecoder.io/course/#CombiningAndAndOr
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.1.text"
msgstr "Which entries of the three sublists make up each diagonal? How can you access these entries?"

#. https://futurecoder.io/course/#CombiningAndAndOr
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.2.text"
msgstr "Every list always has 3 entries, so no need for a loop."

#. https://futurecoder.io/course/#CombiningAndAndOr
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.3.text"
msgstr ""
"There are two problems to solve here: checking for a win in a specific diagonal, and combining the checks for each "
"diagonal."

#. https://futurecoder.io/course/#CombiningAndAndOr
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.4.text"
msgstr "One problem can be solved using `and`, the other using `or`."

#. https://futurecoder.io/course/#CombiningAndAndOr
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.5.text"
msgstr ""
"There's a lot of similarity with the `all_equal` function. You can even call that function to help! But then you have "
"to include its definition."

#. https://futurecoder.io/course/#CombiningAndAndOr
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.6.text"
msgstr "Similar to `all_equal`, check that the 3 entries on a diagonal are equal to each other, e.g. by using `and`."

#. https://futurecoder.io/course/#CombiningAndAndOr
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.7.text"
msgstr "Check the two diagonals together, using `or`."

#. https://futurecoder.io/course/#CombiningAndAndOr
#. 
#.     # __code4__:
#.     def diagonal_winner(board):
#.         ...
#. 
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'O', 'X'],
#.                 ['X', 'X', 'O'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         True
#.     )
#. 
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', 'O'],
#.                 ['X', 'O', 'O'],
#.                 ['O', 'X', 'X']
#.             ]
#.         ),
#.         True
#.     )
#. 
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O'],
#.                 ['X', 'X', 'X'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#. 
#.     # __code3__:
#.     board = [
#.         ['X', 'O', 'X'],
#.         ['X', 'X', 'O'],
#.         ['O', 'O', 'X']
#.     ]
#. 
#.     # __code1__:
#.     (True or False) and False
#. 
#.     # __code2__:
#.     True or (False and False)
#. 
#.     # __code0__:
#.     True or False and False
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal_winner
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.text"
msgstr ""
"If you read it casually from left to right, you may think that:\n"
"\n"
"__code0__\n"
"\n"
"is equivalent to\n"
"\n"
"__code1__\n"
"\n"
"but it's actually equivalent to\n"
"\n"
"__code2__\n"
"\n"
"This is because `and` has a higher priority than `or`.\n"
"This is important because the first interpretation reduces to `True and False` which is `False`, while the second\n"
"interpretation reduces to `True or False` which is `True`!\n"
"You can try both options with parentheses in the shell to confirm.\n"
"\n"
"**The lesson here is to be extra careful when combining operators.** Either add parentheses to be safe or\n"
"break up your expression into smaller parts and assign each part to a variable.\n"
"This will make your code clear, readable, and unambiguous, and will save you from painful mistakes.\n"
"\n"
"Time for an exercise. Suppose you're writing a program to play tic-tac-toe,\n"
"also known as noughts and crosses or Xs and Os. If you've never heard of tic-tac-toe, you can read the rules\n"
"and play a few games [here](https://gametable.org/games/tic-tac-toe/).\n"
"\n"
"We need to check if someone has won a game. Our function `all_equal` is already helpful for checking rows.\n"
"\n"
"Write a function to check if someone has won a game by placing 3 of the same pieces on one of the diagonal lines.\n"
"The board is given as a nested list `board` of 3 sublists, each sublist containing 3 strings, representing a row. For example:\n"
"\n"
"__code3__\n"
"\n"
"The function should return a boolean: `True` if one of the diagonals have 3 of the same pieces, `False` otherwise.\n"
"Click the Copy button to get started with the code below.\n"
"We provided some tests for you, your job is to replace the `...` with your code.\n"
"\n"
"    __copyable__\n"
"__code4__"

#. https://futurecoder.io/course/#CombiningAndAndOr
msgid "pages.CombiningAndAndOr.steps.CombiningAndOr.text"
msgstr ""
"If you use both `and` and `or` in a single expression, it's a lot like combining `*` and `+`.\n"
"The operators are evaluated in a specific order.\n"
"\n"
"For example, try the following code in the shell.\n"
"What do you expect?\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#CombiningAndAndOr
#. 
#.     # __code0__:
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. 
#.     # __code1__:
#.         diagonal1 = all_equal([board[0][0], board[1][1], board[2][2]])
#.         diagonal2 = all_equal([board[2][0], board[1][1], board[0][2]])
#.         return diagonal1 or diagonal2
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.all_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal1
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal2
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal_winner
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.middle
msgid "pages.CombiningAndAndOr.steps.final_text.text"
msgstr ""
"Well done! This was a hard one. Here are some possible solutions:\n"
"\n"
"__code0__\n"
"\n"
"or:\n"
"\n"
"__code1__"

#. https://futurecoder.io/course/#CombiningAndAndOr
msgid "pages.CombiningAndAndOr.title"
msgstr "Combining `and` and `or`"

#. https://futurecoder.io/course/#CombiningCompoundStatements
#. 
#.     # __code0__:
#.     sentence = 'Hello World'
#.     excited = True
#. 
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#. 
#.     sentence = new_sentence
#.     print(sentence)
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Hello+World%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.excited
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.new_sentence
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.sentence
msgid "pages.CombiningCompoundStatements.steps.final_text.text"
msgstr ""
"Note how the body of the `if` statement (4 lines) is indented as usual, while the body\n"
"of the `for` loop (1 line) is indented by an additional 4 spaces in each line to show that\n"
"those lines are within the `for` loop. You can see the overall structure of the program\n"
"just by looking at the indentation.\n"
"\n"
"Alternatively, you can put an `if` inside a `for`:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"These two programs have the exact same result. However the first one is more efficient as it\n"
"only iterates over the string if it needs to, since when `excited = False` nothing changes."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid "pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.0"
msgstr "Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid "pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.2"
msgstr "Hello World!!!!!!!!!!!"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid "pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.3"
msgstr "!!!!!!!!!!!Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid "pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.4"
msgstr "Hello World!"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid "pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.5"
msgstr "!Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid "pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.6"
msgstr "!Hello World!"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid "pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.7"
msgstr "H!e!l!l!o! !W!o!r!l!d!"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid "pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.8"
msgstr "!H!e!l!l!o! !W!o!r!l!d"

#. https://futurecoder.io/course/#CombiningCompoundStatements
msgid "pages.CombiningCompoundStatements.steps.for_inside_if.text"
msgstr ""
"Compound statements like `for` loops and `if` statements have bodies which are a list\n"
"of inner statements. Those inner statements can be anything, including other compound statements.\n"
"Try this example of a `for` loop inside an `if` statement for when you want to show\n"
"that you're *really* excited:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#CombiningCompoundStatements
msgid "pages.CombiningCompoundStatements.title"
msgstr "Combining Compound Statements"

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.0.text"
msgstr "You have to change the name in the function definition header, but that's not all."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.1.text"
msgstr "If you just change the name in the function definition header, what happens?"

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.2.text"
msgstr "You get an error. Look at the message. What is it telling you? Where does the error come from?"

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.3.text"
msgstr "If your function is called `say_hello`, what does `greet(\"Alice\")` mean?"

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.4.text"
msgstr "You need to change exactly 3 lines of the program."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.5.text"
msgstr "In each line you change, change exactly one word."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.6.text"
msgstr "Don't touch the body of the function. It should still have `print(\"How are you?\")`."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.7.text"
msgstr "You should still call the function twice after defining it, with arguments `\"Alice\"` and `\"Bob\"`."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#.     # __code0__:
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22How+are+you%3F%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%22Hello+%7Bname%7D%21%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.DefiningFunctions.steps.change_function_name.text"
msgstr ""
"Note how the output of the program changed. `How are you?` is printed twice. You can think of the whole program as being\n"
"equivalent to this:\n"
"\n"
"__code0__\n"
"\n"
"This shows one of the most useful things about functions. They let you reuse the same code multiple times without\n"
"having to repeat yourself. It's like writing a program within a program.\n"
"\n"
"The header line of a function definition always has these parts:\n"
"\n"
"1. The special keyword `def`, followed by a space.\n"
"2. The name of the function. This is like a variable name - you can choose the name you want, but there are some constraints,\n"
"e.g. it can't contain a space.\n"
"3. A pair of parentheses `(` and `)`\n"
"4. Zero or more parameter names between the parentheses, separated by commas if there's more than one. Here we have\n"
"one parameter called `name`.\n"
"5. A colon `:`\n"
"\n"
"Let's do some simple exercises. Change the name of the function from `greet` to `say_hello`.\n"
"Make sure the whole program stays working as before, but don't change anything else."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.0.text"
msgstr "You have to change the parameter name in the function definition header, but that's not all."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.1.text"
msgstr "If you just change the parameter name in the function definition header, what happens?"

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.2.text"
msgstr "You get an error. Look at the message. What is it telling you? Where does the error come from?"

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.3.text"
msgstr "If the parameter is called `person_name`, what does `print(f\"Hello {name}!\")` mean?"

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.4.text"
msgstr "You need to change exactly 2 lines of the program."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.5.text"
msgstr "In each line you change, change exactly one word."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.6.text"
msgstr "Don't touch the part after the function definition, i.e. `say_hello(\"Alice\")` and `say_hello(\"Bob\")`."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.7.text"
msgstr "You should still have two statements in the function body, including `print(\"How are you?\")`."

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.change_parameter_name.text"
msgstr "Good! Now do a similar exercise: change the name of the parameter from `name` to `person_name`."

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.define_greet.text"
msgstr ""
"You've seen how to call functions such as `print()` and `len()`. Now you're going to learn how to write your own\n"
"functions that you or other people can use. This is very important as programs get bigger and more complicated.\n"
"\n"
"Here's a simple example:\n"
"\n"
"__program_indented__\n"
"\n"
"This defines a function called `greet` which accepts one parameter. Below the definition, we call the function twice.\n"
"Run the code to see what happens."

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.final_text.text"
msgstr "Perfect! Now you have a solid foundation of the basics of defining functions."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
msgid "pages.DefiningFunctions.steps.how_are_you.output_prediction_choices.0"
msgstr ""
"Hello Alice!\n"
"How are you?\n"
"Hello Bob!\n"
"How are you?"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
msgid "pages.DefiningFunctions.steps.how_are_you.output_prediction_choices.1"
msgstr ""
"Hello Alice!\n"
"Hello Bob!\n"
"How are you?"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
msgid "pages.DefiningFunctions.steps.how_are_you.output_prediction_choices.2"
msgstr ""
"Hello Alice!\n"
"How are you?\n"
"Hello Bob!"

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.how_are_you.requirements"
msgstr ""
"Add `print(\"How are you?\")` after `print(f\"Hello {name}!\")` with the same indentation.\n"
"Keep the two calls to `greet` after the definition as is."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#.     # __code0__:
#.     def greet(name):
#.         print(f"Hello {name}!")
#.         print("How are you?")
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22How+are+you%3F%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%22Hello+%7Bname%7D%21%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.greet
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.DefiningFunctions.steps.how_are_you.text"
msgstr ""
"A function definition is a compound statement. Like `if` and `for`, it has a header line followed by an indented body\n"
"which can contain one or more statements.\n"
"\n"
"Add another statement to the function so that it looks like this:\n"
"\n"
"__code0__\n"
"\n"
"Then run the program again."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_many
msgid "pages.DefiningFunctions.steps.print_many.output_prediction_choices.2"
msgstr ""
"Hello\n"
"Hello\n"
"Hello"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_many
msgid "pages.DefiningFunctions.steps.print_many.output_prediction_choices.3"
msgstr "Hello"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_many
msgid "pages.DefiningFunctions.steps.print_many.output_prediction_choices.4"
msgstr ""
"H\n"
"e\n"
"l\n"
"l\n"
"o"

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.print_many.text"
msgstr ""
"Functions can have many parameters. Here's an example:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.0.text"
msgstr "There's no clever problem solving here, this is just about following the recipe for defining a function."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.1.text"
msgstr "Make sure you have all the parts of a function listed above."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.2.text"
msgstr "That includes `def`, `()`, and `:`."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.3.text"
msgstr "Make sure your function is named `print_twice`."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.4.text"
msgstr "Make sure it accepts one parameter called `x` in between the parentheses `()`."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.5.text"
msgstr "Look at the other functions defined above for help."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.6.text"
msgstr "Use the parameter inside the function body."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.7.text"
msgstr "Make sure the body is indented."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.8.text"
msgstr "The body needs two statements or a very simple loop."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.9.text"
msgstr "Make sure that you don't call `print_twice` inside the function body of `print_twice`. Check your indentation."

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.print_twice_exercise.requirements"
msgstr "Write a program which defines a function called `print_twice` as described above."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#.     # __code0__:
#.     Hello
#.     Hello
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.Hello
msgid "pages.DefiningFunctions.steps.print_twice_exercise.text"
msgstr ""
"Well done!\n"
"\n"
"Now write your own function called `print_twice` which accepts one argument `x` and prints that argument twice\n"
"on two lines.\n"
"\n"
"For example, `print_twice(\"Hello\")` should output:\n"
"\n"
"__code0__\n"
"\n"
"You can test your function by calling it after the function definition, but it's not required."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
msgid "pages.DefiningFunctions.steps.swap_parameters.hints.0.text"
msgstr "The only change to the function definition should be the swapping of parameters as instructed, nothing else."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
msgid "pages.DefiningFunctions.steps.swap_parameters.hints.1.text"
msgstr "You need to fix the call to `print_many`."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
msgid "pages.DefiningFunctions.steps.swap_parameters.hints.2.text"
msgstr "If the function is defined as `def print_many(n, thing)`, what does `print_many(\"Hello\", 3)` mean?"

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
msgid "pages.DefiningFunctions.steps.swap_parameters.hints.3.text"
msgstr "We still want `thing = \"Hello\"` and `n = 3`."

#. https://futurecoder.io/course/#DefiningFunctions
#. 
#.     # __code0__:
#.     thing = "Hello"
#.     n = 3
#.     for _ in range(n):
#.         print(thing)
#. 
#.     # __code1__:
#.     def print_many(n, thing):
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Hello%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_many
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.thing
msgid "pages.DefiningFunctions.steps.swap_parameters.text"
msgstr ""
"Note the commas used to separate parameters in the function definition and arguments in the function call,\n"
"and the correspondence between the definition and the call:\n"
"\n"
"    def print_many(thing, n):\n"
"                     ^    ^\n"
"                     |    |\n"
"      print_many(\"Hello\", 3)\n"
"\n"
"So calling `print_many(\"Hello\", 3)` is like running:\n"
"\n"
"__code0__\n"
"\n"
"Now for another simple exercise. Swap around the parameters in the function definition header so that it says:\n"
"\n"
"__code1__\n"
"\n"
"If you do this and nothing else, you will get an error. Fix the rest of the program so that it behaves like before.\n"
"*Don't change the body of the function*."

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.title"
msgstr "Defining Functions"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
msgid "pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.hints.0.text"
msgstr "Remember that we previously had `for item in cart` in the function, but `cart` is no longer an argument."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
msgid "pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.hints.1.text"
msgstr "Now `quantities` is the only argument that defines what the customer is buying."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
msgid "pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.hints.2.text"
msgstr ""
"You need to iterate over the keys of `quantities` instead. Remember that 'iterate' here means 'loop over' with a `for`"
" loop."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
msgid "pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.hints.3.text"
msgstr "You can use `.keys()`, but you don't have to."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. 
#.     # __code0__:
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27box%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27cat%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27dog%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.item
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.price
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.prices
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quantities
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quantity
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.result
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.total_cost
msgid "pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text"
msgstr ""
"Now you can use this to modify our function on the previous page to remove the `cart` argument:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
msgid "pages.DictionaryKeysAndValues.steps.english_to_french.hints.0.text"
msgstr "You will need to iterate (loop) over the dictionary."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
msgid "pages.DictionaryKeysAndValues.steps.english_to_french.hints.1.text"
msgstr "You need to print both the key (English word) and the value (French word) of each dictionary entry."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
msgid "pages.DictionaryKeysAndValues.steps.english_to_french.hints.2.text"
msgstr "You can get the value using the key in the same way as always."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. 
#.     # __code0__:
#.     def print_words(french):
#.         ...
#. 
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27boite%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27box%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27pomme%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.french
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_words
msgid "pages.DictionaryKeysAndValues.steps.english_to_french.text"
msgstr ""
"That looks nice! We've fully solved the problem of adding up the total cost.\n"
"\n"
"Coming back to our first example: write a function\n"
"which prints out each word in an English-to-French dictionary and its translation, labeling them with their languages.\n"
"Here's your starting code:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"For example, the last line of code above should print:\n"
"\n"
"    English: apple\n"
"    French: pomme\n"
"    ---\n"
"    English: box\n"
"    French: boite\n"
"    ---"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
msgid "pages.DictionaryKeysAndValues.steps.english_to_german.hints.0.text"
msgstr "This is still very similar to the previous exercise, nothing special yet."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
msgid "pages.DictionaryKeysAndValues.steps.english_to_german.hints.1.text"
msgstr "You can reuse your previous solution, just add another argument and a tiny bit of code inside."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
msgid "pages.DictionaryKeysAndValues.steps.english_to_german.hints.2.text"
msgstr "You now have to print one dictionary key and two dictionary values."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. 
#.     # __code0__:
#.     def print_words(french, german):
#.         ...
#. 
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apfel%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27boite%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27box%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27kasten%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27pomme%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.french
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.german
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_words
msgid "pages.DictionaryKeysAndValues.steps.english_to_german.text"
msgstr ""
"Great! Now let's add a German dictionary as well:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"That should print:\n"
"\n"
"    English: apple\n"
"    French: pomme\n"
"    German: apfel\n"
"    ---\n"
"    English: box\n"
"    French: boite\n"
"    German: kasten\n"
"    ---\n"
"\n"
"The two dictionaries will always have the same keys, just different values."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
msgid "pages.DictionaryKeysAndValues.steps.final_text.text"
msgstr "Congratulations! You've reached the end of the course so far. More is on the way!"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
msgid "pages.DictionaryKeysAndValues.steps.introducing_keys.requirements"
msgstr "Run `print(quantities.keys())` where `quantities` is a dictionary."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. 
#.     # __code0__:
#.     quantities = {'apple': 1, 'cat': 10}
#.     print(quantities)
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27cat%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quantities
msgid "pages.DictionaryKeysAndValues.steps.introducing_keys.text"
msgstr ""
"Copy this code into the editor:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Then change `print(quantities)` to `print(quantities.keys())`, and run the whole program."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.DictionaryKeysAndValues.steps.keys_are_iterable.text"
msgstr ""
"The `.keys()` method of `dict` does basically what you'd expect. You can iterate over the value it returns\n"
"just like you'd iterate over a list:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
msgid "pages.DictionaryKeysAndValues.steps.keys_are_iterable2.requirements"
msgstr ""
"Run the same code as the previous step, but without `.keys()`. after `quantities`, so the middle line is `for key in "
"quantities:`"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
msgid "pages.DictionaryKeysAndValues.steps.keys_are_iterable2.text"
msgstr ""
"Actually, you don't even need `.keys()`. Iterating directly over a dictionary automatically iterates over its keys.\n"
"Sometimes it's nice to write `.keys()` to make your code more readable, but you don't have to.\n"
"Remove the `.keys()` and run the code again."

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.DictionaryKeysAndValues.steps.nested_dictionaries.text"
msgstr ""
"Beautiful! There's a pattern emerging here. The two languages could be merged into one big nested dictionary:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
msgid "pages.DictionaryKeysAndValues.title"
msgstr "Iterating over Dictionary Keys"

#. https://futurecoder.io/course/#EqualsVsIs
#. 
#.     # __code0__:
#.     list2 = list1.copy()
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.list1
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.list2
msgid "pages.EqualsVsIs.steps.final_text.text"
msgstr ""
"Now `list1 is list2` is `True`, because *there is only one list*, and the two variables\n"
"`list1` and `list2` both refer to that same list. `list1.append(4)` appends to the one list\n"
"and the result can be seen in both `print(list1)` and `print(list2)` because both lines\n"
"are now just different ways of printing the same list.\n"
"\n"
"I recommend running both versions with Python Tutor to see how it visualises the difference.\n"
"In the second case, the two variables both have arrows pointing to a single list object.\n"
"\n"
"`list2 = list1` doesn't create an eternal link between the variables. If you assign a new value\n"
"to *either* of the variables, e.g. `list1 = [7, 8, 9]`, the other variable will be unaffected\n"
"and will still point to the original list.\n"
"\n"
"Basically, an assignment like:\n"
"\n"
"    list2 = <expression>\n"
"\n"
"means 'make the variable `list2` refer to whatever `<expression>` evaluates to'.\n"
"It doesn't make a copy of that value, which is how both variables can end up pointing to the same list.\n"
"But as we've learned before, `list2` doesn't remember `<expression>`, only the value.\n"
"It doesn't know about other variables.\n"
"\n"
"You can copy a list with the `copy` method:\n"
"\n"
"__code0__\n"
"\n"
"This will make the program behave like the first version again.\n"
"\n"
"If you come across this kind of problem and you're still having trouble understanding this stuff, read the essay [Facts and myths about Python names and values](https://nedbatchelder.com/text/names.html)."

#. https://futurecoder.io/course/#EqualsVsIs
msgid "pages.EqualsVsIs.steps.same_list.requirements"
msgstr "Run the same program as above, but replace the *second* `[1, 2, 3]` with `list1`."

#. https://futurecoder.io/course/#EqualsVsIs
msgid "pages.EqualsVsIs.steps.same_list.text"
msgstr ""
"This program is quite straightforward and mostly consists of things you're familiar with.\n"
"We create two variables which refer to lists.\n"
"The lists have the same elements, so they are equal: `list1 == list2` is `True`.\n"
"\n"
"But then there's a new comparison operator: `is`. Here `list1 is list2` is `False`.\n"
"That means that regardless of the two lists being equal,\n"
"they are still two separate, distinct, individual lists.\n"
"As a result, when you append 4 to `list1`, only `list1` changes.\n"
"\n"
"Now change `list2 = [1, 2, 3]` to `list2 = list1` and see what difference it makes."

#. https://futurecoder.io/course/#EqualsVsIs
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.EqualsVsIs.steps.two_separate_lists.text"
msgstr ""
"It's time to learn some technical details that are often misunderstood and lead to errors.\n"
"Run this program:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#EqualsVsIs
msgid "pages.EqualsVsIs.title"
msgstr "`==` vs `is`, and Having Multiple Names for One Value"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.FunctionsAndMethodsForLists.steps.append_vs_concatenate.text"
msgstr ""
"Let's review how to work with lists. Suppose we have a list `nums = [1, 2, 3]`. You can use:\n"
"\n"
"- **`append`**: Add an element to the end of the list. `nums.append(4)` changes the list to `[1, 2, 3, 4]`.\n"
"- **`len`**: Returns the number of elements. `len(nums)` is `3`.\n"
"- **`range`**: `range(n)` is an object similar to the list of numbers from `0` to `n - 1`. That means it contains `n` numbers. In particular, `range(len(nums))` is like `[0, 1, 2]`, which are the indices of every element in `nums`.\n"
"- **`[]` (subscripting/indexing)**: Get a value at an index. `nums[0]` is `1`, `nums[1]` is `2`, `nums[2]` is `3`.\n"
"- **`+`**: Concatenates lists. `nums + [4, 5]` is `[1, 2, 3, 4, 5]`.\n"
"\n"
"Note that `nums.append(4)` modifies the existing list `nums`, while `nums + [4, 5]` does not.\n"
"One way to preserve the value of `nums + [4, 5]` is to assign it to a *new variable*.\n"
"Run the following code:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid "pages.FunctionsAndMethodsForLists.steps.final_text.text"
msgstr "Great job!"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#.     # __code0__:
#.     some_list.index(value)
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value
msgid "pages.FunctionsAndMethodsForLists.steps.index_predict_exercise.text"
msgstr ""
"**`index`**: Returns the first index of a value in a list using the syntax\n"
"\n"
"__code0__\n"
"\n"
"Raises an error if the value isn't there. For example run this line in the shell:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.0.text"
msgstr ""
"Your solution should have exactly three statements: `x = ['a', 'b', 'c']`, `y = ` followed by one line copied exactly "
"from the list, and `print(y)`."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.1.text"
msgstr "Which lines of code create a new list rather than modifying?"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.2.text"
msgstr "`x` is a list. Each element of `x` is a string."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.3.text"
msgstr "You can add lists together, you can add strings together, but you can't add a string and a list."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.4.text"
msgstr "How do you make a list containing one element?"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid "pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.requirements"
msgstr ""
"Copy the three lines above, then replace `(insert_one_line_from_above)` with exactly one line from the long list of "
"lines from before. You must choose the correct line, there's only one right answer. Type in the line exactly. Do not "
"replace the `y = ` part, that should still be there just before the line that you type in, on the same line."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#.     # __code0__:
#.     x = ['a', 'b', 'c']
#.     y = (insert_one_line_from_above)
#.     print(y)
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid "pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.text"
msgstr ""
"Excellent!\n"
"\n"
"You might realize that working with the last element via `x[len(x) - 1]` is a bit cumbersome.\n"
"The same can be achieved by `x[-1]`.\n"
"Similarly, the second to last element `x[len(x) - 2]` can be written as `x[-2]`, and so on.\n"
"Python allows us to count the index backwards too, starting at the last element with `-1`:\n"
"\n"
"| Index     | First elt. | Second elt. | Third elt.  | ... | 2nd to last elt. | Last elt.  |\n"
"|-----------|------------|-------------|-------------|-----|------------------|------------|\n"
"| Forwards  | `0`        | `1`         | `2`         | ... | `len(x) - 2`     |`len(x) - 1`|\n"
"| Backwards | `-len(x)`  |`-len(x) + 1`|`-len(x) + 2`| ... | `-2`             |  `-1`      |\n"
"\n"
"Next exercise:\n"
"\n"
"This time, rather than modifying the list `x`, you will create a new list `y`:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"`y` should be the same as `x` but also have the first element repeated at the end.\n"
"Therefore the program will print `['a', 'b', 'c', 'a']`."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#.     # __code0__:
#.     some_list.pop(index)
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.index
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid "pages.FunctionsAndMethodsForLists.steps.pop_predict_exercise.text"
msgstr ""
"**`pop`**: Removes and returns an element at a given *index* using the syntax\n"
"\n"
"__code0__\n"
"\n"
"Without an argument, i.e. just `some_list.pop()`, it will remove and return the last element.\n"
"Raises an error if `index` is not a valid index of `some_list`. For example run this program:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid "pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.0.text"
msgstr ""
"Your solution should have exactly three statements: `x = ['a', 'b', 'c']`, then one line copied exactly from the list "
"(no additions), and `print(x)`."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid "pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.1.text"
msgstr "Moving the first element to the end requires two things."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid "pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.2.text"
msgstr "Removing the first element..."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid "pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.3.text"
msgstr "and adding it to the end."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid "pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.4.text"
msgstr "Which functions/methods can you use for this?"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid "pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.5.text"
msgstr "Remember that the first index is 0."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid "pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.requirements"
msgstr ""
"Copy the three lines above, then replace `(insert_one_line_from_above)` with exactly one line from the long list just "
"before that. You must choose the correct line, there's only one right answer. Type in the line exactly."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#.     # __code0__:
#.     x[len(x)] = x[0]
#.     x[len(x) - 1] = x[0]
#.     x[len(x) + 1] = x[0]
#.     x + x[0]
#.     [x] + x[0]
#.     x + [x[0]]
#.     [x] + [x[0]]
#.     x + x.pop(0)
#.     [x] + x.pop(0)
#.     x + [x.pop(0)]
#.     [x] + [x.pop(0)]
#.     x.pop(x.append(0))
#.     x.append(x.pop(0))
#.     x.append(x[0])
#.     x.append(x.index(0))
#.     x.index(x.append(0))
#.     x.pop(x.index(0))
#.     x.index(x.pop(0))
#. 
#.     # __code1__:
#.     x = ['a', 'b', 'c']
#.     (insert_one_line_from_above)
#.     print(x)
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid "pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.text"
msgstr ""
"Now you will solve four short exercises involving these concepts.\n"
"Below is a list of correct and incorrect lines of code mixed together.\n"
"Each upcoming exercise has a solution that includes exactly one of the lines below,\n"
"and you must find the correct line from the list.\n"
"\n"
"__code0__\n"
"\n"
"Here is an incomplete program:\n"
"\n"
"    __copyable__\n"
"__code1__\n"
"\n"
"Replace the middle line with one line from the list above. The final program should modify `x` to move the first element to the end, so that it prints `['b', 'c', 'a']`."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.0.text"
msgstr ""
"Your solution should have exactly three statements: `x = [1, 2, 0, 3]`, one line copied exactly from the list (no "
"additions), and `print(x)`."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.1.text"
msgstr "What does `x.remove(0)` do?"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.2.text"
msgstr "It removes an element!"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.3.text"
msgstr "Which function/method can also remove an element?"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.4.text"
msgstr "The other function/method can't simply be told 'remove 0', it needs a different kind of information."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.5.text"
msgstr "Specifically, it needs to be told where 0 is."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.6.text"
msgstr "Which function/method provides that kind of information?"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.requirements"
msgstr ""
"Copy the three lines above, then replace `x.remove(0)` with exactly one line from the long list of lines from before. "
"The line you choose should have the same effect as `x.remove(0)`, so that the program prints `[1, 2, 3]`."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#.     # __code0__:
#.     x = [1, 2, 0, 3]
#.     x.remove(0)
#.     print(x)
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.text"
msgstr ""
"Great work. Now the final exercise:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Replace the middle line `x.remove(0)` with a line from the list that does the same thing."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#.     # __code0__:
#.     some_list.remove(value)
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value
msgid "pages.FunctionsAndMethodsForLists.steps.remove_predict_exercise.text"
msgstr ""
"**`remove`**: Removes the first occurrence of the given *value* using the syntax\n"
"\n"
"__code0__\n"
"\n"
"Raises an error if the value isn't in the list. For example run this program:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.0.text"
msgstr ""
"Your solution should have exactly three statements: `x = ['a', 'b', 'c']`, then one line copied exactly from the list "
"(no additions), and `print(x)`."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.1.text"
msgstr "You need to get the value of the first element in `x`..."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.2.text"
msgstr "and assign that value to the last position in `x`."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.3.text"
msgstr "How do you assign a value at a specific index in the list?"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.4.text"
msgstr "What are the indices of the first and last last elements in `x`?"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid "pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.requirements"
msgstr ""
"Copy the three lines above, then replace `(insert_one_line_from_above)` with exactly one line from the long list in "
"the previous step. You must choose the correct line, there's only one right answer. Type in the line exactly."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#.     # __code0__:
#.     x = ['a', 'b', 'c']
#.     (insert_one_line_from_above)
#.     print(x)
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid "pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.text"
msgstr ""
"Good job. For the next exercise, start with the same incomplete program:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Choose a line of code from the list that overwrites the last element of `x` with the first element,\n"
"so now it should print `['a', 'b', 'a']`."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. 
#.     # __code0__:
#.     some_list[index] = new_value
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.index
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.new_value
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid "pages.FunctionsAndMethodsForLists.steps.subscript_assignment_predict.text"
msgstr ""
"As you can see, `+` does not modify `nums`, but `append` does.\n"
"\n"
"Here's some new things.\n"
"\n"
"**`subscript assignment`**: Set a value at an index (replacing the value that was there before) using the syntax\n"
"\n"
"__code0__\n"
"\n"
"Raises an error if `index` is not a valid index of `some_list`. For example, run this program:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid "pages.FunctionsAndMethodsForLists.title"
msgstr "Functions and Methods for Lists"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.final_text.text"
msgstr ""
"If you're still not quite comfortable with `range` and/or `len`, practice and experiment with it for a bit.\n"
"Here are some simple exercises you can try on your own if you want.\n"
"\n"
"- Print the numbers from `1` to `100` inclusive.\n"
"- Print your name 100 times.\n"
"- Print each word in a list `words` except for the last one.\n"
"- Print each word in `words` in reverse order, i.e. print the last word, then the second last word, etc.\n"
"- Revisit the bonus problem at the end of the [Introducing Lists page](#IntroducingLists),\n"
"whether or not you completed it. It's now much easier with `range` and `len`!\n"
"\n"
"When you're ready, continue to the next page for something a bit more challenging."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.index_error
msgid "pages.GettingElementsAtPosition.steps.index_error.program"
msgstr "words[4]"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.index_error.requirements"
msgstr "Run something like `words[3]` but replace `3` with a bigger number."

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.index_error.text"
msgstr ""
"In general, you can get the element at the position `i` with `words[i]`. The operation is called *subscripting* or *indexing*, and the position is called the *index*.\n"
"\n"
"You've probably noticed that the first index is 0, not 1. In programming, counting starts at 0. It seems weird, but that's how most programming languages do it, and it's generally agreed to be better.\n"
"\n"
"This also means that the last index in this list of 4 elements is 3. What happens if you try getting an index greater than that?"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.indices_out_of_bounds.text"
msgstr "Now try `__program__` in the shell."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid "pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.0"
msgstr ""
"This\n"
"is\n"
"a\n"
"list"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid "pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.2"
msgstr ""
"0\n"
"This\n"
"1\n"
"is\n"
"2\n"
"a\n"
"3\n"
"list"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid "pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.3"
msgstr ""
"This\n"
"0\n"
"is\n"
"1\n"
"a\n"
"2\n"
"list\n"
"3"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid "pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.4"
msgstr ""
"0\n"
"1\n"
"2\n"
"3\n"
"This\n"
"is\n"
"a\n"
"list"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid "pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.5"
msgstr ""
"This\n"
"is\n"
"a\n"
"list\n"
"0\n"
"1\n"
"2\n"
"3"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid "pages.GettingElementsAtPosition.steps.introducing_len_and_range.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"indices = [0, 1, 2, 3]\n"
"\n"
"for index in indices:\n"
"    print(index)\n"
"    print(words[index])"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.introducing_len_and_range.text"
msgstr ""
"There you go. `words[4]` and beyond don't exist, so trying that will give you an error.\n"
"That first program is a bit repetitive. Let's improve it with a list and a loop!\n"
"\n"
"__program_indented__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_subscripting
msgid "pages.GettingElementsAtPosition.steps.introducing_subscripting.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"\n"
"print(words[0])\n"
"print(words[1])\n"
"print(words[2])\n"
"print(words[3])"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.introducing_subscripting.text"
msgstr ""
"Looping is great, but often you just want to retrieve a single element from the list at a known position.\n"
"Here's how:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words
msgid "pages.GettingElementsAtPosition.steps.print_indices_and_words.hints.0.text"
msgstr "Remember that earlier we used `range(4)`."

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words
msgid "pages.GettingElementsAtPosition.steps.print_indices_and_words.hints.1.text"
msgstr "This time, it should work for any list. What if the list has 5 elements, or 10?"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words
msgid "pages.GettingElementsAtPosition.steps.print_indices_and_words.hints.2.text"
msgstr "Combine the two functions you learned!"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. 
#.     # __code0__:
#.     [0, 1, 2, ..., len(words) - 2, len(words) - 1]
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.words
msgid "pages.GettingElementsAtPosition.steps.print_indices_and_words.text"
msgstr ""
"So in general, the valid indices are:\n"
"\n"
"__code0__\n"
"\n"
"Now we can fix the program from earlier to work with any list. Fill in the `...`:\n"
"\n"
"    __copyable__\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"\n"
"    for index in ...:\n"
"        print(index)\n"
"        print(words[index])\n"
"\n"
"For the given example value of `words` it should print:\n"
"\n"
"    0\n"
"    This\n"
"    1\n"
"    is\n"
"    2\n"
"    a\n"
"    3\n"
"    list"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.0.text"
msgstr "To access the last element of the list, you'll need the index of the last position."

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.1.text"
msgstr "If the list has 2 elements, the first element is at index 0, so the last element is at index 1."

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.2.text"
msgstr "Likewise, if the list had 3 elements, the last element would be at index 2."

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.3.text"
msgstr "Do you see a pattern between those numbers? How can you express it?"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.4.text"
msgstr "Can you come up with a general solution that works for any length?"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.print_last_element.text"
msgstr ""
"Exercise: for any non-empty list `words`, print the last element. For example, if\n"
"\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"\n"
"your program should print `list`."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.printing_the_range
msgid "pages.GettingElementsAtPosition.steps.printing_the_range.output_prediction_choices.4"
msgstr ""
"This\n"
"is\n"
"a\n"
"list"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.GettingElementsAtPosition.steps.printing_the_range.text"
msgstr ""
"As you can see, the result is the same. Try this:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.range_almost_the_same_as_list.text"
msgstr "`range(4)` is the same thing as `[0, 1, 2, 3]` ... almost. Try `__program__` in the shell."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_len
msgid "pages.GettingElementsAtPosition.steps.range_len.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"indices = range(4)\n"
"\n"
"for index in indices:\n"
"    print(index)\n"
"    print(words[index])"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.range_len.requirements"
msgstr ""
"Run the same program from the previous step, but replace the second line `indices = [0, 1, 2, 3]` with `indices = "
"range(4)`."

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.range_len.text"
msgstr ""
"That's a bit better, but writing out `[0, 1, 2, ...]` isn't great, especially if it gets long.\n"
"There's a handy function `range` to do that part for you. Replace `[0, 1, 2, 3]` with `range(4)`,\n"
"i.e. `indices = range(4)`."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_versus_list
msgid "pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.0"
msgstr "range(4)"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_versus_list
msgid "pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.1"
msgstr "range(0, 4)"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_versus_list
msgid "pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.2"
msgstr "list(range(4))"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_versus_list
msgid "pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.3"
msgstr "list(range(0, 4))"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_versus_list
msgid "pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.4"
msgstr "range(0, 1, 2, 3)"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.range_versus_list.text"
msgstr ""
"That's probably a bit surprising. If you're curious, the `0` represents the start of the range.\n"
"`0` is the default start, so `range(4)` is equal to `range(0, 4)`.\n"
"`4` is the end of the range, but the end is always excluded, so the last value is `3`.\n"
"If you're confused now, don't worry about it.\n"
"\n"
"There's a good reason for why `range(4)` is not actually a list - it makes programs faster and more efficient.\n"
"It's not worth explaining that more right now.\n"
"\n"
"But you can easily convert it to a list: try `__program__` in the shell."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.using_len_first_time
msgid "pages.GettingElementsAtPosition.steps.using_len_first_time.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"print(len(words))"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. 
#.     # __code0__:
#.     [0, 1, 2, ..., n - 2, n - 1]
#. 
#.     # __code1__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.GettingElementsAtPosition.steps.using_len_first_time.text"
msgstr ""
"That's just a demonstration to let you see a range in a more familiar form.\n"
"You should almost never actually do that.\n"
"\n"
"If you're feeling overwhelmed, don't worry! All you need to know is that `range(n)`\n"
"is very similar to the list:\n"
"\n"
"__code0__\n"
"\n"
"By the way, you can get the number of elements in a list (commonly called the *length*) using the `len` function.\n"
"Try it by running this code:\n"
"\n"
"    __copyable__\n"
"__code1__"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.title"
msgstr "Getting elements at a position, `range()`, and `len()`"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
msgid "pages.GettingElementsAtPositionExercises.steps.final_text.text"
msgstr "Magnificent! Take a break, you've earned it!"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.0.text"
msgstr "You will need to look at all the possible indices of `things` and check which one is the answer."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.1.text"
msgstr "To look at all possible indices, you will need a loop over `range(len(things))`."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.2.text"
msgstr "To check if an index is the answer, you will need to use:"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.3.text"
msgstr "- `if`"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.4.text"
msgstr "- the index in a subscript"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.5.text"
msgstr "- `==`"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.6.text"
msgstr "Since you're looking for the first index, you need to stop the loop once you find one."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.7.text"
msgstr "You learned how to stop a loop in the middle recently."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.8.text"
msgstr "You need to use `break`."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.index_exercise.messages.all_indices.text"
msgstr ""
"You're almost there! However, this prints all the indices,\n"
"not just the first one."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.index_exercise.messages.last_index.text"
msgstr ""
"You're almost there! However, this prints the *last* index,\n"
"not the first one."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
msgid "pages.GettingElementsAtPositionExercises.steps.index_exercise.text"
msgstr ""
"Given a list `things` and a value `to_find`,\n"
"print the first index of `to_find` in the list, i.e. the lowest number `i` such that\n"
"`things[i]` is `to_find`. For example, for\n"
"\n"
"    __no_auto_translate__\n"
"    things = ['on', 'the', 'way', 'to', 'the', 'store']\n"
"    to_find = 'the'\n"
"\n"
"your program should print `1`.\n"
"\n"
"You can assume that `to_find` appears at least once."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.0.text"
msgstr "Did you experiment with indexing and `len()` with strings in the shell?"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.1.text"
msgstr ""
"Forget loops for a moment. How would you print just the first line, which has the first character of each of the two "
"strings?"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.2.text"
msgstr "In the second line you want to print the second character of each string, and so on."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.3.text"
msgstr "You will need a `for` loop."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.4.text"
msgstr "You will need indexing (subscripting)."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.5.text"
msgstr "You will need `range`."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.6.text"
msgstr "You will need `len`."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.7.text"
msgstr "You will need `+`."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.8.text"
msgstr "You will need to index both strings."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.9.text"
msgstr "You will need to pass the same index to both strings each time to retrieve matching characters."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
msgid "pages.GettingElementsAtPositionExercises.steps.zip_exercise.text"
msgstr ""
"Nice!\n"
"\n"
"By the way, indexing and `len()` also work on strings. Try them out in the shell.\n"
"\n"
"Here's another exercise. Given two strings of equal length, e.g:\n"
"\n"
"    __no_auto_translate__\n"
"    string1 = 'Hello'\n"
"    string2 = 'World'\n"
"\n"
"print them vertically side by side, with a space between each character:\n"
"\n"
"    H W\n"
"    e o\n"
"    l r\n"
"    l l\n"
"    o d"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.0.text"
msgstr ""
"The solution has the same overall structure and essential elements of the previous solution, but it's significantly "
"longer and will require a few additional ideas and pieces."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#.     # __code0__:
#.     for i in range(...):
#.         ...
#.         print(char1 + ' ' + char2)
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char1
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char2
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.1.text"
msgstr ""
"In particular, it should still contain something like:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.2.text"
msgstr "What should go inside `range()`? Neither `len(string1)` nor `len(string2)` is good enough."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.3.text"
msgstr "You want a loop iteration for every character in the longer string."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.4.text"
msgstr "That means you need `range(<length of the longest string>)`"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.5.text"
msgstr ""
"In other words you need to find the biggest of the two values `len(string1)` and `len(string2)`. You've already done "
"an exercise like that."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.6.text"
msgstr ""
"Once you've sorted out `for i in range(...)`, `i` will sometimes be too big to be a valid index for both strings. You "
"will need to check if it's too big before indexing."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.7.text"
msgstr "Remember, the biggest valid index for `string1` is `len(string1) - 1`. `len(string1)` is too big."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.8.text"
msgstr "You will need two `if` statements, one for each string."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid "pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.9.text"
msgstr "You will need to set e.g. `char1 = ' '` when `string1[i]` is not valid."

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. 
#.     # __code0__:
#.     for i in range(len(string1)):
#.         char1 = string1[i]
#.         char2 = string2[i]
#.         print(char1 + ' ' + char2)
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char1
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char2
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.string1
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.string2
msgid "pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.text"
msgstr ""
"Incredible!\n"
"\n"
"Your solution probably looks something like this:\n"
"\n"
"__code0__\n"
"\n"
"This doesn't work so well if the strings have different lengths.\n"
"In fact, it goes wrong in different ways depending on whether `string1` or `string2` is longer.\n"
"Your next challenge is to fix this problem by filling in 'missing' characters with spaces.\n"
"\n"
"For example, for:\n"
"\n"
"    __no_auto_translate__\n"
"    string1 = 'Goodbye'\n"
"    string2 = 'World'\n"
"\n"
"output:\n"
"\n"
"    G W\n"
"    o o\n"
"    o r\n"
"    d l\n"
"    b d\n"
"    y\n"
"    e\n"
"\n"
"and for:\n"
"\n"
"    __no_auto_translate__\n"
"    string1 = 'Hello'\n"
"    string2 = 'Elizabeth'\n"
"\n"
"output:\n"
"\n"
"    H E\n"
"    e l\n"
"    l i\n"
"    l z\n"
"    o a\n"
"      b\n"
"      e\n"
"      t\n"
"      h"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
msgid "pages.GettingElementsAtPositionExercises.title"
msgstr "Exercises with `range()` and `len()`"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.dir_list.text"
msgstr ""
"Perfect!\n"
"\n"
"It can also be useful to Google things like \"python list tutorial\", e.g. if:\n"
"\n"
"- Googling a specific method has failed so you want to find it manually.\n"
"- You're still confused about lists after this course.\n"
"- It's been a while since you learned about lists and you need a reminder.\n"
"- You're struggling to solve a problem with lists and you need to go back to basics and strengthen your foundations.\n"
"\n"
"There are also ways to find information without any googling. Try `__program__` in the shell."

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.final_text.text"
msgstr ""
"`dir()` returns a list of the argument's attributes, which are mostly methods. Many will start with `__` which you can"
" ignore for now - scroll to the end of the list and you'll see some familiar methods."

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.list_insert
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.hints.0.text"
msgstr "Use the words 'python' and 'list' in your search query."

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.list_insert
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.hints.1.text"
msgstr "Instead of putting the value at the beginning or end, we want to put it ____________?"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.list_insert
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.hints.2.text"
msgstr "'in the middle' or 'at an index' or 'at a particular position'"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.list_insert
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.hints.3.text"
msgstr "'python add value at index'"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.requirements"
msgstr ""
"Run code similar to the three lines above, but change `nums.append(9)` to the right function/method call\n"
"to put 9 right after the second element (2 in the example `nums = [1, 2, 3, 4, 5]`) instead of at the end.\n"
"There's only one correct answer for what the middle line should be.\n"
"You need to search online to figure out which function/method to use and how to use it."

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. 
#.     # __code0__:
#.     nums = [1, 2, 3, 4, 5]
#.     nums.append(9)
#.     print(nums)
#. 
#.     # __code1__:
#.     [1, 2, 3, 4, 5, 9]
#. 
#.     # __code2__:
#.     [1, 2, 9, 3, 4, 5]
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.nums
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.text"
msgstr ""
"Good find! Let's do one more. Consider this program:\n"
"\n"
"__code0__\n"
"\n"
"This changes `nums` so that it prints:\n"
"\n"
"__code1__\n"
"\n"
"But suppose you don't want the 9 to be at the end, you want it to go between the second and third elements, so the output is:\n"
"\n"
"__code2__\n"
"\n"
"Replace the middle line `nums.append(9)` with the right function/method call to do that."

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.sum_list
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.hints.0.text"
msgstr "Use the words 'python' and 'list' in your search query."

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.sum_list
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.hints.1.text"
msgstr "In one word, what's special about `91` in the list `[21, 55, 4, 91, 62, 49]`?"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.sum_list
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.hints.2.text"
msgstr "'biggest' or 'largest'"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.sum_list
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.hints.3.text"
msgstr "'python biggest value in list'"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.requirements"
msgstr ""
"Run code similar to `sum([21, 55, 4, 91, 62, 49])` but replace `sum` with the name of another specific function.\n"
"There's only one correct answer for which function should be used. You need to search online to figure out which one.\n"
"It's a commonly used built-in function in Python."

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.text"
msgstr ""
"It's useful to know the functions we just covered, but it's not easy to learn them all, and there's many more. A more important skill is being able to look things up. For example, here are some typical ways you might Google the above functions if you forgot their names:\n"
"\n"
"- `append`\n"
"    - python add element to list\n"
"    - python add item at end of list\n"
"- `len`\n"
"    - python size of list\n"
"    - python number of elements in list\n"
"    - python how many characters in string\n"
"- `sum`\n"
"    - python add list of numbers\n"
"    - python total of numbers\n"
"- `in`\n"
"    - python check if list contains value\n"
"    - python test if list has element\n"
"- `index`\n"
"    - python get position of element\n"
"    - python get index of value\n"
"\n"
"Let's practice this skill now. Find a function/method that returns the value in a list which is bigger than any other value. For example, given the list `[21, 55, 4, 91, 62, 49]`, it will return `91`. You should write the answer in the shell as a single small expression. For example, if you were looking for the function `sum`, you could write `sum([21, 55, 4, 91, 62, 49])`. Don't solve this manually with a loop. Note that the function you're looking for hasn't been mentioned here before."

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid "pages.HowToFindInformationWithGoogleAndMore.title"
msgstr "How to Find Information with Google, and more"

#. https://futurecoder.io/course/#IfAndElse
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.0.text"
msgstr "You've learned all the tools you need for this. I believe in you! Look at previous programs for inspiration."

#. https://futurecoder.io/course/#IfAndElse
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.1.text"
msgstr "You will need a loop to build up the new sentence character by character."

#. https://futurecoder.io/course/#IfAndElse
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.2.text"
msgstr "You will need an `if/else` to choose whether to add an uppercase or lowercase character."

#. https://futurecoder.io/course/#IfAndElse
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.3.text"
msgstr "Your `if/else` needs to execute different bodies depending on which iteration of the loop it's in."

#. https://futurecoder.io/course/#IfAndElse
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.4.text"
msgstr "That means that your `if` condition needs to be a variable that changes inside the loop."

#. https://futurecoder.io/course/#IfAndElse
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.5.text"
msgstr "In the first iteration you need an uppercase letter. In the following iterations you need a lowercase letter."

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.capitalise.text"
msgstr ""
"Time for a challenge!\n"
"\n"
"Write a program which, given a string `sentence`, prints a modified version with\n"
"the same letters, where the first letter is capitalised and the rest are lowercase.\n"
"For example, the output should be `Hello world` whether the input `sentence = 'hello world'`\n"
"or `'HELLO WORLD'`."

#. https://futurecoder.io/course/#IfAndElse
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.0.text"
msgstr "Don't change anything that's already there, just add a bit more code."

#. https://futurecoder.io/course/#IfAndElse
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.1.text"
msgstr "`else` needs to come immediately after the `if` body, with nothing in between."

#. https://futurecoder.io/course/#IfAndElse
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.2.text"
msgstr "`sentence += char` needs to run whether `excited` is `True` or `False`."

#. https://futurecoder.io/course/#IfAndElse
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.3.text"
msgstr "You *could* have a copy of `sentence += char` in both the `if` and `else` blocks, but there's a better way."

#. https://futurecoder.io/course/#IfAndElse
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.4.text"
msgstr "Use `else` to assign a different value to `char`."

#. https://futurecoder.io/course/#IfAndElse
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.5.text"
msgstr "If `excited` is `False`, then `char` should be `'.'` instead of `'!'`."

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.else_full_stop.text"
msgstr ""
"If `excited` is true then `char` is defined and everything runs fine. But otherwise\n"
"`char` never gets assigned a value, so trying to use it in `sentence += char` fails.\n"
"\n"
"Fix this by adding an `else` clause to the `if` so that if `excited` is false, a full stop (`.`)\n"
"is added to the end of the sentence instead of an exclamation mark (`!`)."

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.final_text.text"
msgstr "Perfect! Take a moment to be proud of what you've achieved. Can you feel your brain growing?"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.first_if_else.text"
msgstr ""
"An `if` statement can optionally have an `else` part. Run this example:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.first_if_else_false.requirements"
msgstr "Run the same program from the previous step, but replace `True` with `False`, so that `condition = False`."

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.first_if_else_false.text"
msgstr "Now change the first line to `condition = False` and run it again."

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.if_upper_else_lower.text"
msgstr ""
"Think of `else` as saying 'or else' or 'otherwise'. It means that if the condition in the `if`\n"
"is false, then the body of the `else` will run instead. Whether the condition is true or false,\n"
"exactly one of the two bodies will run.\n"
"\n"
"Here's a more interesting example to run:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.if_upper_else_lower_false.requirements"
msgstr "Run the same program from the previous step, but replace `True` with `False`, so that `excited = False`."

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.if_upper_else_lower_false.text"
msgstr ""
"`sentence.upper()` is a new kind of expression we haven't encountered yet. What's going on here is that `sentence` is a string and strings have various *methods* that let you conveniently calculate new values from them, including `upper` and `lower`. The names refer to uppercase (capital letters) and lowercase (small letters). `'Hello World'.upper()` evaluates to `'HELLO WORLD'`. It doesn't change the contents of `sentence` though, so you have to assign the new value again with `sentence = sentence.upper()`.\n"
"\n"
"Now change `excited` to `False` and run it again."

#. https://futurecoder.io/course/#IfAndElse
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
msgid "pages.IfAndElse.steps.spongebob.hints.0.text"
msgstr "This is similar to the previous exercise. The difference is when and where you set the condition variable."

#. https://futurecoder.io/course/#IfAndElse
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
msgid "pages.IfAndElse.steps.spongebob.hints.1.text"
msgstr "You will need to have a boolean variable which changes with every iteration."

#. https://futurecoder.io/course/#IfAndElse
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
msgid "pages.IfAndElse.steps.spongebob.hints.2.text"
msgstr ""
"First write a small program which takes a boolean variable and flips it, i.e. if the variable is `True` it becomes "
"`False` and if it starts out `False` it's changed to `True`. No loops, just an `if/else`."

#. https://futurecoder.io/course/#IfAndElse
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
msgid "pages.IfAndElse.steps.spongebob.hints.3.text"
msgstr "You will need to use the variable in the `if` condition and also assign to the same variable in the body."

#. https://futurecoder.io/course/#IfAndElse
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
msgid "pages.IfAndElse.steps.spongebob.hints.4.text"
msgstr "Combine that flipping `if/else` with the one that chooses an uppercase or lowercase character."

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.spongebob.text"
msgstr ""
"Excellent!!!\n"
"\n"
"One more exercise, and then you can relax.\n"
"\n"
"Write a program which prints `sentence` mockingly, e.g:\n"
"\n"
"    OnE MoRe eXeRcIsE, aNd tHeN YoU CaN ReLaX.\n"
"\n"
"Every second character should be lowercased, the rest should be uppercase."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char
msgid "pages.IfAndElse.steps.undefined_char.output_prediction_choices.0"
msgstr "Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char
msgid "pages.IfAndElse.steps.undefined_char.output_prediction_choices.1"
msgstr "Hello World!"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.undefined_char.requirements"
msgstr ""
"Copy the program above. Run it as is if you want. Then change `excited = True` to `excited = False` and run it again."

#. https://futurecoder.io/course/#IfAndElse
#. 
#.     # __code0__:
#.     sentence = 'Hello World'
#.     excited = True
#. 
#.     if excited:
#.         char = '!'
#.     sentence += char
#. 
#.     print(sentence)
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Hello+World%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.excited
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.sentence
msgid "pages.IfAndElse.steps.undefined_char.text"
msgstr ""
"Here's a broken program:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Can you see the problem? If you run it, everything seems fine. What could go wrong?\n"
"\n"
"Spoilers below! Have you figured it out?\n"
"\n"
"What happens if you change `excited` to `False`?"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.title"
msgstr "`if` and `else`"

#. https://futurecoder.io/course/#Indentation
msgid "pages.Indentation.steps.final_text.text"
msgstr ""
"When you indent, you should always indent by 4 spaces. Any consistent indentation is actually acceptable, but 4 spaces"
" is the convention that almost everyone follows. Note that the editor generally makes this easy for you. For example, "
"if you press the 'Tab' key on your keyboard in the editor, it will insert 4 spaces for you."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.mismatched_indentations
msgid "pages.Indentation.steps.mismatched_indentations.program"
msgstr ""
"for character in name:\n"
"    print(character)\n"
"  print('---')"

#. https://futurecoder.io/course/#Indentation
msgid "pages.Indentation.steps.mismatched_indentations.text"
msgstr ""
"Since `print('---')` is not indented, it's not part of the loop body. This means it only runs once, after the whole loop has finished running. Both programs are valid, they just do different things.\n"
"\n"
"The program below is invalid. Both lines in the loop body are indented, but by different amounts. The first line starts with 4 spaces, the second line starts with 2. Try running it.\n"
"\n"
"__program_indented__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.missing_indentation
msgid "pages.Indentation.steps.missing_indentation.program"
msgstr ""
"for character in name:\n"
"print(character)"

#. https://futurecoder.io/course/#Indentation
#. 
#.     # __code1__:
#.     for character in name:
#.         print(character)
#. 
#.     # __code0__:
#.     for character in name: print(character)
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.character
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.Indentation.steps.missing_indentation.text"
msgstr ""
"This example loop:\n"
"\n"
"__code0__\n"
"\n"
"works, but actually it would usually (and should) be written like this:\n"
"\n"
"__code1__\n"
"\n"
"Specifically, the code to be repeated (known as the *body*) starts on a new line after the colon (`:`), and it must be *indented*, i.e. have some spaces before it. The code below without indentation is invalid, run it to see for yourself:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#Indentation
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Indentation.steps.one_indented_line.text"
msgstr ""
"There are two indented lines, so they're both part of the body, so `---` gets printed after each character. Now try running the same code without the indentation in the last line:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#Indentation
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Indentation.steps.two_indented_lines.text"
msgstr ""
"The spaces are required to tell Python which lines of code belong to the body of the for loop. This is critical when the loop contains several lines, which it often will. For example, run this code:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#Indentation
msgid "pages.Indentation.title"
msgstr "Indentation"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid "pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.0.text"
msgstr "`input()` always returns a string."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid "pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.1.text"
msgstr "A string that looks like a number is still a string, not a number."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid "pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.2.text"
msgstr "In `super_secret_number = 7`, `7` is a number, not a string."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid "pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.3.text"
msgstr "That makes `super_secret_number` also a number."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid "pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.4.text"
msgstr "A string cannot equal a number."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid "pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.5.text"
msgstr "To check that two values are equal, make sure they're the same type first."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid "pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.6.text"
msgstr "So to compare a number and a string, first convert the number to a string or convert the string to a number."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid "pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.7.text"
msgstr "You learned how to convert between strings and numbers in the previous page."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid "pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.8.text"
msgstr "Use `int()` to convert to an integer (whole number) or `str()` to convert to a string."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. 
#.     # __code0__:
#.     super_secret_number = 7
#. 
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Amazing%21+Are+you+psychic%3F%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Nope%21%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22What+number+am+I+thinking+of%3F%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.guess
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.super_secret_number
msgid "pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text"
msgstr ""
"Whatever you typed in (not including pressing Enter at the end) is returned from the `input()` function as a string.\n"
"\n"
"It's essential to understand that `input()` ***always returns a string***, no matter what the user typed in.\n"
"It's up to you to convert that string to the type you need.\n"
"Forgetting this detail is a common source of confusing bugs.\n"
"\n"
"For example, this program looks fine at a glance, but if you try it out you'll see that it doesn't actually work:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Fix the program so that when the user inputs the value of `super_secret_number` (`7` in this example)\n"
"the program prints `Amazing! Are you psychic?` as expected.\n"
"It should work when `super_secret_number` is any whole number (`int`)."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. 
#.     # __code0__:
#.     if int(guess) == super_secret_number:
#. 
#.     # __code1__:
#.     if guess == str(super_secret_number):
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.guess
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.super_secret_number
msgid "pages.InteractiveProgramsWithInput.steps.final_text.text"
msgstr ""
"Perfect!\n"
"\n"
"There's two main fixes that would work here. You can convert the input to a number:\n"
"\n"
"__code0__\n"
"\n"
"or convert the correct answer to a string:\n"
"\n"
"__code1__\n"
"\n"
"An important difference between these two approaches is that the first approach will raise an error\n"
"if the user types something that isn't a number, which may or may not be what you want."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.InteractiveProgramsWithInput.steps.first_input.text"
msgstr ""
"The programs we have written so far are not interactive.\n"
"To make our interactive Tic-tac-toe game, we will need a method of receiving input from the players.\n"
"Python allows us to do that with the built-in `input` function. Run this program:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"When `name = input()` runs, the program actually stops and waits for you to type in the shell and press Enter,\n"
"so you will need to do that for it to complete."

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
msgid "pages.InteractiveProgramsWithInput.title"
msgstr "Interactive Programs with `input()`"

#. https://futurecoder.io/course/#IntroducingAnd
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise
msgid "pages.IntroducingAnd.steps.AndExercise.hints.0.text"
msgstr ""
"If you have something like `x < 0 and x > 100`, you're on the wrong track. That's going to be `False` for *any* value "
"of `x`!"

#. https://futurecoder.io/course/#IntroducingAnd
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise
msgid "pages.IntroducingAnd.steps.AndExercise.hints.1.text"
msgstr "The solution with `and` is different in several ways from the solution with `or`."

#. https://futurecoder.io/course/#IntroducingAnd
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise
msgid "pages.IntroducingAnd.steps.AndExercise.hints.2.text"
msgstr ""
"Our solution with `or` first determines if `x` is an invalid percentage, else concludes validity. Using `and` will do "
"this in reverse."

#. https://futurecoder.io/course/#IntroducingAnd
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise
msgid "pages.IntroducingAnd.steps.AndExercise.hints.3.text"
msgstr "You will have to reverse the `return` statements accordingly."

#. https://futurecoder.io/course/#IntroducingAnd
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise
msgid "pages.IntroducingAnd.steps.AndExercise.hints.4.text"
msgstr "You will have to change the comparison operators too."

#. https://futurecoder.io/course/#IntroducingAnd
#. 
#.     # __code0__:
#.     def is_valid_percentage(x):
#.         if x < 0 or x > 100:
#.             return False
#.         else:
#.             return True
#. 
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.is_valid_percentage
msgid "pages.IntroducingAnd.steps.AndExercise.text"
msgstr ""
"Let's practice now. Previously we wrote a function `is_valid_percentage` using `or`. Here's an example\n"
"solution:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Rewrite this function using `and` instead."

#. https://futurecoder.io/course/#IntroducingAnd
msgid "pages.IntroducingAnd.steps.FalseAndFalse.text"
msgstr ""
"Finally, try:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingAnd
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.0.text"
msgstr "The list will always have 3 elements."

#. https://futurecoder.io/course/#IntroducingAnd
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.1.text"
msgstr "That means you don't need to use a loop."

#. https://futurecoder.io/course/#IntroducingAnd
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.2.text"
msgstr "Remember that you can get the first element using `row[0]`."

#. https://futurecoder.io/course/#IntroducingAnd
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.3.text"
msgstr "The first element, second element, and third element all need to be equal."

#. https://futurecoder.io/course/#IntroducingAnd
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.4.text"
msgstr "That means the first element should be equal to the second element and also the third element."

#. https://futurecoder.io/course/#IntroducingAnd
#. 
#.     # __code5__:
#.     def all_equal(row):
#.         ...
#. 
#.     assert_equal(all_equal(["X", "X", "X"]), True)
#.     assert_equal(all_equal(["O", "O", "O"]), True)
#.     assert_equal(all_equal(["X", "O", "X"]), False)
#. 
#.     # __code0__:
#.     def is_valid_percentage(x):
#.         if 0 <= x and x <= 100:
#.             return True
#.         else:
#.             return False
#. 
#.     # __code1__:
#.     def is_valid_percentage(x):
#.         return 0 <= x and x <= 100
#. 
#.     # __code4__:
#.     def is_valid_percentage(x):
#.         return 0 <= x <= 100
#. 
#.     # __code2__:
#.     a < b and b < c
#. 
#.     # __code3__:
#.     a < b < c
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.all_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.is_valid_percentage
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.text"
msgstr ""
"Awesome! Here's one possible solution:\n"
"\n"
"__code0__\n"
"\n"
"As before, we can simplify this solution to:\n"
"\n"
"__code1__\n"
"\n"
"There's another trick to improve this further called comparison chaining. Any condition like this:\n"
"\n"
"__code2__\n"
"\n"
"can be shortened by removing the extra `and b` into:\n"
"\n"
"__code3__\n"
"\n"
"This works for any comparison operators, including `==`, and the two operators can even be different.\n"
"So the solution can be simplified to:\n"
"\n"
"__code4__\n"
"\n"
"Next exercise: given a list of three elements, check if all three elements are equal.\n"
"\n"
"    __copyable__\n"
"__code5__"

#. https://futurecoder.io/course/#IntroducingAnd
msgid "pages.IntroducingAnd.steps.TrueAndFalse.text"
msgstr ""
"Good, now try:\n"
"\n"
"__program_indented__\n"
"\n"
"What do you expect?"

#. https://futurecoder.io/course/#IntroducingAnd
msgid "pages.IntroducingAnd.steps.TrueAndTrue.text"
msgstr ""
"Another boolean operator in Python is `and`.\n"
"The expression `A and B` is `True` only if BOTH `A` and `B` are `True`. Otherwise it's `False`.\n"
"Try it in the shell:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingAnd
#. 
#.     # __code0__:
#.     def all_equal(row):
#.         return row[0] == row[1] and row[0] == row[2]
#. 
#.     # __code2__:
#.         return row == [row[0], row[0], row[0]]
#. 
#.     # __code1__:
#.         return row[0] == row[1] == row[2]
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.all_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
msgid "pages.IntroducingAnd.steps.final_text.text"
msgstr ""
"Good job. There are many possible correct solutions here:\n"
"\n"
"__code0__\n"
"\n"
"or using comparison chaining again:\n"
"\n"
"__code1__\n"
"\n"
"or check that it's equal to a list containing the first element three times:\n"
"\n"
"__code2__"

#. https://futurecoder.io/course/#IntroducingAnd
msgid "pages.IntroducingAnd.title"
msgstr "Introducing `and`"

#. https://futurecoder.io/course/#IntroducingBirdseye
#. 
#.     # __code3__:
#.     __program_indented__
#. 
#.     # __code1__:
#.     (a * b) + (c * d)
#. 
#.     # __code2__:
#.     ((a * b) + c) * d
#. 
#.     # __code0__:
#.     a * b + c * d
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingBirdseye.steps.birdseye_loop_example.text"
msgstr ""
"While the other tools show how code runs line by line and the values of variables, `birdseye` shows you the value of every expression in a program. This lets you see how a complex expression is broken down into smaller sub-expressions\n"
"and what the value of each one is.\n"
"\n"
"Hover your mouse over the various boxed expressions in the last line of the program.\n"
"As each box is highlighted, its value is shown at the bottom of the screen. Clicking on the box will stick it on a panel so you can see several expression values at once and move your mouse around freely.\n"
"\n"
"In this case `birdseye` shows that the expression:\n"
"\n"
"__code0__\n"
"\n"
"is broken into\n"
"\n"
"__code1__\n"
"\n"
"rather than\n"
"\n"
"__code2__\n"
"\n"
"In other words, Python follows the usual order of operations in maths, rather than just evaluating from left to right.\n"
"\n"
"Note that there are some expressions that `birdseye` doesn't put in a box. In this case `2`, `3`, `4`, `5`, and `print` are all expressions as well, but their values are obvious and boxing them would just be clutter.\n"
"\n"
"Here's a more complicated example to try out:\n"
"\n"
"    __copyable__\n"
"__code3__"

#. https://futurecoder.io/course/#IntroducingBirdseye
msgid "pages.IntroducingBirdseye.steps.final_text.text"
msgstr ""
"Note that:\n"
"\n"
"1. There's a pair of arrows next to the for loop. Click on them to navigate through the loop in time and see what happened in different iterations.\n"
"2. Code that doesn't run in an iteration because of the `if` is greyed out. The expressions within have no values because they weren't evaluated.\n"
"3. The values recorded for the expressions `vowels` and `consonants` depend on which box you look at. In the lines after the loop, they contain all the letters, but inside the loop they only contain some, and exactly how many depends on which iteration you're on.\n"
"4. In `vowels.append(letter)`, you see what the values of those variables were *at that moment*. That means that `letter` is about to be appended to `vowels` but this hasn't happened yet, so `vowels` doesn't contain `letter`."

#. https://futurecoder.io/course/#IntroducingBirdseye
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingBirdseye.steps.first_birdseye_example.text"
msgstr ""
"You've seen `snoop` and Python Tutor. futurecoder comes with one last tool to analyse programs as they run, called `birdseye`.\n"
"\n"
"Here's an example program to run. Copy it into the editor and click the `birdseye` button. This will open a new browser tab with the visualisation.\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingBirdseye
msgid "pages.IntroducingBirdseye.title"
msgstr "Understanding Programs with `birdseye`"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access.special_messages.bad_french_value.text"
msgstr "Oops, you need to set `french = {'apple': 'pomme', 'box': 'boite'}` before we can continue."

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access.text"
msgstr ""
"`french` is a dictionary with two key-value pairs:\n"
"\n"
"- `'apple': 'pomme'` where `'apple'` is the key and `'pomme'` is the value.\n"
"- `'box': 'boite'` where `'box'` is the key and `'boite'` is the value.\n"
"\n"
"Like lists, a comma (`,`) is used to separate items (key-value pairs) from each other. A colon (`:`) separates the keys from the values.\n"
"Note that curly brackets (`{}`) are used to create the dictionary instead of the square brackets (`[]`) used when writing lists.\n"
"\n"
"Remember that with lists, you get values based on their *index*, i.e. their position in the list.\n"
"So if `words = ['apple', 'box']`, then `words[0]` is `'apple'` and `words[1]` is `'box'`.\n"
"Try this in the shell:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access2.special_messages.bad_french_value.text"
msgstr "Oops, you need to set `french = {'apple': 'pomme', 'box': 'boite'}` before we can continue."

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access2.text"
msgstr ""
"That doesn't work because the position of items in a dictionary usually doesn't matter.\n"
"You don't usually care what's the 2nd or 5th or 100th word of the dictionary,\n"
"you just want to find a specific word like 'apple'. So try that instead:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access3.requirements"
msgstr "Run the same code as the previous step (`french['apple']`) in the shell, but replace `'apple'` with `'box'`."

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access3.special_messages.bad_french_value.text"
msgstr "Oops, you need to set `french = {'apple': 'pomme', 'box': 'boite'}` before we can continue."

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access3.text"
msgstr ""
"That's better!\n"
"\n"
"Now run a similar line in the shell to look up the translation for `'box'`."

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access4.special_messages.bad_french_value.text"
msgstr "Oops, you need to set `french = {'apple': 'pomme', 'box': 'boite'}` before we can continue."

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access4.text"
msgstr ""
"And now you know both Python and French!\n"
"\n"
"Now let's translate from French to English:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.final_text.text"
msgstr ""
"Sorry, you can't do that either. You can only look up a key to get its value, not the other way around.\n"
"The dictionary `french` only has 2 keys: `'apple'` and `'box'`. `'pomme'` is a value, not a key.\n"
"We'll soon learn why you can't just look up values directly, and what you can do about it.\n"
"\n"
"Note that both `french[0]` and `french['pomme']` raised the same type of error: a `KeyError`.\n"
"This error means that the provided key (`0` or `'pomme'` in this case) wasn't found in the dictionary.\n"
"It's not that `french[0]` isn't *allowed*, it's just that it means the same thing as always:\n"
"find the value associated with the key `0`. In this case it finds that no such key exists.\n"
"But `0` *could* be a key, because many types of keys are allowed, including strings and numbers."

#. https://futurecoder.io/course/#IntroducingDictionaries
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingDictionaries.steps.first_dict.text"
msgstr ""
"We've seen several types: `str`, `int`, `float`, `bool`, and `list`.\n"
"Only one of these types can contain multiple values: `list`.\n"
"Now we're going to learn about another container type: `dict`, short for ***dictionary***.\n"
"\n"
"Think of the familiar kind of dictionary where you look up a word to find its definition or a translation in another language.\n"
"Dictionaries in Python are similar, but more general. You look up a *key* (e.g. a word) to get the associated *value* (e.g. a definition or translation).\n"
"\n"
"For example, here's a little dictionary translating English words to French:\n"
"\n"
"__code0__\n"
"\n"
"Run the line above in the shell."

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.title"
msgstr "Introducing Dictionaries"

#. https://futurecoder.io/course/#IntroducingElif
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingElif.steps.dna_example.text"
msgstr ""
"Quick biology lesson! Most of the cells in your body contain your full genetic code in DNA.\n"
"This consists of strands of molecular units called nucleobases which come in four varieties:\n"
"Adenine, Cytosine, Guanine, and Thymine, or ACGT for short.\n"
"So part of a single strand might be something like:\n"
"\n"
"    AGTAGCGTCCTTAGTTACAGGATGGCTTAT...\n"
"\n"
"This will be paired with another strand where A is replaced by T and vice versa,\n"
"and C is replaced by G and vice versa, e.g:\n"
"\n"
"    TCATCGCAGGAATCAATGTCCTACCGAATA...\n"
"\n"
"The two strands are 'zipped' together into the famous double helix structure,\n"
"joined by the matching A-T and C-G pairs. These pairings are essential in copying DNA when\n"
"cells divide and reproduce. The double helix is unzipped and the code is transcribed\n"
"into its opposite version to make the copy.\n"
"\n"
"We're going to repeat that process. Let's try the same kind of program we just wrote:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingElif
msgid "pages.IntroducingElif.steps.dna_example_with_elif.requirements"
msgstr ""
"Copy the program from the first step on this page, but replace the 4 `if` blocks there with the\n"
"combination of `if` and `elif` blocks here. In other words, replace each of the last three `if`s with\n"
"`elif`, but leave the first `if` alone."

#. https://futurecoder.io/course/#IntroducingElif
#. 
#.     # __code0__:
#.     if char == 'A':
#.         char = 'T'
#.     elif char == 'T':
#.         char = 'A'
#.     elif char == 'G':
#.         char = 'C'
#.     elif char == 'C':
#.         char = 'G'
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
msgid "pages.IntroducingElif.steps.dna_example_with_elif.text"
msgstr ""
"Brilliant! You have mimicked what your own cells are constantly doing.\n"
"\n"
"An `if` inside an `else` can be replaced by a single keyword `elif`. For example,\n"
"the previous code can be changed to this:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingElif
#. 
#.     # __code0__:
#.     if char == 'A':
#.         char = 'T'
#.     if char == 'T':
#.         char = 'A'
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else
msgid "pages.IntroducingElif.steps.dna_example_with_else.hints.0.text"
msgstr ""
"Change:\n"
"\n"
"__code0__\n"
"\n"
"to look like the revised snippet. It's just a small change, do it without copy-pasting."

#. https://futurecoder.io/course/#IntroducingElif
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else
msgid "pages.IntroducingElif.steps.dna_example_with_else.hints.1.text"
msgstr "Now make the same kind of change to the code swapping G and C."

#. https://futurecoder.io/course/#IntroducingElif
#. 
#.     # __code0__:
#.     if char == 'A':
#.         char = 'T'
#.     else:
#.         if char == 'T':
#.             char = 'A'
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
msgid "pages.IntroducingElif.steps.dna_example_with_else.text"
msgstr ""
"Oh dear, that doesn't quite work. `T` is changed to `A` but `A` isn't changed to anything.\n"
"Can you see why?\n"
"\n"
"When `char == 'A'`, then the body `char = 'T'` does indeed run. But that means that the following\n"
"condition `char == 'T'` also passes and so `char = 'A'` and we're back where we started.\n"
"We need to only change `char` from `T` to `A` if `char` wasn't already `A` to begin with,\n"
"meaning `char == 'A'` was `False`. We can do that with an `else`, like so:\n"
"\n"
"__code0__\n"
"\n"
"Now fix the program to replace all characters correctly."

#. https://futurecoder.io/course/#IntroducingElif
#. 
#.     # __code0__:
#.     if X:
#.         ...
#.     else:
#.         if Y:
#.             ...
#.         else:
#.             if Z:
#.                 ...
#.             else:
#.                 ...
#. 
#.     # __code1__:
#.     if X:
#.         ...
#.     elif Y:
#.         ...
#.     elif Z:
#.         ...
#.     else:
#.         ...
msgid "pages.IntroducingElif.steps.final_text.text"
msgstr ""
"It's common to have a chain of `elif` clauses when you want exactly one of many\n"
"bodies to run, like in this case. In general, code like this:\n"
"\n"
"__code0__\n"
"\n"
"can be rewritten as:\n"
"\n"
"__code1__\n"
"\n"
"which is both shorter and saves you from unpleasant nested indentation.\n"
"The difference is only cosmetic: once the computer runs this code, it can't\n"
"tell the difference between the two versions.\n"
"\n"
"Note that `elif`(s) can optionally be followed by one final `else`. We didn't include one\n"
"in our DNA example, but we could add one to alert us to any unexpected characters\n"
"in the input, or change `elif char == 'C':` to `else:` if we were confident\n"
"about the input being valid."

#. https://futurecoder.io/course/#IntroducingElif
msgid "pages.IntroducingElif.title"
msgstr "Introducing `elif`"

#. https://futurecoder.io/course/#IntroducingForLoops
msgid "pages.IntroducingForLoops.steps.final_text.text"
msgstr ""
"You can read the code almost like normal English:\n"
"\n"
"> For each character in the string `name`, print that character.\n"
"\n"
"Each character is just a normal string. `character` is a normal variable that is given a new value before the code after the `:` runs. So the code above is equivalent to:\n"
"\n"
"    __no_auto_translate__\n"
"    name = 'World'\n"
"\n"
"    character = 'W'\n"
"    print(character)\n"
"\n"
"    character = 'o'\n"
"    print(character)\n"
"\n"
"    character = 'r'\n"
"    print(character)\n"
"\n"
"    character = 'l'\n"
"    print(character)\n"
"\n"
"    character = 'd'\n"
"    print(character)\n"
"\n"
"Note that we could use a different variable name, `character` just makes it clearer.\n"
"\n"
"A for loop generally follows this structure:\n"
"\n"
"    for <variable> in <collection>: <code to repeat>\n"
"\n"
"The `for`, `in`, and `:` are all essential."

#. https://futurecoder.io/course/#IntroducingForLoops
msgid "pages.IntroducingForLoops.steps.first_for_loop.text"
msgstr ""
"Good news! You've made it past the boring basics. We can start to write some interesting programs and have a bit of fun. One of the most powerful concepts in programming is the *loop*, which lets you repeat the same code over and over. Python has two kinds of loop: `for` loops and `while` loops. Here is an example of a for loop, try running this program:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingForLoops
msgid "pages.IntroducingForLoops.title"
msgstr "Introducing For Loops"

#. https://futurecoder.io/course/#IntroducingFstrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
msgid "pages.IntroducingFstrings.steps.basic_f_string_exercise.hints.0.text"
msgstr "This is just like the given f-string example."

#. https://futurecoder.io/course/#IntroducingFstrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
msgid "pages.IntroducingFstrings.steps.basic_f_string_exercise.hints.1.text"
msgstr "Did you forget the `f`?"

#. https://futurecoder.io/course/#IntroducingFstrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
msgid "pages.IntroducingFstrings.steps.basic_f_string_exercise.hints.2.text"
msgstr "How many pairs of curly brackets do you need?"

#. https://futurecoder.io/course/#IntroducingFstrings
msgid "pages.IntroducingFstrings.steps.basic_f_string_exercise.text"
msgstr ""
"This fails because we cannot use `+` between the string `\"Hello Alice. You are \"` and the number `age`.\n"
"\n"
"Fix this by replacing all the string concatenations (+) with a single f-string."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
msgid "pages.IntroducingFstrings.steps.concatenate_string_number.output_prediction_choices.0"
msgstr "\"Hello \" + name + \". You are \" + age + \" years old.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
msgid "pages.IntroducingFstrings.steps.concatenate_string_number.output_prediction_choices.1"
msgstr "Hello name. You are age years old."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
msgid "pages.IntroducingFstrings.steps.concatenate_string_number.output_prediction_choices.2"
msgstr "Hello Alice. You are 20 years old."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
msgid "pages.IntroducingFstrings.steps.concatenate_string_number.output_prediction_choices.3"
msgstr "Hello 'Alice'. You are 20 years old."

#. https://futurecoder.io/course/#IntroducingFstrings
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingFstrings.steps.concatenate_string_number.text"
msgstr ""
"The syntax of an f-string starts with `f` followed by a string.\n"
"The f-string can contain names of variables inside curly brackets `{}`.\n"
"They will be replaced with the values of those variables converted to strings.\n"
"The variables can be anything: strings, numbers, lists, etc.\n"
"\n"
"Therefore f-strings let you easily combine strings and numbers, which can't\n"
"just be added together. For example run the following program:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingFstrings
msgid "pages.IntroducingFstrings.steps.eval_expr_inside_f_string.text"
msgstr ""
"In addition to variables, an f-string can actually contain any Python expression inside curly brackets.\n"
"Try this in the shell:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingFstrings
msgid "pages.IntroducingFstrings.steps.final_text.text"
msgstr ""
"Excellent!\n"
"\n"
"From now on, you are encouraged to use f-strings instead of `+` to build up your strings where possible."

#. https://futurecoder.io/course/#IntroducingFstrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.0.text"
msgstr "There are four problems with the expression inside `print`."

#. https://futurecoder.io/course/#IntroducingFstrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.1.text"
msgstr "There is a problem with the syntax that finds the number of people."

#. https://futurecoder.io/course/#IntroducingFstrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.2.text"
msgstr "Then one of the strings has a problem with the quotes."

#. https://futurecoder.io/course/#IntroducingFstrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.3.text"
msgstr "Also there is a problem with the syntax that finds the first person's name."

#. https://futurecoder.io/course/#IntroducingFstrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.4.text"
msgstr "And you can't add strings and numbers together!"

#. https://futurecoder.io/course/#IntroducingFstrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.5.text"
msgstr "Did you properly use curly brackets in your f-string?"

#. https://futurecoder.io/course/#IntroducingFstrings
msgid "pages.IntroducingFstrings.steps.fix_broken_program.text"
msgstr ""
"As you can see we can define an f-string using double quotes too, like we can a normal string.\n"
"And like quotes, f-strings are just notation. Once they are evaluated the computer forgets\n"
"that an f-string was used, it just stores the final result as a normal string.\n"
"\n"
"Here is a very broken program:\n"
"\n"
"    __copyable__\n"
"    people = [\"Alice\", \"Bob\", \"Charlie\"]\n"
"    print('There are' + people.length() + 'people waiting, the first one's name is' + people.1 + '.')\n"
"\n"
"Fix it!\n"
"Your solution should work for any list of strings named `people`.\n"
"For example, in the above case it should print:\n"
"\n"
"    There are 3 people waiting, the first one's name is Alice."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid "pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.0"
msgstr "f\"{name} went to {meal} with {friend}.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid "pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.1"
msgstr "\"{name} went to {meal} with {friend}.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid "pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.2"
msgstr "{name} went to {meal} with {friend}."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid "pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.3"
msgstr "'name' went to 'meal' with 'friend'."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid "pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.4"
msgstr "name went to meal with friend."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid "pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.5"
msgstr "\"Alice\" went to \"lunch\" with 'Bob'."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid "pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.6"
msgstr "'Alice' went to 'lunch' with 'Bob'."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid "pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.7"
msgstr "\"Alice went to lunch with Bob.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid "pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.8"
msgstr "Alice went to lunch with Bob."

#. https://futurecoder.io/course/#IntroducingFstrings
#. 
#.     # __code0__:
#.     name + " went to " + meal + " with " + friend + '.'
#. 
#.     # __code1__:
#.     f"{name} went to {meal} with {friend}."
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22+went+to+%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22+with+%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%22%7Bname%7D+went+to+%7Bmeal%7D+with+%7Bfriend%7D.%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.friend
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.meal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingFstrings.steps.introduce_f_strings.requirements"
msgstr ""
"Run the program above, but replace this code inside the `print()`:\n"
"\n"
"__code0__\n"
"\n"
"with:\n"
"\n"
"__code1__"

#. https://futurecoder.io/course/#IntroducingFstrings
#. 
#.     # __code0__:
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
#. 
#.     # __code1__:
#.     print(f"{name} went to {meal} with {friend}.")
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22+went+to+%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22+with+%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22lunch%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Bob%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%22%7Bname%7D+went+to+%7Bmeal%7D+with+%7Bfriend%7D.%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.friend
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.meal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingFstrings.steps.introduce_f_strings.text"
msgstr ""
"So far we have been combining strings by concatenating them using `+`, like:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"However this gets a bit cumbersome. We can write the same thing more elegantly using an *f-string*.\n"
"Replace the last line of the program above with the line below and run it.\n"
"Make sure you include the `f` before the string.\n"
"\n"
"__code1__"

#. https://futurecoder.io/course/#IntroducingFstrings
msgid "pages.IntroducingFstrings.title"
msgstr "f-strings"

#. https://futurecoder.io/course/#IntroducingIfStatements
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise
msgid "pages.IntroducingIfStatements.steps.excited_confused_exercise.hints.0.text"
msgstr "You only need to add a few lines to the existing program. All the existing code should be left as is."

#. https://futurecoder.io/course/#IntroducingIfStatements
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise
msgid "pages.IntroducingIfStatements.steps.excited_confused_exercise.hints.1.text"
msgstr "The code that you add should be very similar to the existing code."

#. https://futurecoder.io/course/#IntroducingIfStatements
#. 
#.     # __code0__:
#.     sentence = 'Hello World'
#.     excited = False
#.     confused = True
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Hello+World%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.confused
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.excited
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.sentence
msgid "pages.IntroducingIfStatements.steps.excited_confused_exercise.text"
msgstr ""
"Time for an exercise. Modify the program above to include an extra\n"
"boolean parameter `confused`, so the program should start like this:\n"
"\n"
"__code0__\n"
"\n"
"(`sentence` can be any string and the two booleans can be either `True` or `False`)\n"
"\n"
"When `confused` is true, the printed sentence should have a question mark added to the end.\n"
"If both `confused` and `excited` are true, the sentence should end with `!?`."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_example
msgid "pages.IntroducingIfStatements.steps.excited_example.output_prediction_choices.0"
msgstr "Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_example
msgid "pages.IntroducingIfStatements.steps.excited_example.output_prediction_choices.1"
msgstr "Hello World!"

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.excited_example.text"
msgstr ""
"Note how the code inside the first `if` statement ran, but not the second.\n"
"\n"
"In general, an `if` statement looks like this:\n"
"\n"
"    if <condition>:\n"
"        <body>\n"
"\n"
"where `<condition>` is any expression which evaluates to a boolean and `<body>` is an **indented** list\n"
"of one or more statements. The structure is quite similar to a `for` loop. Note the colon (`:`) which\n"
"is essential.\n"
"\n"
"When the computer sees `if <condition>:`, it checks if `<condition>` is `True`. If it is, it runs the body.\n"
"If not, it skips it and continues to the rest of the program.\n"
"\n"
"Here's a more interesting example for you to run:\n"
"\n"
"__program_indented__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_false_example
msgid "pages.IntroducingIfStatements.steps.excited_false_example.output_prediction_choices.0"
msgstr "Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_false_example
msgid "pages.IntroducingIfStatements.steps.excited_false_example.output_prediction_choices.1"
msgstr "Hello World!"

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.excited_false_example.requirements"
msgstr "Run the program from the previous step, but replace `True` with `False`, so `excited = False`."

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.excited_false_example.text"
msgstr ""
"(Remember that `sentence += '!'` means `sentence = sentence + '!'`)\n"
"\n"
"Change `excited = True` to `excited = False` and run the program again to see what the difference is."

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.final_text.text"
msgstr ""
"Well done! This program can do 4 different things depending on how you combine `excited`\n"
"and `confused`. Try them out if you want."

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.first_if_statements.text"
msgstr ""
"Booleans are meant to be used inside *if statements* (sometimes also called *conditionals*).\n"
"\n"
"Here is a simple example for you to run:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.introducing_booleans.text"
msgstr ""
"Now we're going to learn how to tell the computer to make decisions and only run code\n"
"under certain conditions. For this we will need a new type of value. You've seen\n"
"numbers and strings, now meet *booleans*. There are only two boolean values:\n"
"`True` and `False`. Try this program:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.title"
msgstr "Introducing If Statements"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.can_contain_anything.text"
msgstr ""
"A list is a *sequence* (an ordered collection/container) of any number of values.\n"
"The values are often referred to as *elements*.\n"
"They can be anything: numbers, strings, booleans, even lists! They can also be a mixture of types.\n"
"\n"
"To create a list directly, like above:\n"
"\n"
"1. Write some square brackets: `[]`\n"
"2. If you don't want an empty list, write some expressions inside to be the elements.\n"
"3. Put commas (`,`) between elements to separate them.\n"
"\n"
"Here's another example of making a list:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.final_text.text"
msgstr ""
"Congratulations! That was very tricky! One solution looks like this:\n"
"\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"    separator = ' - '\n"
"    total = ''\n"
"    not_first = False\n"
"\n"
"    for word in words:\n"
"        if not_first:\n"
"            total += separator\n"
"        total += word\n"
"        not_first = True\n"
"\n"
"    print(total)"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.first_list
msgid "pages.IntroducingLists.steps.first_list.program"
msgstr ""
"words = ['This', 'is', 'a', 'list']\n"
"\n"
"for word in words:\n"
"    print(word)"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.first_list.text"
msgstr ""
"It's time to learn about a powerful new type of value called *lists*. Here's an example:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.numbers_sum.text"
msgstr ""
"As you saw above, lists are *iterable*, meaning you can iterate over them with a `for loop`.\n"
"Here's a program that adds up all the numbers in a list:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
msgid "pages.IntroducingLists.steps.strings_sum.hints.0.text"
msgstr "This is very similar to the exercises you've done building up strings character by character."

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
msgid "pages.IntroducingLists.steps.strings_sum.hints.1.text"
msgstr "The solution is very similar to the program that adds numbers."

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
msgid "pages.IntroducingLists.steps.strings_sum.hints.2.text"
msgstr "In fact, what happens if you try running that program with a list of strings?"

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
msgid "pages.IntroducingLists.steps.strings_sum.hints.3.text"
msgstr "The problem is that 0. You can't add 0 to a string because numbers and strings are incompatible."

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
msgid "pages.IntroducingLists.steps.strings_sum.hints.4.text"
msgstr "Is there a similar concept among strings to 0? A blank initial value?"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.strings_sum.text"
msgstr ""
"Now modify the program so that it can add up a list of strings instead of numbers.\n"
"For example, given:\n"
"\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"\n"
"it should print:\n"
"\n"
"    __no_auto_translate__\n"
"    Thisisalist"

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.0.text"
msgstr "This is similar to the previous exercise. You can start with your solution from that."

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.1.text"
msgstr ""
"This exercise doesn't require anything fancy and the final solution can be quite simple. But it's tricky to get it "
"right and you need to think about the approach carefully."

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.10.text"
msgstr "You *can* write a program that checks if you're in the *first* iteration of a loop."

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.11.text"
msgstr "Just make a boolean variable to keep track of this. No need for any comparison operators or numbers."

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.12.text"
msgstr "We looked at programs that did something like this [here](#UnderstandingProgramsWithSnoop)."

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.13.text"
msgstr ""
"So if you only skip adding the separator in the first iteration, you will have `n - 1` separators. Now you just need "
"to think carefully about how to make sure the separators are in the right place."

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.14.text"
msgstr ""
"Forgetting the loop for a moment, you need to add the following to the string in this order: the first word, the "
"separator, the second word, the separator, the third word, etc."

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.15.text"
msgstr ""
"That means that in the first iteration, you just add the first word. In the second iteration, you add the separator, "
"then the second word. In the third iteration, you add the separator, then the third word. And so on."

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.16.text"
msgstr "So inside your loop, add the separator first, add the word after."

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.17.text"
msgstr "Skip adding the separator in the first iteration by checking a boolean variable."

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.18.text"
msgstr "Create the boolean variable before the loop, then change it inside the loop."

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.19.text"
msgstr "Only change it in the loop after checking it, or you won't be able to skip the first iteration."

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.2.text"
msgstr "In each iteration, in addition to a word in the list, you also have to add the separator."

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.3.text"
msgstr "But you don't want to add the separator after adding the last word in the list."

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.4.text"
msgstr "Unfortunately there is no \"subtraction\" with strings; you can't add the last separator then remove it."

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.5.text"
msgstr ""
"Let's back up. The final result should contain each word, and `n - 1` separators, where `n` is the number of words."

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.6.text"
msgstr "So you want to add a separator in every iteration except one."

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.7.text"
msgstr "You can skip adding the separator in one particular iteration using an `if` statement."

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.8.text"
msgstr ""
"Later on you will learn a way to iterate over a list and check if you're in the last iteration, but right now you have"
" no way of doing that."

#. https://futurecoder.io/course/#IntroducingLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.9.text"
msgstr "However, the iteration you skip doesn't have to be the last one!"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.strings_sum_bonus.text"
msgstr ""
"Excellent!\n"
"\n"
"If you'd like, you can just continue to the [next page](#BuildingNewLists) now.\n"
"\n"
"For an optional bonus challenge: extend the program to insert a separator string *between* each word.\n"
"For example, given\n"
"\n"
"    __no_auto_translate__\n"
"    words = ['This', 'is', 'a', 'list']\n"
"    separator = ' - '\n"
"\n"
"it would output:\n"
"\n"
"    __no_auto_translate__\n"
"    This - is - a - list"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.title"
msgstr "Introducing Lists"

#. https://futurecoder.io/course/#IntroducingNestedLists
msgid "pages.IntroducingNestedLists.steps.double_subscripting.requirements"
msgstr "Run `print(strings[1][0])` or something similar using `birdseye` to see how it works."

#. https://futurecoder.io/course/#IntroducingNestedLists
#. 
#.     # __code0__:
#.     string = strings[1]
#.     print(string[0])
#. 
#.     # __code1__:
#.     print(strings[1][0])
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.string
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
msgid "pages.IntroducingNestedLists.steps.double_subscripting.text"
msgstr ""
"You may have solved it like this:\n"
"\n"
"__code0__\n"
"\n"
"There's a shorter way. `strings[1]` is an expression like any other, and subscripting like `[0]`\n"
"can be used on any expression, not just variables.\n"
"So you can skip the intermediate variable and just do it in one line:\n"
"\n"
"__code1__\n"
"\n"
"Take a good look at this syntax. If it looks new and fancy, it's not.\n"
"It's just the usual syntax for subscripting, applied twice.\n"
"Try it in `birdseye` to see how Python breaks it down into smaller pieces."

#. https://futurecoder.io/course/#IntroducingNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid "pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.0.text"
msgstr "This is very similar to the previous exercise."

#. https://futurecoder.io/course/#IntroducingNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid "pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.1.text"
msgstr "Do you remember how to access the last position of a list (without using `len`)?"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid "pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.2.text"
msgstr "Similarly how do you access the second-to-last position in a list?"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid "pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.3.text"
msgstr "If you can't remember, you can Google it!"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid "pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.4.text"
msgstr "Indexing works similarly on lists and strings."

#. https://futurecoder.io/course/#IntroducingNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid "pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.5.text"
msgstr "Do you get an `index out of range` error? Is it for a string, or a list? Why?"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid "pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.6.text"
msgstr "Make sure you are not confusing the order of the list index and the string index."

#. https://futurecoder.io/course/#IntroducingNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid "pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.7.text"
msgstr "Use `birdseye` if you're having trouble."

#. https://futurecoder.io/course/#IntroducingNestedLists
msgid "pages.IntroducingNestedLists.steps.double_subscripting_exercise.text"
msgstr ""
"Using this syntax, modify the program to print the last letter of the second-to-last string in the list `strings`.\n"
"You must use a single expression like above, and you are not allowed to use `len`.\n"
"Your solution should work for any non-empty list of strings.\n"
"For the previous example input it should print `f`."

#. https://futurecoder.io/course/#IntroducingNestedLists
#. 
#.     # __code0__:
#.     strings[1].append("today?")
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22today%3F%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
msgid "pages.IntroducingNestedLists.steps.final_text.text"
msgstr ""
"Excellent! You now understand nested subscripting very well.\n"
"\n"
"We can still use all the list methods and functions we learned before.\n"
"For example we can add a new word to the last sublist of `strings` with `append`,\n"
"to come after `'you'`:\n"
"\n"
"__code0__\n"
"\n"
"After all, the sublist `strings[1]` is still a list like any other!\n"
"\n"
"On the next page we will learn about looping over nested lists."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid "pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.0"
msgstr "hello"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid "pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.1"
msgstr "there"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid "pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.10"
msgstr "a"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid "pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.2"
msgstr "how"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid "pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.3"
msgstr "are"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid "pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.4"
msgstr "you"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid "pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.5"
msgstr "['hello', 'there']"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid "pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.6"
msgstr "['how', 'are', 'you']"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid "pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.7"
msgstr "h"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid "pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.8"
msgstr "t"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid "pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.9"
msgstr "e"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid "pages.IntroducingNestedLists.steps.first_nested_list_example.program"
msgstr ""
"strings = [['hello', 'there'], ['how', 'are', 'you']]\n"
"print(strings[1][0])"

#. https://futurecoder.io/course/#IntroducingNestedLists
msgid "pages.IntroducingNestedLists.steps.first_nested_list_example.text"
msgstr ""
"Well done!\n"
"\n"
"Applying subscripting twice can be even more powerful.\n"
"We can use it on not only a list of strings, but on *a list of lists* too.\n"
"For example, what does the following program print?\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
msgid "pages.IntroducingNestedLists.steps.string_list_exercise.hints.0.text"
msgstr "How can you access the second string in the list?"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
msgid "pages.IntroducingNestedLists.steps.string_list_exercise.hints.1.text"
msgstr "Then how do you access a particular letter in a string?"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
msgid "pages.IntroducingNestedLists.steps.string_list_exercise.hints.2.text"
msgstr "Remember that the indexing of lists and strings are very similar."

#. https://futurecoder.io/course/#IntroducingNestedLists
#. 
#.     # __code0__:
#.     strings = ["abc", "def", "ghi"]
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22abc%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22def%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22ghi%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
msgid "pages.IntroducingNestedLists.steps.string_list_exercise.text"
msgstr ""
"Exercise: given a list of strings, print the first letter of the second string in the list. For example, given:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"you should print `d`."

#. https://futurecoder.io/course/#IntroducingNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.0.text"
msgstr "This is very similar to the previous exercises."

#. https://futurecoder.io/course/#IntroducingNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.1.text"
msgstr "How many times do you need to use subscripting?"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.2.text"
msgstr "First you need to access a sublist."

#. https://futurecoder.io/course/#IntroducingNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.3.text"
msgstr "Then a string in that sublist."

#. https://futurecoder.io/course/#IntroducingNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.4.text"
msgstr "Then a letter in that string."

#. https://futurecoder.io/course/#IntroducingNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.5.text"
msgstr "Use `birdseye` if you're having trouble."

#. https://futurecoder.io/course/#IntroducingNestedLists
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.text"
msgstr ""
"As you can see Python allows us to have *nested lists*: a list where each element is another list (we refer to them as *sublists*).\n"
"\n"
"We can use subscripting even more than twice.\n"
"Write a program that takes a nested list `strings` like above,\n"
"and prints the **first letter of the third string in the second sublist**.\n"
"Use only a single expression like in the previous exercise.\n"
"For example, for the list above, it should print `y`."

#. https://futurecoder.io/course/#IntroducingNestedLists
msgid "pages.IntroducingNestedLists.title"
msgstr "Introducing Nested Lists"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid "pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.0.text"
msgstr "Think about how you would do this manually and systematically, with a pencil and paper."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid "pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.1.text"
msgstr ""
"The fact that the password must be four letters long is very important. This would be a lot harder to solve if the "
"password could be any given length."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid "pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.2.text"
msgstr "But the string `letters` might have any number of characters."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid "pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.3.text"
msgstr ""
"If there are `n` different letters, then the number of possible passwords is `n^4 == n*n*n*n` because there are `n` "
"possible letters for each position and they're all independent."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid "pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.4.text"
msgstr ""
"Suppose again that `letters = \"ABCD\"`. Imagine you have all possible three-letter passwords. Now for each one, add "
"an A at the end, or add a B, or a C, or a D. That's how you would get all possible four-letter passwords."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid "pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.5.text"
msgstr "Remember, a for loop can contain any statement, including another for loop."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid "pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.6.text"
msgstr "That applies to all for loops."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid "pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.7.text"
msgstr "One for loop inside another for loop is no longer enough."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid "pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.8.text"
msgstr "You have to go deeper."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#.     # __code0__:
#.     letters = "ABCD"
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22ABCD%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.letters
msgid "pages.IntroducingNestedLoops.steps.crack_password_exercise.text"
msgstr ""
"For your next exercise, you need to crack a password. You know that it's exactly four letters long and that only a few letters are possible, which you've written down:\n"
"\n"
"__code0__\n"
"\n"
"You need to print out all possible passwords:\n"
"\n"
"    AAAA\n"
"    AAAB\n"
"    AAAC\n"
"    AAAD\n"
"    AABA\n"
"    AABB\n"
"    ...skipping a few...\n"
"    DDDA\n"
"    DDDB\n"
"    DDDC\n"
"    DDDD"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#.     # __code0__:
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Alice%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Bob%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Charlie%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Dylan%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27%7Bplayers%5Bi%5D%7D+vs+%7Bplayers%5Bj%5D%7D%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.players
msgid "pages.IntroducingNestedLoops.steps.final_text.text"
msgstr ""
"Excellent! The solution goes like this:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingNestedLoops
msgid "pages.IntroducingNestedLoops.steps.first_nested_loop.text"
msgstr ""
"You've seen that the indented body of an `if` or a loop can contain any kind of statement, including more `if` statements and loops. In particular a loop can contain another loop. Here's an example:\n"
"\n"
"__program_indented__\n"
"\n"
"This is called a *nested loop*. Nothing about it is really new, it's just worth understanding properly because it can be very useful for writing interesting programs."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.0.text"
msgstr "You'll need a for loop inside a for loop like before."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.1.text"
msgstr "This time something like `for player1 in players:` won't be enough."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.10.text"
msgstr "You need to use a comparison operator."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.11.text"
msgstr "Once you figure out the relation, you can express it with an `if` statement."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.2.text"
msgstr "Your program needs to use the *positions* of the players in the list."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.3.text"
msgstr "That means you need to loop over the positions and use indexing (subscripting) to access the list entries."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.4.text"
msgstr "To loop over the positions, use `range`..."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.5.text"
msgstr "...and `len`."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.6.text"
msgstr "Look at the desired output: `Charlie vs Alice`: `Charlie` comes before `Alice` in the `players` list."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.7.text"
msgstr "We don't want to print `Alice vs Charlie` because `Alice` comes AFTER `Charlie` in `players`."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.8.text"
msgstr "The only pairs we want to print are those where the left player comes before the right player in the list."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.9.text"
msgstr "How can we express this relation in terms of the list indices of the two for-loops?"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#.     # __code0__:
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Alice%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Bob%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Charlie%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Dylan%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.players
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text"
msgstr ""
"Wow, you're an artist too!\n"
"\n"
"If you'd like, you can just continue to the [next page](#IntroducingBirdseye) now. Or you can do a bonus challenge!\n"
"\n"
"Like the earlier exercise, you're organising a tournament for a game. You have a list of player names:\n"
"\n"
"__code0__\n"
"\n"
"This time, each pair of players should only appear once. Specifically, print only those pairs that are in\n"
"the same left-to-right order as they are in `players`, starting with pairs containing the leftmost person\n"
"in `players` and moving right. For example, for the above, your program should print\n"
"\n"
"    Charlie vs Alice\n"
"    Charlie vs Dylan\n"
"    Charlie vs Bob\n"
"    Alice vs Dylan\n"
"    Alice vs Bob\n"
"    Dylan vs Bob"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_exercise.hints.0.text"
msgstr "Think about how you would do this manually and systematically, with a pencil and paper."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_exercise.hints.1.text"
msgstr "You need to use a for loop inside a for loop."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_exercise.hints.2.text"
msgstr "You need an `if` statement to check that the two players aren't the same person."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#.     # __code0__:
#.     players = ["Alice", "Bob", "Charlie"]
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Charlie%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.players
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_exercise.text"
msgstr ""
"Perfect!\n"
"\n"
"Next exercise: you're organising a tournament for a game, such as chess or tennis. You have a list of player names:\n"
"\n"
"__code0__\n"
"\n"
"Every player is going to play against every other player twice: once where they get the advantage (e.g. by moving or serving first) and once not. Print out all the match combinations like this:\n"
"\n"
"    Alice vs Bob\n"
"    Alice vs Charlie\n"
"    Bob vs Alice\n"
"    Bob vs Charlie\n"
"    Charlie vs Alice\n"
"    Charlie vs Bob\n"
"\n"
"Note that \"Alice vs Bob\" and \"Bob vs Alice\" are both in the list, but there's no \"Alice vs Alice\" - we don't want anyone playing with themselves."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.0.text"
msgstr "You need to use a for loop inside a for loop."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.1.text"
msgstr "You need the numbers from 1 to 12."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.2.text"
msgstr "Whenever you need a sequence of consecutive numbers, use `range`."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.3.text"
msgstr "You want something like `for x in range(n):`."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.4.text"
msgstr "This will start with `x = 0`, but there's an easy workaround for that."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.5.text"
msgstr "You can just add 1 to `x`."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.6.text"
msgstr "Use `*` to multiply numbers."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.7.text"
msgstr "Use an f-string with several variables."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.8.text"
msgstr "Remember to print a line with the correct number of dashes after each section."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.9.text"
msgstr "Make sure each line is in the correct loop and has the right amount of indentation."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.messages.added_str_and_int.text"
msgstr "You can't add together strings and numbers. Use an f-string."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.messages.adding_one_in_wrong_loop.text"
msgstr ""
"You added 1 to your outer loop variable at the wrong place!\n"
"Where should you do that instead to fix it?"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.messages.too_long.text"
msgstr ""
"Your solution is too long. You only need a few lines of code for this problem.\n"
"Use a nested loop so that you don't need to repeat yourself.\n"
"The computer will do the repetition for you!"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.messages.used_times_instead_of_x.text"
msgstr ""
"That's almost correct! Make sure to display the right character `x` in your table.\n"
"For example, your solution should display `3 x 4 = 12` and not `3 * 4 = 12`."

#. https://futurecoder.io/course/#IntroducingNestedLoops
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.special_messages.multiply_with_x.text"
msgstr "To multiply numbers, use `*`"

#. https://futurecoder.io/course/#IntroducingNestedLoops
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.text"
msgstr ""
"Make sure you fully grasp what's going on. `print(letter)` and `print('---')` each run 3 times, because their indentation puts them in the *outer loop*. `print(f'{letter} {number}')` is called 3 × 4 = 12 times, because it's in the *inner loop* `for number in range(4):` which has 4 iterations but is itself in the outer loop so it runs 3 times.\n"
"\n"
"Let's put this to use! Suppose you're a teacher and you need to print out all the multiplication tables from 1 to 12 for your students. You don't want to write them manually, but you can write a program to do it for you! Your program output should look like this including the lines of dashes:\n"
"\n"
"    1 x 1 = 1\n"
"    1 x 2 = 2\n"
"    1 x 3 = 3\n"
"    1 x 4 = 4\n"
"    1 x 5 = 5\n"
"    1 x 6 = 6\n"
"    1 x 7 = 7\n"
"    1 x 8 = 8\n"
"    1 x 9 = 9\n"
"    1 x 10 = 10\n"
"    1 x 11 = 11\n"
"    1 x 12 = 12\n"
"    ---\n"
"    2 x 1 = 2\n"
"    2 x 2 = 4\n"
"    2 x 3 = 6\n"
"    2 x 4 = 8\n"
"    2 x 5 = 10\n"
"    2 x 6 = 12\n"
"    2 x 7 = 14\n"
"    2 x 8 = 16\n"
"    2 x 9 = 18\n"
"    2 x 10 = 20\n"
"    2 x 11 = 22\n"
"    2 x 12 = 24\n"
"    ---\n"
"    3 x 1 = 3\n"
"    3 x 2 = 6\n"
"    3 x 3 = 9\n"
"    (you get the idea...)\n"
"    11 x 10 = 110\n"
"    11 x 11 = 121\n"
"    11 x 12 = 132\n"
"    ---\n"
"    12 x 1 = 12\n"
"    12 x 2 = 24\n"
"    12 x 3 = 36\n"
"    12 x 4 = 48\n"
"    12 x 5 = 60\n"
"    12 x 6 = 72\n"
"    12 x 7 = 84\n"
"    12 x 8 = 96\n"
"    12 x 9 = 108\n"
"    12 x 10 = 120\n"
"    12 x 11 = 132\n"
"    12 x 12 = 144\n"
"    ---"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid "pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.0.text"
msgstr "How would you describe instructions to type in this triangle manually?"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid "pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.1.text"
msgstr ""
"Print a line of `size` plus signs, then `size - 1` plus signs, etc. down to 1 plus sign. For example print 5 `+`s, "
"then 4 `+`s, then 3, 2, and 1."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid "pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.2.text"
msgstr "Break this down into subproblems."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid "pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.3.text"
msgstr "How do you print one line of `+`s of a given length, and how do you go through all the lengths?"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid "pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.4.text"
msgstr ""
"Building up a line of characters should be very familiar from previous exercises, the only difference is that you have"
" to make it a given length instead of just the same length as another string."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid "pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.5.text"
msgstr "An easy way to do something `n` times is to loop over `range(n)`."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid "pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.6.text"
msgstr "You need to use a for loop inside a for loop."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid "pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.7.text"
msgstr ""
"You need numbers that count down, like 5, 4, 3, 2, 1. There is a way to do this with `range`, and you can easily look "
"it up, but it's also easy to use a normal range and do some very simple maths to convert numbers counting up into "
"numbers counting down."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid "pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.8.text"
msgstr "What formula converts 0 into 5, 1 into 4, 2 into 3, etc?"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. 
#.     # __code0__:
#.     size = 5
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.size
msgid "pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.text"
msgstr ""
"Wow, you're basically a hacker now!\n"
"\n"
"One more exercise. Given a size:\n"
"\n"
"__code0__\n"
"\n"
"Print out an 'upside down' triangle made of the plus sign `+` whose sides are as long as the given size, e.g:\n"
"\n"
"    +++++\n"
"    ++++\n"
"    +++\n"
"    ++\n"
"    +"

#. https://futurecoder.io/course/#IntroducingNestedLoops
msgid "pages.IntroducingNestedLoops.title"
msgstr "Introducing Nested Loops"

#. https://futurecoder.io/course/#IntroducingNotPage
msgid "pages.IntroducingNotPage.steps.IntroducingNot.text"
msgstr ""
"Unlike the other two boolean operators `and` and `or`,\n"
"which are used in between two booleans (called *binary* operators),\n"
"`not` is used before only one boolean (called a *unary* operator).\n"
"It negates the expression to which it is applied, a bit like a minus sign. Try in the shell:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingNotPage
msgid "pages.IntroducingNotPage.steps.NotFalse.text"
msgstr ""
"Now try the following:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingNotPage
#. 
#.     # __code0__:
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#. 
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.jpg%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.png%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22cat.jpg%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22dog.png%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22invoice.pdf%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.filename
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.valid_image
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.0.text"
msgstr ""
"What if you were instead asked to simplify this related but opposite function?\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingNotPage
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.1.text"
msgstr "In that case there is a standard simplification trick you can apply that we discussed a few pages ago."

#. https://futurecoder.io/course/#IntroducingNotPage
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.2.text"
msgstr ""
"In particular the `returns` are redundant because `filename.endswith(\".png\") or filename.endswith(\".jpg\")` is "
"already the desired boolean."

#. https://futurecoder.io/course/#IntroducingNotPage
#. 
#.     # __code0__:
#.     def valid_image(filename):
#.         return filename.endswith(".png") or filename.endswith(".jpg")
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.jpg%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.png%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.filename
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.valid_image
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.3.text"
msgstr ""
"So you can just write:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingNotPage
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.4.text"
msgstr "For the real exercise, you can do something similar."

#. https://futurecoder.io/course/#IntroducingNotPage
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.5.text"
msgstr "The difference in the real exercise is that the result is reversed."

#. https://futurecoder.io/course/#IntroducingNotPage
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.6.text"
msgstr "That is, `invalid_image` returns `True` when `valid_image` returns `False` and vice versa."

#. https://futurecoder.io/course/#IntroducingNotPage
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.7.text"
msgstr "Remember what `not` does?"

#. https://futurecoder.io/course/#IntroducingNotPage
#. 
#.     # __code7__:
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#. 
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#. 
#.     # __code6__:
#.     if invalid_image(filename):
#.         print("I can't process " + filename)
#. 
#.     # __code1__:
#.     (not True) or True
#. 
#.     # __code2__:
#.     not (True or True)
#. 
#.     # __code0__:
#.     not True or True
#. 
#.     # __code4__:
#.     (-1) + 2
#. 
#.     # __code5__:
#.     -(1 + 2)
#. 
#.     # __code3__:
#.     -1 + 2
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.jpg%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.png%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22I+can%27t+process+%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22cat.jpg%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22dog.png%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22invoice.pdf%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.filename
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.invalid_image
msgid "pages.IntroducingNotPage.steps.NotPriority.text"
msgstr ""
"You can see in `birdseye` that\n"
"\n"
"__code0__\n"
"\n"
"is interpreted by Python as\n"
"\n"
"__code1__\n"
"\n"
"rather than:\n"
"\n"
"__code2__\n"
"\n"
"So, `not` has higher priority than `or` if there are no parentheses. It's the same as how\n"
"\n"
"__code3__\n"
"\n"
"means:\n"
"\n"
"__code4__\n"
"\n"
"rather than\n"
"\n"
"__code5__\n"
"\n"
"`not` also has higher priority than `and`.\n"
"\n"
"Again, the main thing to remember is to use parentheses or extra variables when in doubt.\n"
"\n"
"Exercise: Suppose you're writing a program which processes images. Only certain types of file can be processed.\n"
"If the user gives you a file that can't be processed, you want to show an error:\n"
"\n"
"__code6__\n"
"\n"
"Suppose that .png and .jpg files can be processed, but other file types cannot.\n"
"Here's an example function to do that:\n"
"\n"
"    __copyable__\n"
"__code7__\n"
"\n"
"This is longer than it needs to be. Rewrite `invalid_image` so that the body is a single line `return <expression>`,\n"
"i.e. no `if` statement. It should pass the same tests."

#. https://futurecoder.io/course/#IntroducingNotPage
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingNotPage.steps.NotTrueOrTrue.text"
msgstr ""
"What is the priority of `not` compared to `and` and `or`? Try the following in `birdseye`:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingNotPage
#. 
#.     # __code0__:
#.     def invalid_image(filename):
#.         return not (filename.endswith(".png") or filename.endswith(".jpg"))
#. 
#.     def invalid_image(filename):
#.         return not filename.endswith(".png") and not filename.endswith(".jpg")
#. 
#.     # __code1__:
#.     if x:
#.         return False
#.     else:
#.         return True
#. 
#.     # __code2__:
#.     return not x
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.jpg%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.png%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.filename
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.invalid_image
msgid "pages.IntroducingNotPage.steps.final_text.text"
msgstr ""
"Well done! Here are two valid solutions:\n"
"\n"
"__code0__\n"
"\n"
"(if you're curious, these are equivalent because of something called De Morgan's law)\n"
"\n"
"Also notice that this is another general pattern that can be simplified: if your code has the form:\n"
"\n"
"__code1__\n"
"\n"
"where `x` itself is a boolean, then it can be simplified to:\n"
"\n"
"__code2__"

#. https://futurecoder.io/course/#IntroducingNotPage
msgid "pages.IntroducingNotPage.title"
msgstr "Introducing `not`"

#. https://futurecoder.io/course/#IntroducingOr
#. 
#.     # __code0__:
#.     return name == "Alice" or name == "Bob"
#. 
#.     # __code1__:
#.     return name == "Alice" or "Bob"
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingOr.steps.ACommonMistake.requirements"
msgstr ""
"Run the program from the previous step, but replace:\n"
"\n"
"__code0__\n"
"\n"
"with:\n"
"\n"
"__code1__"

#. https://futurecoder.io/course/#IntroducingOr
#. 
#.     # __code0__:
#.     return name == "Alice" or name == "Bob"
#. 
#.     # __code1__:
#.     return name == "Alice" or "Bob"
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingOr.steps.ACommonMistake.text"
msgstr ""
"Take careful note of how we wrote the condition:\n"
"\n"
"__code0__\n"
"\n"
"A common mistake is to write this instead:\n"
"\n"
"__code1__\n"
"\n"
"It makes sense if you read it like English:\n"
"\n"
"> `return` whether `name` is equal to either `\"Alice\"` or `\"Bob\"`\n"
"\n"
"But Python is not English, and that's not how `or` works.\n"
"\n"
"Replace the `return` line in the code with the above line, and try running it again."

msgid "pages.IntroducingOr.steps.AnExercise.disallowed.3.label"
msgstr "comparison chaining"

#. https://futurecoder.io/course/#IntroducingOr
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.0.text"
msgstr "Remember, you can use comparison operators `<, >, <=, >=, ==` to produce booleans."

#. https://futurecoder.io/course/#IntroducingOr
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.1.text"
msgstr "You need to check how `x` compares to 0 and how it compares to 100."

#. https://futurecoder.io/course/#IntroducingOr
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.2.text"
msgstr "You need to combine the two comparisons into one boolean using `or`."

#. https://futurecoder.io/course/#IntroducingOr
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.3.text"
msgstr ""
"Above we used a trick so that the whole function body was just `return <comparison> or <comparison>`. But that won't "
"work here!"

#. https://futurecoder.io/course/#IntroducingOr
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.4.text"
msgstr "You need to use an `if` statement."

#. https://futurecoder.io/course/#IntroducingOr
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.5.text"
msgstr "You need to have a `return False` and a `return True`."

#. https://futurecoder.io/course/#IntroducingOr
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.6.text"
msgstr ""
"If you have something like `x >= 0 or x <= 100`, you're on the wrong track. That's going to be true for *any* value of"
" `x`. After all, 101 is greater than 0!"

#. https://futurecoder.io/course/#IntroducingOr
#. 
#.     # __code4__:
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
#. 
#.     # __code3__:
#.     return name in ["Alice", "Bob", "Charlie"]
#. 
#.     # __code2__:
#.     (name == "Alice") or ("Bob")
#. 
#.     # __code1__:
#.     name == ("Alice" or "Bob")
#. 
#.     # __code0__:
#.     name == "Alice" or "Bob"
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Charlie%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.is_valid_percentage
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingOr.steps.AnExercise.text"
msgstr ""
"When we inspect it with `birdseye`, we can see that:\n"
"\n"
"__code0__\n"
"\n"
"is not translated into\n"
"\n"
"__code1__\n"
"\n"
"the way we think in English, but rather:\n"
"\n"
"__code2__\n"
"\n"
"which evaluates to `\"Bob\"` when `name == \"Alice\"` is `False`.\n"
"\n"
"Perhaps you feel like this:\n"
"\n"
"[![I now have additional questions](https://i.imgur.com/jN57tGt.png)](https://imgur.com/a/icKzI)\n"
"\n"
"The only thing you really need to know is this: Until you know what you're doing, always\n"
"make sure you put booleans on both sides of `or`, because it's a boolean operator.\n"
"`name == \"Alice\" or \"Bob\"` breaks that rule.\n"
"\n"
"If you're curious, the answers are below, but you can skip them if you want and move onto the exercise below.\n"
"\n"
"----\n"
"\n"
"> Why does `(name == \"Alice\") or (\"Bob\")` equal `\"Bob\"`? Why does it equal anything? `\"Bob\"` isn't even a boolean!\n"
"\n"
"The definition \"`A or B` is `True` if either `A` or `B` is `True`\" was a simplification. It's the easiest\n"
"way to think about `or` most of the time, especially for writing `if` statements.\n"
"The real definition is that if `A` is true then `A or B` is just `A` (in fact `B` is not even evaluated),\n"
"otherwise it's `B`.\n"
"You can see for yourself that if `A` and `B` are booleans then the two definitions are equivalent.\n"
"In this example `A` is `name == \"Alice\"` which is `False`, so `A or B` is `B` which is `\"Bob\"`.\n"
"\n"
"> Is there a better way to write the condition without repeating `name ==` each time?\n"
"\n"
"Yes! In [Functions and Methods for Lists](#FunctionsAndMethodsForLists) we mentioned the `in`\n"
"operator, which you can use with a list like this:\n"
"\n"
"__code3__\n"
"\n"
"But you can't always get rid of `or` like that.\n"
"\n"
"----\n"
"\n"
"Exercise: Write a function named `is_valid_percentage`, accepting one numerical argument `x`.\n"
"It should return `True` if `x` is between 0 and 100 (inclusive), and return `False` otherwise.\n"
"Your function should use `or`, and pass these tests:\n"
"\n"
"    __copyable__\n"
"__code4__"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.FalseOrFalse.text"
msgstr ""
"Finally, try:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingOr
#. 
#.     # __code0__:
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. 
#.     # __code1__:
#.     return name == "Alice" or name == "Bob"
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingOr.steps.FurtherImprovement.requirements"
msgstr ""
"Run the program from the previous step, but replace:\n"
"\n"
"__code0__\n"
"\n"
"with:\n"
"\n"
"__code1__"

#. https://futurecoder.io/course/#IntroducingOr
#. 
#.     # __code1__:
#.     if x:
#.         return True
#.     else:
#.         return False
#. 
#.     # __code0__:
#.     name == "Alice" or name == "Bob"
#. 
#.     # __code2__:
#.     return x
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingOr.steps.FurtherImprovement.text"
msgstr ""
"We can do even better. Notice that\n"
"\n"
"__code0__\n"
"\n"
"is a boolean, and both `return` statements are returning booleans `True` or `False`.\n"
"The function:\n"
"\n"
" - returns `True` when `name == \"Alice\" or name == \"Bob\"` is `True`, and\n"
" - returns `False` when `name == \"Alice\" or name == \"Bob\"` is `False`.\n"
"\n"
"So we could simply return the boolean `name == \"Alice\" or name == \"Bob\"` itself in both cases!\n"
"\n"
"This is a common pattern for simplifying your code. If you ever find yourself writing code like:\n"
"\n"
"__code1__\n"
"\n"
"where `x` itself is a boolean, you can always simplify this block of code to:\n"
"\n"
"__code2__\n"
"\n"
"Apply this simplification to the code yourself, and run it again."

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.ImprovingWithOr.requirements"
msgstr ""
"Copy the program from the top of the page, then change the first four lines of the function to use `or` as suggested."

#. https://futurecoder.io/course/#IntroducingOr
#. 
#.     # __code0__:
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#. 
#.     # __code1__:
#.     if name == "Alice" or name == "Bob":
#.         return True
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingOr.steps.ImprovingWithOr.text"
msgstr ""
"In the editor, replace:\n"
"\n"
"__code0__\n"
"\n"
"with:\n"
"\n"
"__code1__\n"
"\n"
"As you can see, `is_friend` will return `True` only when `name` is Alice or Bob.\n"
"The `or` is used in between the two booleans `name == \"Alice\"` and `name == \"Bob\"`."

#. https://futurecoder.io/course/#IntroducingOr
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingOr.steps.InputAliceBob.text"
msgstr ""
"We learned about *booleans* (`True` and `False`) when we introduced If statements.\n"
"We also learned about comparison operators `==`, `<`, `>`, `<=`, `>=` which return booleans.\n"
"Now we want to combine booleans to check for more complex conditions.\n"
"\n"
"Here's a simple example: imagine you have two friends, Alice and Bob.\n"
"The function below accepts one parameter, `name`, and checks if the person with the given name is among your friends.\n"
"Copy and run the code in the editor:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.InspectWithBirdseye.requirements"
msgstr "Run the same code as in the previous step, but with `birdseye`."

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.InspectWithBirdseye.text"
msgstr ""
"The second and third tests fail! Our function seems to be doing the wrong thing:\n"
"it returns `\"Bob\"` (a string, not a boolean!) when `name` is `\"Bob\"` or `\"Charlie\"`. What is going on?\n"
"Run the same problematic code again with `birdseye`. Inspect the `return` statements of each `is_friend` call carefully.\n"
"(Use the blue arrow buttons)"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.TrueOrFalse.text"
msgstr ""
"Good, now try:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.TrueOrTrue.text"
msgstr ""
"Let's see if we can do better.\n"
"We can combine the `if` and `elif` statements using **`or`**. `or` is a *boolean operator*,\n"
"meaning it's an operator (like `+` or `-`) which combines two booleans (`True` or `False`).\n"
"\n"
"The expression `A or B` is `True` if either `A` or `B` is `True`, i.e. if `A` is `True` or `B` is `True`, or both.\n"
"It's only `False` if neither `A` nor `B` is `True`, i.e. both are `False`.\n"
"\n"
"Try the following in the shell.\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.final_text.text"
msgstr "Good job!"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.title"
msgstr "Introducing `or`"

#. https://futurecoder.io/course/#IntroducingStrings
msgid "pages.IntroducingStrings.steps.final_text.text"
msgstr ""
"The shell simply gives the same thing back because there's nothing further to calculate. `'hello'` is simply equal to `'hello'`.\n"
"\n"
"A string is a sequence of characters. A character is a single symbol such as a letter, number, punctuation, space, etc. In this case the string contains the 5 characters `hello`. The quotes are not part of the string - they are there to tell both humans and computers that this is a string consisting of whatever characters are between the quotes."

#. https://futurecoder.io/course/#IntroducingStrings
msgid "pages.IntroducingStrings.steps.hello_string.text"
msgstr ""
"Python lets you do much more than calculate. In fact, we're not going to touch numbers or maths for a while. Instead, we're going to look at *strings*. Strings are essentially snippets of text. For example, enter the following into the shell, quotes (`'`) included:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingStrings
msgid "pages.IntroducingStrings.title"
msgstr "Introducing Strings"

#. https://futurecoder.io/course/#IntroducingTheShell
msgid "pages.IntroducingTheShell.steps.final_text.text"
msgstr "Excellent! Keep experimenting. When you're ready, click 'Next' to continue."

#. https://futurecoder.io/course/#IntroducingTheShell
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTheShell.steps.first_expression
msgid "pages.IntroducingTheShell.steps.first_expression.messages.anything_else.text"
msgstr ""
"Awesome, you're trying out your own experiments!\n"
"That's a great sign. Keep it up.\n"
"Just letting you know that you do need to eventually type `1+2` for the book to move forward."

#. https://futurecoder.io/course/#IntroducingTheShell
msgid "pages.IntroducingTheShell.steps.first_expression.text"
msgstr ""
"On the right is the *shell*. This is a place for running small bits of Python code. Just type in some code, press enter, and it'll run! Try it now:\n"
"\n"
"1. Click anywhere on the shell (the black area).\n"
"2. Type `__program__`\n"
"3. Press the Enter key on your keyboard."

#. https://futurecoder.io/course/#IntroducingTheShell
msgid "pages.IntroducingTheShell.steps.more_calculation.requirements"
msgstr "Run code in the shell similar to `1 + 2`, but instead of `+`, use `*`, `/`, or `-`."

#. https://futurecoder.io/course/#IntroducingTheShell
#. 
#.     # __code0__:
#.     3 * 4
msgid "pages.IntroducingTheShell.steps.more_calculation.special_messages.multiply_with_x.text"
msgstr ""
"I see an 'x'. If you're trying to multiply, use an asterisk, e.g:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingTheShell
msgid "pages.IntroducingTheShell.steps.more_calculation.text"
msgstr ""
"Great! Python evaluated `1+2` and got the result `3`, so the shell displays that.\n"
"\n"
"The shell is probably your most important tool for learning Python, and you should spend lots of time experimenting and exploring in it. Be curious! Constantly ask yourself \"What would happen if I ran X?\" and then immediately answer that question by running it. Never be scared to try something out - if you get something wrong, nothing bad will happen.\n"
"\n"
"Try doing some more calculations now. You can multiply numbers with `*`, divide with `/`, and subtract with `-`. You can also use parentheses, i.e. `(` and `)`."

#. https://futurecoder.io/course/#IntroducingTheShell
msgid "pages.IntroducingTheShell.title"
msgstr "Introducing The Shell"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.0.text"
msgstr "You can start by imitating `row_winner` above, then change it to make it work with columns."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.1.text"
msgstr "You can't loop through the columns of `board` as simply as its rows."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.10.text"
msgstr "Define a boolean for each column, then update it accordingly inside the inner loop."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.11.text"
msgstr "The rest of the logic is very similar to `row_winner`."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.12.text"
msgstr "Watch out for `' '`."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.13.text"
msgstr "Remember to return `False` at the end if needed."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.2.text"
msgstr ""
"What *is* a column of a nested list? The first column consists of the first element of the first row, the first "
"element of the second row, etc."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.3.text"
msgstr ""
"Looping through all columns means looking at the first element of every row, then the second element of every row, "
"etc."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.4.text"
msgstr "So you need to loop through numbers representing the positions first, second, etc."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.5.text"
msgstr "How do you find the number of columns in `board`?"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.6.text"
msgstr ""
"That covers the outer loop, which goes through each column. Then you need an inner loop to go through each element in "
"the column."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.7.text"
msgstr "The different entries of a column are NOT on the same row. So how can you access them?"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.8.text"
msgstr "You can loop through rows of the board and find the element corresponding to that row and the current column."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.9.text"
msgstr ""
"To access all the entries of, say, the 5th column, you can loop through all the rows, and access the 5th element in "
"each row."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#.     # __code0__:
#.     def column_winner(board):
#.         ...
#. 
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' '],
#.                 ['X', 'O', ' '],
#.                 ['O', 'X', ' ']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' ', 'X'],
#.                 [' ', 'O', 'X', 'O'],
#.                 ['O', 'O', 'X', 'X'],
#.                 ['O', 'O', 'X', ' ']
#.             ]
#.         ),
#.         True
#.     )
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.text"
msgstr ""
"Great job!\n"
"\n"
"Now write a similar function `column_winner` which checks for a winning *column* (a vertical line) of either piece:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Here `O` won in the second column of the second board."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.0.text"
msgstr "How many diagonals are there on a square board of arbitrary size?"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.1.text"
msgstr "Even if the size of the board changes, the number of diagonals remains the same!"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.10.text"
msgstr "You can use one loop and check both diagonals at the same time. Or you can use one loop for each diagonal."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.2.text"
msgstr ""
"You can't do something like `middle == board[0][0] and middle == board[2][2]` this time, because you don't know how "
"long a diagonal is."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.3.text"
msgstr "Moreover the two diagonals might not have anything in common like `middle`."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.4.text"
msgstr "First, focus on the diagonal that goes from top left to bottom right."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.5.text"
msgstr "How can you access those entries with double subscripting?"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.6.text"
msgstr "Do you see a pattern in those double subscripts? Get some paper and pen, work it out on some examples."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.7.text"
msgstr ""
"Now focus on the other diagonal (from top right to bottom left). There is a pattern in the subscripts again, but it's "
"a little bit more difficult."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.8.text"
msgstr "Do you remember negative indexing? It might be helpful here."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.9.text"
msgstr "Once you get the hang of the patterns, use the same ideas from before to check if all entries are equal."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#.     # __code1__:
#.     def diagonal_winner(board):
#.         ...
#. 
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O', 'X'],
#.                 [' ', 'O', 'X', ' '],
#.                 ['X', 'X', ' ', 'X'],
#.                 ['X', ' ', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', ' '],
#.                 ['X', ' ', 'O'],
#.                 [' ', 'O', 'O']
#.             ]
#.         ),
#.         False
#.     )
#. 
#.     # __code0__:
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal_winner
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.middle
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.text"
msgstr ""
"Excellent! That was challenging.\n"
"\n"
"Finally we need to check for winning diagonals. You already wrote a function to do just that in the previous chapter, for 3-by-3 boards:\n"
"\n"
"__code0__\n"
"\n"
"Now write a `diagonal_winner` that works for square boards of any size: 4-by-4, 5-by-5, and so on...\n"
"\n"
"    __copyable__\n"
"__code1__\n"
"\n"
"In the first example, `X` won in the diagonal going from the bottom left to the top right."

#. https://futurecoder.io/course/#IntroducingTicTacToe
msgid "pages.IntroducingTicTacToe.steps.final_text.text"
msgstr ""
"Great work!\n"
"\n"
"Now we have the code to determine a winning state on the board."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.0.text"
msgstr "You need to check every row in the board, so you'll need a loop for that."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.1.text"
msgstr "How can you check if all entries in a row are equal to each other?"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.10.text"
msgstr "Make sure you return `False` if there are no winning rows"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.2.text"
msgstr ""
"That's a self contained problem on its own. You can start by forgetting about the whole board and just checking a "
"single row."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.3.text"
msgstr "You could even write a function which just does this, although you don't have to."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.4.text"
msgstr "Since the row could have any size, you'll have to loop all the way through it."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.5.text"
msgstr "For each row, define a boolean. Then loop through that row, updating the boolean accordingly."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.6.text"
msgstr "You can use the first entry `row[0]` in a row to compare all the row entries to it."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.7.text"
msgstr ""
"Think carefully about what the initial value of the boolean should be, and under what conditions you should change its"
" value."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.8.text"
msgstr ""
"After looping through a row, if you determined that all its entries are equal, then return `True` (ending the outer "
"loop early)."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.9.text"
msgstr "Make sure you don't return `True` for a row filled with spaces."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.messages.catch_empty_row.text"
msgstr "Keep in mind that some entries might be `' '`. An empty row is not a winning row."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#.     # __code2__:
#.     def row_winner(board):
#.         ...
#. 
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['A', 'A', 'B', 'A'],
#.                 [' ', ' ', ' ', ' '],
#.                 ['A', ' ', ' ', 'A'],
#.                 ['B', ' ', 'B', 'A']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'X'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. 
#.     # __code1__:
#.     board = [
#.         ['A', 'B', 'A', 'A'],
#.         ['B', ' ', ' ', 'A'],
#.         [' ', 'A', 'B', 'B'],
#.         [' ', 'A', 'B', ' ']
#.     ]
#. 
#.     # __code0__:
#.     board = [
#.         ['X', 'O', 'X'],
#.         ['O', ' ', ' '],
#.         [' ', 'X', 'O']
#.     ]
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.text"
msgstr ""
"You've done many short exercises solving one little problem. Now we're going to tackle a larger, more complex\n"
"project which will really test your knowledge and require combining many smaller parts together.\n"
"It's going to be so fun!\n"
"\n"
"You will develop a text-based interactive tic-tac-toe game to be played by 2 human players.\n"
"Here is a small preview of what the finished game will look like in play:\n"
"\n"
"      1 2 3\n"
"    1  | |\n"
"      -+-+-\n"
"    2  | |\n"
"      -+-+-\n"
"    3  | |\n"
"\n"
"    X to play:\n"
"    1\n"
"    1\n"
"\n"
"      1 2 3\n"
"    1 X| |\n"
"      -+-+-\n"
"    2  | |\n"
"      -+-+-\n"
"    3  | |\n"
"\n"
"    O to play:\n"
"    2\n"
"    2\n"
"\n"
"      1 2 3\n"
"    1 X| |\n"
"      -+-+-\n"
"    2  |O|\n"
"      -+-+-\n"
"    3  | |\n"
"\n"
"    X to play:\n"
"    1\n"
"    3\n"
"\n"
"      1 2 3\n"
"    1 X| |X\n"
"      -+-+-\n"
"    2  |O|\n"
"      -+-+-\n"
"    3  | |\n"
"\n"
"We will break up the project into several small functions, which will be exercises.\n"
"\n"
"You will use many of the concepts you have learned so far: strings,\n"
"nested lists, nested loops, `range`, calling functions within functions, comparisons, and booleans.\n"
"\n"
"Along the way you will also learn some new concepts, including newline characters, types, and `input()`.\n"
"\n"
"Here is a rough outline of the project:\n"
"\n"
"- three functions `row_winner`, `column_winner`,  `diagonal_winner`  that check the whole board for winning rows, columns, and diagonals\n"
"- a function `winner` that checks the whole board for a winner, combining the above functions\n"
"- a function `format_board` that displays the current state of the game\n"
"- a function `play_move` that takes user input to play a move,\n"
"- finally a `play_game` function that puts it all together and runs the game interactively.\n"
"- Later on we will add further improvements.\n"
"\n"
"Let's get started!\n"
"\n"
"As in the last chapter, we will represent the tic-tac-toe board as a nested list of strings.\n"
"For a typical game this will be a 3x3 list, i.e. 3 lists each containing 3 strings, with players represented by `'X'` or `'O'`.\n"
"Empty squares will be represented by a space, i.e. `' '`. For example:\n"
"\n"
"__code0__\n"
"\n"
"However to make things more interesting your code will need to work for square boards of any size\n"
"(4x4, 5x5, etc) where players can be represented by any strings, e.g.\n"
"\n"
"__code1__\n"
"\n"
"Write a function `row_winner` which returns `True` if `board` contains\n"
"a winning row, i.e. a horizontal line which has the same character in all its entries (except `' '`):\n"
"\n"
"    __copyable__\n"
"__code2__\n"
"\n"
"In the second example, `O` wins in the bottom row."

msgid "pages.IntroducingTicTacToe.steps.winner.disallowed.0.message"
msgstr ""
"Your solution should work by calling the three functions. `winner` itself should not do any\n"
"looping, subscripting, etc. It should be very short.\n"
"\n"
"Copy the `row_winner` and other functions and leave them as they are. Don't copy code from them\n"
"into the `winner` function, just call those functions."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
msgid "pages.IntroducingTicTacToe.steps.winner.hints.0.text"
msgstr "The solution is quite short! Simply use the three functions correctly."

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
msgid "pages.IntroducingTicTacToe.steps.winner.hints.1.text"
msgstr "Think about possible cases. When does `winner(board)` return `False`? When does it return `True`?"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
msgid "pages.IntroducingTicTacToe.steps.winner.hints.2.text"
msgstr "How can you use the three functions and a boolean operator together to get the result you need?"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. 
#.     # __code0__:
#.     def winner(board):
#.         ...
#. 
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#. 
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#. 
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#. 
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#. 
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.col
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.column
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.column_winner
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal1
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal2
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal_winner
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.entry
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.piece
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row_winner
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.winner
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.winning_line
msgid "pages.IntroducingTicTacToe.steps.winner.text"
msgstr ""
"Bravo! That was quite tough.\n"
"\n"
"Now we can put the three functions together! Write a function `winner` that takes an argument `board` as before,\n"
"and returns `True` if `board` contains either a winning row, column or diagonal, `False` otherwise.\n"
"\n"
"Your solution should work by calling the three functions. `winner` itself should not do any\n"
"looping, subscripting, etc.\n"
"\n"
"Here is some code for `row_winner`, `column_winner` and `diagonal_winner`, along with some tests for `winner`.\n"
"Click the Copy button, and fill in the blanks for your `winner` function.\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#IntroducingTicTacToe
msgid "pages.IntroducingTicTacToe.title"
msgstr "Checking the board for winners"

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.steps.final_text.text"
msgstr ""
"The answer is that `sunshine` looks like a variable, so Python tries to look up its value, but since we never defined "
"a variable with that name we get an error."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.sunshine_undefined_check
msgid "pages.IntroducingVariables.steps.sunshine_undefined_check.output_prediction_choices.0"
msgstr "sunshine"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.sunshine_undefined_check
msgid "pages.IntroducingVariables.steps.sunshine_undefined_check.output_prediction_choices.1"
msgstr "'sunshine'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.sunshine_undefined_check
msgid "pages.IntroducingVariables.steps.sunshine_undefined_check.output_prediction_choices.2"
msgstr "Hello"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.sunshine_undefined_check
msgid "pages.IntroducingVariables.steps.sunshine_undefined_check.output_prediction_choices.3"
msgstr "'Hello'"

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.steps.sunshine_undefined_check.text"
msgstr ""
"As you can see, the quotes make all the difference. `'word'` is literally just `'word'`, hence it's technically called a *string literal*. On the other hand, `word` is a variable, whose value may be anything.\n"
"\n"
"Similarly, `'sunshine'` is `'sunshine'`, but what's `__program__` without quotes?"

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.steps.word_assign.text"
msgstr ""
"To make interesting programs, we can't always manipulate the same values. We need a way to refer to values that are unknown ahead of time and can change - values that can vary. These are called *variables*.\n"
"\n"
"Run this code:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.steps.word_check.special_messages.bad_word.text"
msgstr "Oops, you need to set `word = 'Hello'` before we can continue."

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.steps.word_check.text"
msgstr ""
"This creates a variable with the name `word` that refers to the string value `'Hello'`.\n"
"\n"
"Now see what happens when you run `__program__` in the shell by itself."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_string_check
msgid "pages.IntroducingVariables.steps.word_string_check.output_prediction_choices.0"
msgstr "word"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_string_check
msgid "pages.IntroducingVariables.steps.word_string_check.output_prediction_choices.1"
msgstr "'word'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_string_check
msgid "pages.IntroducingVariables.steps.word_string_check.output_prediction_choices.2"
msgstr "Hello"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_string_check
msgid "pages.IntroducingVariables.steps.word_string_check.output_prediction_choices.3"
msgstr "'Hello'"

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.steps.word_string_check.text"
msgstr "Good. For comparison, run `__program__` in the shell by itself, with the quotes."

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.title"
msgstr "Introducing Variables"

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid "pages.LoopingOverNestedLists.steps.final_text.text"
msgstr ""
"You have mastered nested lists and how to combine them with nested loops.\n"
"Brilliant! You now have extremely powerful programming tools in your tool belt."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
msgid "pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.0.text"
msgstr "This is very similar to the previous exercise."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
msgid "pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.1.text"
msgstr "When should you print the boolean?"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
msgid "pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.2.text"
msgstr "Remember you want to print it only once."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
msgid "pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.3.text"
msgstr "Instead of defining a boolean for each sublist, define only one boolean for the entire list."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
msgid "pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.4.text"
msgstr "When and how should you modify the boolean?"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#.     # __code0__:
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Python%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22goodbye+world%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+there%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+world%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22how+are+you%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
msgid "pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text"
msgstr ""
"Well done!\n"
"\n"
"Next, print only one boolean to indicate if `word` is present in any string in the entire nested list at all. For example, if\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"your program should print `False`."

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid "pages.LoopingOverNestedLists.steps.nested_list_loop_python_tutor.requirements"
msgstr ""
"Run a single program consisting of the two parts above combined.\n"
"They're separated so that you don't need to type in the `numbers = [...]` part,\n"
"but typing in the nested loop part is best for learning.\n"
"Make sure the indentation is correct."

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid "pages.LoopingOverNestedLists.steps.nested_list_loop_python_tutor.text"
msgstr ""
"Now run the same program again in Python Tutor.\n"
"\n"
"Examine what `numbers` looks like, and what `numbers[0]` up to `numbers[3]` are.\n"
"Look at how `sublist` and `num` variables advance."

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid "pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.requirements"
msgstr ""
"Run a single program consisting of the two parts above combined.\n"
"They're separated so that you don't need to type in the `numbers = [...]` part,\n"
"but typing in the nested loop part is best for learning.\n"
"Make sure the indentation is correct."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#.     # __code1__:
#.     for sublist in numbers:
#.         for num in sublist:
#.             print(num)
#.         print('---')
#. 
#.     # __code0__:
#.     numbers = [[1, 2, 3], [4, 5], [6], []]
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.num
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.sublist
msgid "pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.text"
msgstr ""
"You can use a nested loop to iterate over each element and sub-element of a nested list.\n"
"For example, consider this nested list.\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Click the button to copy the list into the editor, then type in the following nested loop.\n"
"\n"
"__code1__\n"
"\n"
"Look carefully at the code. Note that the outer loop creates a variable `sublist`\n"
"and the inner loop iterates over the same variable. This is a common pattern.\n"
"Now run the code."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
msgid "pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.0.text"
msgstr "How do you check if a string contains a word?"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
msgid "pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.1.text"
msgstr "Make sure to check whether **the string** contains the word, not the sublist."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
msgid "pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.2.text"
msgstr "How can you access each string in each sublist of a nested list?"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
msgid "pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.3.text"
msgstr "You need to use a nested loop."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
msgid "pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.4.text"
msgstr "The loops should follow the same pattern as the example at the beginning of the page."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#.     # __code0__:
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22goodbye+world%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+there%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+world%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22how+are+you%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
msgid "pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text"
msgstr ""
"Now let's solve some problems using this kind of loop.\n"
"\n"
"Suppose we have a nested list of strings like the one below,\n"
"and we want to search for a particular `word` deep within the list.\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"You can imagine that `strings` represents a book, where each sublist is a page and each string within\n"
"is a line in that page.\n"
"It could also represent a library, where each list is a book, and each string is a page.\n"
"\n"
"Write a program to print every string that contains `word`.\n"
"It should work for any `word` and `strings`. For the example above, it should print\n"
"\n"
"    hello there\n"
"    hello world\n"
"\n"
"Remember that there is a specific way to check if a string contains another string. If you can't remember how, Google it!"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid "pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.0.text"
msgstr "For each sublist, define a boolean."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid "pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.1.text"
msgstr "Go through a sublist, update the boolean accordingly."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid "pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.2.text"
msgstr "Only print the boolean once for each sublist."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid "pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.3.text"
msgstr "What should be the initial value for the boolean?"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid "pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.4.text"
msgstr "What if one of the sublists is empty? What should you print for that sublist?"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid "pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.5.text"
msgstr "If you find the word in a string, the boolean should be set to `True`."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid "pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.6.text"
msgstr "What if a string doesn't contain the word?"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid "pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.7.text"
msgstr "Doesn't matter! It doesn't change whether any other string might contain the word."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid "pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.8.text"
msgstr "In other words, don't set the boolean to `False` except at the beginning."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#.     # __code0__:
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
#. 
#.     # __code1__:
#.     False
#.     True
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22goodbye%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22goodbye+world%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+there%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+world%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22how+are+you%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
msgid "pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text"
msgstr ""
"Nice!\n"
"\n"
"Now let's change the exercise slightly. This time the output should tell us which *sublists* contain `word`,\n"
"rather than which inner strings. In particular, we want to print a boolean for each sublist:\n"
"`True` if the sublist contains the word in any of its strings, `False` if it's not there at all.\n"
"\n"
"Given these example inputs:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"then your program should print\n"
"\n"
"__code1__\n"
"\n"
"Note that `word in sublist` won't work. For example, `\"hello\" in [\"hello there\", \"how are you\"]` is `False`\n"
"because `\"hello\"` is not *equal* to either of the two elements of that list, even though it is in one of them."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
msgid "pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.0.text"
msgstr "Since the strings can have different lengths, this is a bit tricky."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
msgid "pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.1.text"
msgstr "For how long should your outer loop go this time?"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
msgid "pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.2.text"
msgstr "Before you start handling the strings, it might be a good idea to find the longest string length first."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
msgid "pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.3.text"
msgstr "The rest is very similar to the previous exercise."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
msgid "pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.4.text"
msgstr "The only difference is that now you have to determine whether to add a letter from a string, or a space."

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid "pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.text"
msgstr ""
"Excellent! If you'd like, you can just continue to the [next page](#DefiningFunctions) now.\n"
"Or you can do a bonus challenge!\n"
"\n"
"Now let's generalize the previous exercise to strings of unequal length. Once again you are given a list of strings.\n"
"Like before, write a program that prints the first letter of each string together on one line,\n"
"then the second letters together on the next line, and so on.\n"
"But this time, if a string does not have enough letters, it should print a space.\n"
"\n"
"For example, if\n"
"\n"
"    __no_auto_translate__\n"
"    strings = [\"abcqwe\", \"def\", \"ghiq\"]\n"
"\n"
"your program should print\n"
"\n"
"    adg\n"
"    beh\n"
"    cfi\n"
"    q q\n"
"    w\n"
"    e"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid "pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.0.text"
msgstr "This is NOT similar to the previous exercises on this page."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid "pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.1.text"
msgstr "Think about the solution when there's just two strings. How can you generalize it to a list of strings?"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid "pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.2.text"
msgstr "You'll need to go through the first letters, then the second letters, and so on."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid "pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.3.text"
msgstr "You'll have to use a loop, but how long should the loop take?"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid "pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.4.text"
msgstr "Remember that strings in the list have equal lengths."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid "pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.5.text"
msgstr "For each position (first, second etc.) define a new string."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid "pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.6.text"
msgstr "What should that string be initially?"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid "pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.7.text"
msgstr "For each position (first, second etc.) you'll have to go through each string in the list."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid "pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.8.text"
msgstr "You'll need another loop inside the one you have."

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. 
#.     # __code0__:
#.     strings = ["abc", "def", "ghi"]
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22abc%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22def%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22ghi%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
msgid "pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.text"
msgstr ""
"Excellent!\n"
"\n"
"[Earlier in the course](#GettingElementsAtPositionExercises) there was an exercise\n"
"to print two strings vertically side by side, like this:\n"
"\n"
"    H W\n"
"    e o\n"
"    l r\n"
"    l l\n"
"    o d\n"
"\n"
"Now we're going to generalize this to a list of strings, rather than just two.\n"
"\n"
"For this exercise you are given a list of strings of **equal length**.\n"
"Write a program that prints the first letter of each string on one line,\n"
"then the second letter of each string on the next line, and so on. For example, if\n"
"\n"
"__code0__\n"
"\n"
"then your program should print\n"
"\n"
"    __no_auto_translate__\n"
"    adg\n"
"    beh\n"
"    cfi\n"
"\n"
"Your program should work for any such list. In particular, if you use the following list,\n"
"you'll discover a hidden message from the Zen of Python!\n"
"\n"
"    __copyable__\n"
"    __no_auto_translate__\n"
"    strings = [\"  b n\", \"f ete\", \"liths\", \"astat\", \"t ene\", \"  r d\"]\n"
"\n"
"Note that this time you shouldn't add spaces between letters in the output."

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid "pages.LoopingOverNestedLists.title"
msgstr "Looping Over Nested Lists"

#. https://futurecoder.io/course/#MakingTheBoard
#. 
#.     # __code2__:
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#. 
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#. 
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#. 
#.     test()
#. 
#.     # __code0__:
#.     def make_board(size):
#.         board = []
#.         for _ in range(size):
#.             row = []
#.             for _ in range(size):
#.                 row.append(' ')
#.             board.append(row)
#.         return board
#. 
#.     # __code1__:
#.     board.append(row.copy())
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.cube
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.make_board
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.make_cube
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.size
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.test
msgid "pages.MakingTheBoard.steps.final_text.text"
msgstr ""
"Well done!\n"
"\n"
"This could be solved by moving the first loop inside the second to make a new `row` each time:\n"
"\n"
"__code0__\n"
"\n"
"Another way is to make a copy of `row` each time, e.g. keep the original code but change one line:\n"
"\n"
"__code1__\n"
"\n"
"You can also copy `row` with `row[:]` or `list(row)`. But it's important to know that\n"
"all these methods make a *shallow copy* of the list.\n"
"That means they copy the whole list at the top level, without making copies of each element.\n"
"That's fine in this case where `row` only contains strings which can't be modified\n"
"and don't need copying. But if the elements are mutable objects like lists,\n"
"as is the case with `board`, you may run into the same problem again.\n"
"Here's an example:\n"
"\n"
"    __copyable__\n"
"__code2__\n"
"\n"
"Here each element of `cube` is a separate list, a copy of `board`.\n"
"And within each of those copies, each element is also a separate list, a copy of `row`.\n"
"But the shallow copies of `board` all have the same first element as each other (the first copy of `row`),\n"
"the same second element, and so on.\n"
"Changing `make_board` won't fix anything here, the solution is to either:\n"
"\n"
"- Call `make_board` repeatedly to make a new `board` each time, or\n"
"- Use the `deepcopy` function instead of `board.copy()`.\n"
"  `deepcopy` makes copies at every level of nested objects.\n"
"\n"
"If you're still confused, don't worry.\n"
"This is just preparing you to deal with your code behaving weirdly in the future.\n"
"You're not required to understand this right now and this lesson will still be valuable.\n"
"\n"
"Either way, we're ready to make the full game. You can do it!"

#. https://futurecoder.io/course/#MakingTheBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.0.text"
msgstr "The existing code is almost correct."

#. https://futurecoder.io/course/#MakingTheBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.1.text"
msgstr "There are several ways to solve this."

#. https://futurecoder.io/course/#MakingTheBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.2.text"
msgstr "Some solutions involve adding something small."

#. https://futurecoder.io/course/#MakingTheBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.3.text"
msgstr "You can also rearrange the code without adding or removing anything (except spaces)."

#. https://futurecoder.io/course/#MakingTheBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.4.text"
msgstr "The problem is that a single list `row` is used several times."

#. https://futurecoder.io/course/#MakingTheBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.5.text"
msgstr "So one solution is to make copies of `row` which will all be separate."

#. https://futurecoder.io/course/#MakingTheBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.6.text"
msgstr "Another solution is to make a new `row` from scratch each time."

#. https://futurecoder.io/course/#MakingTheBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.7.text"
msgstr "There are a few ways to copy a list in Python with a tiny bit of code."

#. https://futurecoder.io/course/#MakingTheBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.8.text"
msgstr "Making a new row each time can be done by just rearranging the code."

#. https://futurecoder.io/course/#MakingTheBoard
msgid "pages.MakingTheBoard.steps.fix_make_board.special_messages.not_separate.text"
msgstr "However, the sublists in the result are not all separate objects."

#. https://futurecoder.io/course/#MakingTheBoard
#. 
#.     # __code0__:
#.     board[0][0] = 'X'
#.     board[1][0] = 'X'
#.     board[2][0] = 'X'
#. 
#.     # __code4__:
#.     board[1][0] = 'X'
#.     board[2][0] = 'X'
#. 
#.     # __code1__:
#.     board = [row, row, row]
#. 
#.     # __code2__:
#.     board[0][0] = 'X'
#. 
#.     # __code3__:
#.     row[0] = 'X'
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
msgid "pages.MakingTheBoard.steps.fix_make_board.text"
msgstr ""
"Can you see what happened?\n"
"\n"
"Every row got an `'X'` in the first position!\n"
"It's as if the code actually did this:\n"
"\n"
"__code0__\n"
"\n"
"Try and figure out what's wrong by yourself.\n"
"But again, it's tricky, so don't drive yourself crazy over it.\n"
"\n"
"If you want, here's some hints:\n"
"\n"
" - Try running the code through some debuggers.\n"
" - Experiment. Make changes to the code and see what happens.\n"
" - No, the code didn't do 3 assignments like I suggested above. There was just one list assignment.\n"
" - There's no hidden loops or anything.\n"
" - How many lists does `board` contain? 3?\n"
" - The previous page has a subtle hint at what happened.\n"
" - There is a page from a previous chapter where this kind of problem is explained directly.\n"
" - Specifically [this page](#EqualsVsIs).\n"
" - Try running the code with Python Tutor.\n"
"\n"
"OK, if you're ready, here's the answer.\n"
"\n"
"The list `row` was only created once, and reused several times.\n"
"`board` contains the same list three times. Not copies, just one list in three places.\n"
"It's like it did this:\n"
"\n"
"__code1__\n"
"\n"
"Which means that this code:\n"
"\n"
"__code2__\n"
"\n"
"is equivalent to:\n"
"\n"
"__code3__\n"
"\n"
"which affects 'all the lists' in `board` because they're all just the one list `row`.\n"
"In other words, the above line is *also* equivalent to each of these two lines:\n"
"\n"
"__code4__\n"
"\n"
"because `row` is `board[0]`, `board[1]`, and `board[2]` all at once.\n"
"\n"
"Your job now is to fix `make_board` to not have this problem.\n"
"It should still return a list of length `size` where each\n"
"element is also list of length `size` where each element is the string `' '`.\n"
"The sublists should all be separate list objects, not the same\n"
"list repeated."

#. https://futurecoder.io/course/#MakingTheBoard
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.MakingTheBoard.steps.naive_make_board.text"
msgstr ""
"So far the board has been provided for you as a nested list.\n"
"But for the full program, you need to create it yourself.\n"
"Should be easy, right? Here's some code to do that:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"It's close, but there's a subtle problem with it.\n"
"Make sure you understand the code,\n"
"and bonus points if you can spot the bug!\n"
"If not, don't feel bad or waste too much time on it."

#. https://futurecoder.io/course/#MakingTheBoard
msgid "pages.MakingTheBoard.title"
msgstr "Making the Board"

#. https://futurecoder.io/course/#ModifyingWhileIterating
msgid "pages.ModifyingWhileIterating.steps.final_text.text"
msgstr ""
"To reiterate, ***never modify something while you iterate over it***. Your options are:\n"
"\n"
"- Modify a copy\n"
"- Iterate over a copy\n"
"- Don't modify anything, make a new version instead."

#. https://futurecoder.io/course/#ModifyingWhileIterating
#. 
#.     # __code1__:
#.     for number in numbers.copy():
#. 
#.     # __code0__:
#.     for number in numbers:
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.number
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
msgid "pages.ModifyingWhileIterating.steps.make_copy.requirements"
msgstr ""
"Run the same program as above, but change the second line:\n"
"\n"
"__code0__\n"
"\n"
"to:\n"
"\n"
"__code1__\n"
"\n"
"i.e. add `.copy()` after `numbers` but before `:`."

#. https://futurecoder.io/course/#ModifyingWhileIterating
#. 
#.     # __code0__:
#.     for number in numbers.copy():
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.number
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
msgid "pages.ModifyingWhileIterating.steps.make_copy.text"
msgstr ""
"But it turns out this does nearly the same thing - it doesn't end in an error, but it still doesn't remove 7 or 3.\n"
"This happens for the same reason - iterating over a list still goes through the indices under the hood.\n"
"\n"
"The lesson here is to ***never modify something while you iterate over it***. Keep mutation and looping separate.\n"
"\n"
"The good news is that there are many ways to solve this. You can instead just loop over a copy, as in:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#ModifyingWhileIterating
msgid "pages.ModifyingWhileIterating.steps.make_copy2.text"
msgstr ""
"Now the list being modified and the list being iterated over are separate objects, even if they start out with equal contents.\n"
"\n"
"Similarly, you could loop over the original and modify a copy:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#ModifyingWhileIterating
msgid "pages.ModifyingWhileIterating.steps.make_new_list.text"
msgstr ""
"Or you could build up a new list from scratch. In this case, we've already done a similar thing in an exercise:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#ModifyingWhileIterating
msgid "pages.ModifyingWhileIterating.steps.remove_instead_of_pop.text"
msgstr ""
"As it runs, it clearly skips even looking at 7 or 3 and doesn't remove them, and at the end it fails when it tries to access an index that's too high. Can you see why this happens?\n"
"\n"
"The index variable `i` runs through the usual values 0, 1, 2, ... as it's supposed to, but as the list changes those are no longer the positions we want. For example in the first iteration `i` is 0 and `number` is 10, which gets removed. This shifts the rest of the numbers left one position, so now 7 is in position 0. But then in the next iteration `i` is 1, and `numbers[i]` is 8. 7 got skipped.\n"
"\n"
"We could try writing the program to use `remove` instead of `pop` so we don't have to use indices. It even looks nicer this way.\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#ModifyingWhileIterating
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.ModifyingWhileIterating.steps.run_broken_with_python_tutor.text"
msgstr ""
"Consider this program. It loops through a list of numbers and removes the ones smaller than 10. Or at least, it tries to.\n"
"Run it with Python Tutor.\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"(remember that `numbers.pop(i)` removes the element from `numbers` at index `i`)"

#. https://futurecoder.io/course/#ModifyingWhileIterating
msgid "pages.ModifyingWhileIterating.title"
msgstr "Modifying While Iterating"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.hints.0.text"
msgstr ""
"Your solution should have exactly three statements: `x = [15, 12, -6, 3]`, `y = ` followed by one line copied exactly "
"from the list, and `print(y)`."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.hints.1.text"
msgstr "If you're not sure, look up how to calculate the average/mean."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.hints.2.text"
msgstr "To calculate the average of numbers in `x` we need two things."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.hints.3.text"
msgstr "Which two functions/methods give you those two things?"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.hints.4.text"
msgstr "How do you combine those two things to calculate the average?"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.requirements"
msgstr ""
"Copy the three lines above, then replace `(insert_one_line_from_above)` with exactly one line from the long list of "
"lines above. The middle line should still start with `y = `."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#.     # __code0__:
#.     x = [15, 12, -6, 3]
#.     y = (insert_one_line_from_above)
#.     print(y)
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.text"
msgstr ""
"Excellent work! For the next exercise, start with this incomplete program:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Replace the part after `y = ` with one line from the list above.\n"
"The final program should print the average (technically the *mean*) of the numbers in `x`."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum
msgid "pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.hints.0.text"
msgstr ""
"Your solution should have exactly three statements: `x = ['a', 'b', 'c']`, `y = ` followed by one line copied exactly "
"from the list, and `print(y)`."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum
msgid "pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.hints.1.text"
msgstr "When is `1 in x` True?"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum
msgid "pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.hints.2.text"
msgstr "When `1` is in `x`!"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum
msgid "pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.hints.3.text"
msgstr "Could be that `1` is in `x` once, or twice, or three times..."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum
msgid "pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.hints.4.text"
msgstr "...but not zero times!"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid "pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.requirements"
msgstr ""
"Copy the three lines above, then replace `1 in x` with exactly one line from the long list of lines above. The middle "
"line should still start with `y = `. The line you choose should have the same effect as `1 in x`, so that the program "
"prints `True`."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#.     # __code0__:
#.     sum(len(x))
#.     sum(range(x))
#.     sum(range(len(x)))
#.     sum(len(range(x)))
#.     sum(range(x)) + 1
#.     sum(range(x + 1))
#.     sum(x) / len(x)
#.     sum(x) / range(x)
#.     sum(x) / range(len(x))
#.     sum(x) / len(range(x))
#.     sorted(x)[1]
#.     sorted(x)[2]
#.     sorted(x)[-1]
#.     sorted(x)[-2]
#.     x.count(1) >= 0
#.     x.count(1) > 0
#.     x.count(1) > 1
#. 
#.     # __code1__:
#.     x = [1, 2, 0, 3]
#.     y = 1 in x
#.     print(y)
msgid "pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.text"
msgstr ""
"You may recognise some of these from your exercises. I assure you that those exercises were not pointless,\n"
"as you've now learned valuable fundamental skills. For example, you can use `in` to check if a list contains 5,\n"
"but there's no similarly easy way to check for a number bigger than 5.\n"
"\n"
"Now you will solve another set of four exercises involving these new concepts.\n"
"Again, correct and incorrect lines of code are mixed together,\n"
"and you must choose the correct line from the list.\n"
"\n"
"__code0__\n"
"\n"
"Here is a program:\n"
"\n"
"    __copyable__\n"
"__code1__\n"
"\n"
"Replace the part `1 in x` (leave in the `y = `) with one line from the list above that does the same thing."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#.     # __code0__:
#.     some_list.count(value)
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value
msgid "pages.MoreListFunctionsAndMethods.steps.count_predict_exercise.text"
msgstr ""
"**`count`**: Returns the number of times the argument appears in the list using the syntax\n"
"\n"
"__code0__\n"
"\n"
"For example run this line in the shell:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid "pages.MoreListFunctionsAndMethods.steps.final_text.text"
msgstr "Congratulations! You are now a master of list methods and functions!"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#.     # __code0__:
#.     value in some_list
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value
msgid "pages.MoreListFunctionsAndMethods.steps.in_predict_exercise.text"
msgstr ""
"**`in`**: A comparison operator that checks if a value is in a list, using the syntax\n"
"\n"
"__code0__\n"
"\n"
"For example run this program:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.hints.0.text"
msgstr ""
"Your solution should have exactly three statements: `x = [12, -6, 2, -1, 3]`, `y = ` followed by one line copied "
"exactly from the list, and `print(y)`."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.hints.1.text"
msgstr "The numbers in `x` seem to be all out of order. Can you do something about that?"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.hints.2.text"
msgstr "If you figured that part out, try using that function in the shell to play around with it."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.hints.3.text"
msgstr "How would you use that function to get the smallest value in a list? What about the biggest?"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.hints.4.text"
msgstr "After that, how can you get the *second* smallest value?"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid "pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.requirements"
msgstr ""
"Copy the three lines above, then replace `(insert_one_line_from_above)` with exactly one line from the long list of "
"lines above. The middle line should still start with `y = `."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#.     # __code0__:
#.     x = [12, -6, 2, -1, 3]
#.     y = (insert_one_line_from_above)
#.     print(y)
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid "pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.text"
msgstr ""
"Excellent. And the last one:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Replace the part after `y = ` with one line from the list above.\n"
"The final program should print the *second smallest value* in `x`."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#.     # __code0__:
#.     sorted(some_list)
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid "pages.MoreListFunctionsAndMethods.steps.sorted_predict_exercise.text"
msgstr ""
"Here are a few more useful functions/methods.\n"
"\n"
"**`sorted`**: Takes an iterable and returns a list of the elements in order from smallest to largest, using the syntax\n"
"\n"
"__code0__\n"
"\n"
"For example run this line in the shell:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#.     # __code0__:
#.     sum(some_list)
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid "pages.MoreListFunctionsAndMethods.steps.sum_predict_exercise.text"
msgstr ""
"**`sum`**: Add up an iterable of numbers using the syntax\n"
"\n"
"__code0__\n"
"\n"
"For example run this line in the shell:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_range_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.hints.0.text"
msgstr ""
"Your solution should have exactly three statements: `x = 100`, `y = ` followed by one line copied exactly from the "
"list, and `print(y)`."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_range_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.hints.1.text"
msgstr "What function/method can be used to add up things?"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_range_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.hints.2.text"
msgstr "Which function/method gives us the numbers `1, 2, 3, ..., x`?"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_range_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.hints.3.text"
msgstr "You have to make a small tweak, otherwise that last number `x` will be left out."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid "pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.requirements"
msgstr ""
"Copy the three lines above, then replace `(insert_one_line_from_above)` with exactly one line from the long list of "
"lines above. The middle line should still start with `y = `."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. 
#.     # __code0__:
#.     x = 100
#.     y = (insert_one_line_from_above)
#.     print(y)
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid "pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.text"
msgstr ""
"Good job! For the next exercise, start with this incomplete program:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"Replace the part after `y = ` with one line from the list above.\n"
"The final program should print the result of adding up all the numbers from `1` to `x` inclusive, i.e. `1 + 2 + 3 + ... + x`."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid "pages.MoreListFunctionsAndMethods.title"
msgstr "More List Functions and Methods"

#. https://futurecoder.io/course/#MoreOnReturn
msgid "pages.MoreOnReturn.steps.break_vs_return.requirements"
msgstr ""
"Run the same code as in the previous step, but replace the whole last line of the function (`return letter`) with just"
" `break`."

#. https://futurecoder.io/course/#MoreOnReturn
msgid "pages.MoreOnReturn.steps.break_vs_return.text"
msgstr ""
"As before, `return` ***stops the whole function***, including all loops.\n"
"\n"
"Previously we showed [how to stop a loop with `break`](#UsingBreak).\n"
"Change `return letter` to `break` and see what the difference is."

#. https://futurecoder.io/course/#MoreOnReturn
#. 
#.     # __code0__:
#.     if condition:
#.         return value1
#.     else:
#.         return value2
#. 
#.     # __code1__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.condition
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value1
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value2
msgid "pages.MoreOnReturn.steps.cannot_return_multiple_values.text"
msgstr ""
"Once a `return` statement is executed, the function will stop, and the rest of the code is ignored.\n"
"This means that any code immediately after a `return` in the same block is *unreachable*:\n"
"`return 2` can *never* be reached no matter how many times we run this function!\n"
"\n"
"***One, and only one `return` can be executed per function call, then execution stops.***\n"
"\n"
"Multiple `return` statements can still be useful when used properly, e.g. in an `if-else` block:\n"
"\n"
"__code0__\n"
"\n"
"A common mistake is to misunderstand what `return` does in `for` loops. Try the following:\n"
"\n"
"    __copyable__\n"
"__code1__"

#. https://futurecoder.io/course/#MoreOnReturn
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.MoreOnReturn.steps.double_return_in_one_function.text"
msgstr ""
"Sometimes `return` can be a source of confusion and mistakes for new learners.\n"
"Let's learn more about how it works.\n"
"\n"
"Run this code:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#MoreOnReturn
msgid "pages.MoreOnReturn.steps.final_text.text"
msgstr ""
"Unlike `return`, `break` only stops the innermost loop in which it is used, in this case `for number in range(3):`.\n"
"Here's exactly what happens:\n"
"\n"
"- For `letter = b`, the line `print(f\"{letter} {number}\")` is executed only for `number = 0`,\n"
"- then the inner loop is stopped by `break`, but\n"
"- the outer loop continues its execution, moving on to the next letter `c`\n"
"- which is executed in full since it does not trigger the `break` statement."

#. https://futurecoder.io/course/#MoreOnReturn
#. 
#.     # __code0__:
#.     def double_numbers(numbers):
#.         doubles = []
#.         for x in numbers:
#.             doubles.append(x * 2)
#.         return doubles
#. 
#.     assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
#. 
#.     # __code1__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.double_numbers
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.doubles
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
msgid "pages.MoreOnReturn.steps.return_ends_whole_function.text"
msgstr ""
"At first it may look intuitive to `return` one value for each iteration in a `for` loop.\n"
"But it doesn't work like that!\n"
"If you inspect the code with `snoop` or Python tutor you can see that the function returns 2 in the first\n"
"loop iteration and then ends immediately.\n"
"\n"
"Even when there's only one `return` statement, it will get executed only once and return one value.\n"
"If you want to return several values, return a list:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"What happens if there are nested loops? Try the following function:\n"
"\n"
"    __copyable__\n"
"__code1__"

#. https://futurecoder.io/course/#MoreOnReturn
msgid "pages.MoreOnReturn.title"
msgstr "`return` ends the function call"

#. https://futurecoder.io/course/#MultiLineExpressions
msgid "pages.MultiLineExpressions.steps.final_text.text"
msgstr "So if you get a mysterious `SyntaxError`, make sure that you haven't improperly broken up any lines!"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MultiLineExpressions.steps.invalid_multiline
msgid "pages.MultiLineExpressions.steps.invalid_multiline.program"
msgstr ""
"is_friend = name == \"Alice\" or\n"
"            name == \"Bob\""

#. https://futurecoder.io/course/#MultiLineExpressions
msgid "pages.MultiLineExpressions.steps.invalid_multiline.text"
msgstr ""
"Our code lines are starting to get quite long.\n"
"Thankfully Python offers a few ways to spread out one statement across many lines,\n"
"but it's not automatic. You have to make sure Python understands that's what you're doing.\n"
"For example, this code is invalid syntax and will give you an error:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#MultiLineExpressions
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.MultiLineExpressions.steps.valid_multiline.text"
msgstr ""
"Python tries to interpret this as two separate lines of code and gets confused. You need to tell it that\n"
"the first line is continuing onto the second line.\n"
"\n"
"One way to do this is by adding `\\` at the end of the line to 'escape' the line break.\n"
"\n"
"Another way is to ensure that the line break is contained within some kind of brackets. Then the line\n"
"continuation is implied because Python will wait till all brackets have been closed before\n"
"considering a line to be complete. If you already have brackets because for example you're calling a function\n"
"or making a list, you may not need to do anything! Otherwise you can add brackets to any expression\n"
"to imply the line continuation.\n"
"\n"
"Here are some examples. Pay close attention to the details.\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#MultiLineExpressions
msgid "pages.MultiLineExpressions.title"
msgstr "Multi-line statements"

#. https://futurecoder.io/course/#NavigatingShellHistory
msgid "pages.NavigatingShellHistory.steps.final_text.text"
msgstr ""
"Here's a tip: often you will want to re-run a previously entered bit of code, or a slightly modified version of it. "
"You can copy and paste, but that's tedious and gets in the way of experimenting. A better method is to press the Up "
"Arrow key on your keyboard. This will insert the previous line of code into the shell. Keep pressing it to go further "
"back in your history, and if you go too far, press the Down Arrow key to go the other way. Try using it now."

#. https://futurecoder.io/course/#NavigatingShellHistory
msgid "pages.NavigatingShellHistory.title"
msgstr "Navigating Shell History"

#. https://futurecoder.io/course/#NestedListAssignment
msgid "pages.NestedListAssignment.steps.final_text.text"
msgstr "Brilliant! You're almost ready to put it all together, keep going!"

#. https://futurecoder.io/course/#NestedListAssignment
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.NestedListAssignment.steps.modify_list_in_function.text"
msgstr ""
"We've seen how to get input from the user, now let's use that to actually put pieces\n"
"on the board and play the game. For starters, try out this code:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#NestedListAssignment
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.0.text"
msgstr "Your function needs to call `input()` twice. Input isn't passed to `play_move` as an argument."

#. https://futurecoder.io/course/#NestedListAssignment
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.1.text"
msgstr "`input()` always returns a string."

#. https://futurecoder.io/course/#NestedListAssignment
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.10.text"
msgstr "Once you've got two numbers, you need to modify the nested list `board` with them."

#. https://futurecoder.io/course/#NestedListAssignment
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.11.text"
msgstr "The code for this has been shown to you above."

#. https://futurecoder.io/course/#NestedListAssignment
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.12.text"
msgstr "You just need to use the numbers from user input instead of the hardcoded 1 and 0."

#. https://futurecoder.io/course/#NestedListAssignment
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.13.text"
msgstr "You can use nested subscripting in one line, or do it in two steps."

#. https://futurecoder.io/course/#NestedListAssignment
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.2.text"
msgstr "A string that looks like a number is still a string, not a number."

#. https://futurecoder.io/course/#NestedListAssignment
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.3.text"
msgstr "List indices have to be numbers, not strings."

#. https://futurecoder.io/course/#NestedListAssignment
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.4.text"
msgstr "If the board is 3x3, the user might input 1, 2, or 3 for each coordinate."

#. https://futurecoder.io/course/#NestedListAssignment
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.5.text"
msgstr "What are the valid indices of a list of length 3?"

#. https://futurecoder.io/course/#NestedListAssignment
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.6.text"
msgstr "You need to take the input of 1, 2, or 3 and turn it into 0, 1, or 2."

#. https://futurecoder.io/course/#NestedListAssignment
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.7.text"
msgstr "You also need to be able to handle bigger boards, like 9x9 or beyond."

#. https://futurecoder.io/course/#NestedListAssignment
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.8.text"
msgstr "You can't do maths with strings, only numbers."

#. https://futurecoder.io/course/#NestedListAssignment
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.9.text"
msgstr "How can you convert a string to a number?"

#. https://futurecoder.io/course/#NestedListAssignment
msgid "pages.NestedListAssignment.steps.nested_assignment_input.requirements"
msgstr "Your function should modify the `board` argument. It doesn't need to `return` or `print` anything."

#. https://futurecoder.io/course/#NestedListAssignment
#. 
#.     # __code3__:
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#. 
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#. 
#.     def play_move(board, player):
#.         ...
#. 
#.     play_game()
#. 
#.     # __code0__:
#.     row = board[1]
#.     row[0] = player
#. 
#.     # __code1__:
#.     board[1][0] = player
#. 
#.     # __code2__:
#.     2
#.     1
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%5Cn%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27%5CnO+to+play%3A%5Cn%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27%5CnX+to+play%3A%5Cn%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.first_row
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.joined_row
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.joined_rows
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.play_game
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.play_move
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.player
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
msgid "pages.NestedListAssignment.steps.nested_assignment_input.text"
msgstr ""
"These two lines:\n"
"\n"
"__code0__\n"
"\n"
"can be combined into one:\n"
"\n"
"__code1__\n"
"\n"
"The two pieces of code are pretty much exactly equivalent. Python first evaluates\n"
"`board[1]` to *get* the inner list, while the `[0] = ...` sets an element of `board[1]`.\n"
"You can see the value of `board[1]` in `birdseye` because it's an expression,\n"
"and you could actually replace it with any other expression.\n"
"\n"
"Now you know how to set elements in nested lists, it's time to make this interactive!\n"
"Write your own version of `play_move` that takes input from the user\n"
"to determine where to play, instead of always playing at `board[1][0]`.\n"
"It should call `input()` twice, so the user can give the row and the column\n"
"as two separate numbers. Also, our users are not programmers, so they start counting from 1,\n"
"not 0.\n"
"\n"
"For example, if the user types in these inputs:\n"
"\n"
"__code2__\n"
"\n"
"that means they want to play a move in the second row and first column, which is the same\n"
"as our original example.\n"
"\n"
"Here is some starting code:\n"
"\n"
"    __copyable__\n"
"__code3__\n"
"\n"
"This calls `play_move` twice so the user will need to enter two pairs of numbers.\n"
"Here's an example of what a 'game' should look like:\n"
"\n"
"     123\n"
"    1\n"
"    2\n"
"    3\n"
"\n"
"    X to play:\n"
"\n"
"__code2__\n"
"     123\n"
"    1\n"
"    2X\n"
"    3\n"
"\n"
"    O to play:\n"
"\n"
"    1\n"
"    3\n"
"     123\n"
"    1  O\n"
"    2X\n"
"    3\n"
"\n"
"You don't need to use the provided code exactly, it's just to give you a feeling of what's happening.\n"
"The important thing is that your `play_move` function modifies the `board` argument correctly.\n"
"It doesn't need to return or print anything, that will not be checked.\n"
"\n"
"You can assume that the user will always enter valid numbers. Later we will learn how to deal\n"
"with invalid inputs, like numbers out of range or inputs that aren't numbers at all."

#. https://futurecoder.io/course/#NestedListAssignment
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.NestedListAssignment.steps.nested_assignment_two_lines.text"
msgstr ""
"Note how calling `play_move(game_board, 'X')` actually *modifies* `game_board` directly.\n"
"The variable `board` inside the call to `play_move` and\n"
"the variable `game_board` inside the call to `play_game` point to the same list object.\n"
"There's no copying. Python Tutor is good at showing this with arrows.\n"
"\n"
"This also means that in this case there's no need for `play_move` to return anything,\n"
"it can just modify `board` and the caller (`play_game` in this case) will see the effect.\n"
"\n"
"However, our board is two dimensional, represented by a nested list.\n"
"So we need to assign `player` to an element of an inner list, something like this:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#NestedListAssignment
msgid "pages.NestedListAssignment.title"
msgstr "Nested List Assignment: Playing Moves on the Board"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
msgid "pages.NewlinesAndFormatBoard.steps.discovering_newline.special_messages.bad_string.text"
msgstr "Oops, `string` doesn't have the right value. Run the program from the previous step again."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
msgid "pages.NewlinesAndFormatBoard.steps.discovering_newline.text"
msgstr ""
"Hooray! A *triple quoted string* is allowed to span many lines and they will be shown in the output.\n"
"\n"
"Like single and double quotes, triple quotes are just another kind of notation, not a new kind of string.\n"
"`\"\"\"abc\"\"\"` is the same thing as `\"abc\"`.\n"
"\n"
"However `string` does contain something new. Run `__program__` in the shell to see."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
msgid "pages.NewlinesAndFormatBoard.steps.final_text.text"
msgstr ""
"Great work! That was quite challenging.\n"
"\n"
"Now you have mastered how to build up a string of multiple lines of text, and solved the problem of displaying the board to the players.\n"
"\n"
"Next you will learn more about types in Python and how to convert them, and how to get input from the players.\n"
"You are already about halfway done with the project. Keep going!"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid "pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.0.text"
msgstr ""
"There are two types of lines to be displayed: one type has the pieces joined by `|`s in between them, the other type "
"has `-`s joined by `+`s in between them."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid "pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.1.text"
msgstr "Both of these types of lines can be built up by using `join` appropriately."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid "pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.10.text"
msgstr "Then apply `join` to that list, with the `+-` line as separator."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid "pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.11.text"
msgstr "To add the newlines to the `+-` line correctly, take a look at the test case we provided."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid "pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.2.text"
msgstr "For example, how can you convert a row `['X', 'O', 'X']` into `'X|O|X'` using `join`?"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid "pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.3.text"
msgstr "Similarly, how can you obtain `'-+-+-'` using `join`? To what list should you apply `join`?"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid "pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.4.text"
msgstr "Once you figured out how to build up both types of lines, how can you combine them to obtain the final result?"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid "pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.5.text"
msgstr "Notice that the lines with the `+-`  signs are always the same."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid "pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.6.text"
msgstr "And there is one line with `+-` separating every consecutive pair of lines with pieces."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid "pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.7.text"
msgstr "You can use `join` on the lines themselves!"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid "pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.8.text"
msgstr ""
"The lines with the pieces can be joined together with the `+-` line in between them (with newlines added in "
"appropriate places)."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid "pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.9.text"
msgstr "To do that, first you need to keep the lines with the pieces stored in a list as you are building them."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#.     # __code0__:
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
#. 
#.     # __code3__:
#.     def format_board(board):
#.         ...
#. 
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'X|O|X\n-+-+-\nO| | \n-+-+-\n |X|O'
#.     )
#. 
#.     # __code1__:
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
#. 
#.     # __code2__:
#.     board = [
#.         ['X', 'O', 'X'],
#.         [' ', 'O', 'O'],
#.         [' ', 'X', ' ']
#.     ]
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%5Cn%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27%5Cn%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27X%7CO%7CX%5Cn-%2B-%2B-%5CnO%7C+%7C+%5Cn-%2B-%2B-%5Cn+%7CX%7CO%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.joined_rows
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.result
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
msgid "pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text"
msgstr ""
"Excellent! A typical solution looks like:\n"
"\n"
"__code0__\n"
"\n"
"If you looked up how `join` works and used it in your solution, that's great!\n"
"You might have solved it with something like this:\n"
"\n"
"__code1__\n"
"\n"
"If you'd like, you can just continue to the [next page](#Types) now. Or you can do a bonus challenge!\n"
"\n"
"Write an improved version of `format_board` that displays row and column separators. For example, if\n"
"\n"
"__code2__\n"
"\n"
"then `print(format_board(board))` should print\n"
"\n"
"    X|O|X\n"
"    -+-+-\n"
"     |O|O\n"
"    -+-+-\n"
"     |X|\n"
"\n"
"Once again it should work for a square `board` of *any size*.\n"
"\n"
"You are strongly encouraged to use `join` on this exercise. We provide one test as before, you can write additional tests:\n"
"\n"
"    __copyable__\n"
"__code3__"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.0.text"
msgstr "Look carefully at the test case we provided. It shows you all you need!"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.1.text"
msgstr "You need to build up a string for the whole board. Start with an empty string."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.2.text"
msgstr "For each row, add the characters from that row to the string."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.3.text"
msgstr "You'll need a nested loop."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.4.text"
msgstr "When you reach the end of a row, you need to add a newline before the next row."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.5.text"
msgstr "`'\\n'` is just like any other character! You can add it as usual with `+`."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.6.text"
msgstr "Notice that the end of the last row is different than the others."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.7.text"
msgstr "Before you add a newline, you'll need to check if it's the last row or not."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.8.text"
msgstr "Your outer loop should loop over the length of the board."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.9.text"
msgstr "Then check if you are at the last index or not."

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#.     # __code0__:
#.     def format_board(board):
#.         ...
#. 
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'XOX\nO  \n XO'
#.     )
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27XOX%5CnO++%5Cn+XO%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.text"
msgstr ""
"Now use the newline character to write the function `format_board` (your solution should work for a square `board` of any size):\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.NewlinesAndFormatBoard.steps.introducing_newline.text"
msgstr ""
"There's the secret!\n"
"\n"
"`\\n` represents a ***newline*** character. This is just another character, like a letter or a space (`' '`).\n"
"It's the character between two separate lines that you type in by pressing Enter on your keyboard.\n"
"\n"
"Again, `\\n` *represents* the newline character within a Python string literal.\n"
"The string doesn't actually contain `\\` and `n`, it just contains one character. Check this in the shell:\n"
"\n"
"__code0__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string
msgid "pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.program"
msgstr ""
"assert_equal(\n"
"    format_board([\n"
"        ['X', 'O', 'X'],\n"
"        [' ', 'O', 'O'],\n"
"        [' ', 'X', ' ']\n"
"    ]),\n"
"    \"XOX\n"
"      OO\n"
"      X \"\n"
")"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#.     # __code1__:
#.     def format_board(board):
#.         ...
#.         return ...
#. 
#.     assert_equal(format_board([...]), "...")
#. 
#.     # __code0__:
#.     assert_equal(print_board([...]), "...")
#. 
#.     # __code2__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_board
msgid "pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text"
msgstr ""
"This is a good start but ideally we'd like a function which *returns* a string rather than printing it.\n"
"This way other code can make easy use of the string in different ways. We might want to manipulate the string\n"
"(e.g. draw a box around it or extract only the first few lines), we might want to send it somewhere other than the screen\n"
"(e.g. a file) and in this particular case we want to be able to test it with `assert_equal`. This doesn't work:\n"
"\n"
"__code0__\n"
"\n"
"because `print_board` doesn't use `return` so it just returns `None` by default.\n"
"So instead we want code like this:\n"
"\n"
"__code1__\n"
"\n"
"Then `print(format_board(board))` should print something like what we saw at the beginning.\n"
"But how do we return a string with multiple lines? And how do we test it? We'd like to do something like this:\n"
"\n"
"    __copyable__\n"
"__code2__\n"
"\n"
"See for yourself how this doesn't work."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.multi_line_strings_triple_quotes
msgid "pages.NewlinesAndFormatBoard.steps.multi_line_strings_triple_quotes.program"
msgstr ""
"string = \"\"\"First line\n"
"Second line\"\"\"\n"
"print(string)"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
msgid "pages.NewlinesAndFormatBoard.steps.multi_line_strings_triple_quotes.text"
msgstr ""
"Normally a string literal has to be on one line, so this is invalid:\n"
"\n"
"    string = \"First line\n"
"    Second line\"\n"
"    print(string)\n"
"\n"
"But Python provides a way! The solution is to use *triple quotes*, i.e. three quote characters in a row\n"
"(either `'''` or `\"\"\"`) around the contents of the string. Run the following:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.NewlinesAndFormatBoard.steps.one_way_to_print_board.text"
msgstr ""
"Next we want to tackle the problem of displaying the tic-tac-toe board. Here's one way to do this:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"(What's `\"\".join`? Google it!)"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
msgid "pages.NewlinesAndFormatBoard.title"
msgstr "The newline character, `format_board`"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.OtherComparisonOperators.steps.brokn_kyboard.text"
msgstr ""
"Here's a cute little program using `!=`:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.0.text"
msgstr "This is almost exactly the same as the previous step, just use strings instead of numbers."

#. https://futurecoder.io/course/#OtherComparisonOperators
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.1.text"
msgstr "You only need to run one very small, simple line in the shell."

#. https://futurecoder.io/course/#OtherComparisonOperators
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.2.text"
msgstr ""
"You can also do this by running multiple lines in the shell, first defining variables and then comparing them, but you"
" don't need to, this can be done without variables."

#. https://futurecoder.io/course/#OtherComparisonOperators
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.3.text"
msgstr "Remember adding two strings in the shell at the beginning of the course?"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.4.text"
msgstr "For example, we did `'hello' + 'world'`"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.5.text"
msgstr "For this exercise you have to do basically that, but compare them instead."

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.steps.comparing_strings.requirements"
msgstr "Run any code in the shell using either `<` or `>` on two strings."

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.steps.comparing_strings.text"
msgstr ""
"You can also use these operators to compare strings. If you arrange two strings in alphabetical order, the first one "
"is 'less than' the second. See for yourself."

#. https://futurecoder.io/course/#OtherComparisonOperators
#. 
#.     # __code0__:
#.     if x1 < x2:
#.         if x1 < x3:
#.             first = x1
#.         else:
#.             first = x3
#.     else:
#.         if x2 < x3:
#.             first = x2
#.         else:
#.             first = x3
#. 
#.     print(first)
#. 
#.     # __code1__:
#.     first = x1
#. 
#.     if x2 < first:
#.         first = x2
#. 
#.     if x3 < first:
#.         first = x3
#. 
#.     print(first)
#. 
#.     # __code2__:
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Alice%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Bob%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Charlie%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.first
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x1
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x2
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x3
msgid "pages.OtherComparisonOperators.steps.final_text.text"
msgstr ""
"Marvelous!\n"
"\n"
"There are many ways this could be solved. Here's one solution:\n"
"\n"
"__code0__\n"
"\n"
"Here's another:\n"
"\n"
"__code1__\n"
"\n"
"These programs (and yours too) all work equally well with numbers and strings. So for:\n"
"\n"
"__code2__\n"
"\n"
"they will print `Alice` because that's the first string alphabetically.\n"
"\n"
"`<` and `>` evaluate to False if the compared values are equal. For example,\n"
"3 is not less than 3, so `3 < 3` and `3 > 3` are both False.\n"
"To allow equal values, use `<=` and `>=`.\n"
"Again, if you squint, they look a bit like ≤ and ≥.\n"
"Note that the `=` comes second - there are no such operators as `=<` or `=>`.\n"
"To remember this, read them out loud as \"less than or equal to\"\n"
"and \"greater than or equal to\".\n"
"\n"
"In summary, the main comparison operators are `==`, `!=`, `<`, `>`, `<=`, and `>=`.\n"
"If you ever have doubts about what they do, play with them in the shell!"

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.steps.grades_example.text"
msgstr ""
"Here's a practical example of `<` in action for you to try:\n"
"\n"
"__program_indented__\n"
"\n"
"Recall that `elif percentage < 60` after `if percentage < 40` means \"if the percentage wasn't less than 40 and also is less than 60\", so it will pass for all numbers from 40 to 59 inclusive. Similarly a 'B' is for percentages from 60 to 79, and an 'A' is for any number 80 and up."

#. https://futurecoder.io/course/#OtherComparisonOperators
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.introducing_less_than
msgid "pages.OtherComparisonOperators.steps.introducing_less_than.hints.0.text"
msgstr "You only need to run one very small, simple line in the shell."

#. https://futurecoder.io/course/#OtherComparisonOperators
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.introducing_less_than
msgid "pages.OtherComparisonOperators.steps.introducing_less_than.hints.1.text"
msgstr "How would you add two numbers in the shell?"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.introducing_less_than
msgid "pages.OtherComparisonOperators.steps.introducing_less_than.hints.2.text"
msgstr "For example, try `123 + 456`"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.introducing_less_than
msgid "pages.OtherComparisonOperators.steps.introducing_less_than.hints.3.text"
msgstr "For this exercise you have to do basically that, but compare them instead."

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.steps.introducing_less_than.requirements"
msgstr "Run any code in the shell using either `<` or `>` on two numbers."

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.steps.introducing_less_than.text"
msgstr ""
"Other handy operators are `<` (less than) and `>` (greater than). For example, `a < b` means \"`a` is less than `b`\"."
" Try using one of these in the shell to compare two numbers."

#. https://futurecoder.io/course/#OtherComparisonOperators
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise
msgid "pages.OtherComparisonOperators.steps.min_three_exercise.hints.0.text"
msgstr "Try writing a program which prints the smallest of just `x1` and `x2`."

#. https://futurecoder.io/course/#OtherComparisonOperators
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise
msgid "pages.OtherComparisonOperators.steps.min_three_exercise.hints.1.text"
msgstr "All you need is a few uses of `<`, `if`, and maybe `else`."

#. https://futurecoder.io/course/#OtherComparisonOperators
#. 
#.     # __code0__:
#.     x1 = 30
#.     x2 = 10
#.     x3 = 20
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x1
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x2
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x3
msgid "pages.OtherComparisonOperators.steps.min_three_exercise.text"
msgstr ""
"Now for an exercise: write a program that takes three variables `x1`, `x2`, and `x3`, and prints the value of the smallest one. So for:\n"
"\n"
"__code0__\n"
"\n"
"it should print `10`."

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.steps.try_not_equals.text"
msgstr ""
"The opposite of the equals operator `==` is the *not equals* operator `!=`. If you squint it sort of looks like ≠. It "
"evaluates to `True` when two values are...not equal. Try `__program__` for yourself in the shell."

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.title"
msgstr "Other Comparison Operators"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. 
#.     # __code0__:
#.     def quadruple(x):
#.         x = double(x)
#.         x = double(x)
#.         return x
#. 
#.     def quadruple(x):
#.         return double(double(x))
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.double
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quadruple
msgid "pages.ReturningValuesFromFunctions.steps.final_text.text"
msgstr ""
"Well done! Here are two possible solutions:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
msgid "pages.ReturningValuesFromFunctions.steps.first_return.text"
msgstr ""
"Functions can be especially useful when they *return* values, rather than just printing them. Try this example:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
msgid "pages.ReturningValuesFromFunctions.steps.losing_return_value.text"
msgstr ""
"Here we passed `number` (which has value `5`) as the argument `x` to the function `double`, and `double` *returned*\n"
"`x * 2`, i.e. `5 * 2`, i.e. `10`, which became the value of the variable `twice`. The special keyword `return` inside\n"
"`double` makes `double(number)` an expression with a value - specifically the value which was returned.\n"
"It's a bit like `twice = double(number)` is equivalent to `twice = number * 2`, although that's not\n"
"exactly what happens.\n"
"\n"
"Note that `double(number)` *didn't change `number`*. At the end, `number` is still `5`. Rather, `double(number)`\n"
"returned a new value. It's crucial that the program made use of that returned value, in this case by storing\n"
"it in a variable. Immediately printing it with `print(double(number))` also works. On the other hand,\n"
"try this:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid "pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.0.text"
msgstr "To multiply by 4, multiply by 2 twice."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid "pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.1.text"
msgstr "That means you need to call `double` twice."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid "pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.10.text"
msgstr "Look at the definition of `double` for an example."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid "pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.11.text"
msgstr "Make sure that you don't call `quadruple` inside the function body of `quadruple`. Check your indentation."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid "pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.2.text"
msgstr "Make sure you use the returned value from `double` each time."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid "pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.3.text"
msgstr "Make sure you have all the parts of a function definition."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid "pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.4.text"
msgstr "That includes `def`, `()`, and `:`."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid "pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.5.text"
msgstr "Make sure your function is named `quadruple`."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid "pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.6.text"
msgstr "Make sure it accepts one parameter called `x` in between the parentheses `()`."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid "pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.7.text"
msgstr "Use the parameter inside the function body."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid "pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.8.text"
msgstr "Make sure the body is indented."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid "pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.9.text"
msgstr "Make sure you `return` something at the end."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid "pages.ReturningValuesFromFunctions.steps.quadruple_exercise.messages.used_multiply.text"
msgstr ""
"You cannot use `*`, `+`, or even any numbers inside `quadruple`.\n"
"You must call `double` to solve the problem."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
msgid "pages.ReturningValuesFromFunctions.steps.quadruple_exercise.requirements"
msgstr "Write a program which defines a function called `quadruple` as described above."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
msgid "pages.ReturningValuesFromFunctions.steps.quadruple_exercise.text"
msgstr ""
"Here `double(number)` still returned `10`, but we didn't make use of that so it was lost. `number` is still `5`.\n"
"\n"
"Write a function `quadruple` which takes one argument `x` and returns that argument multiplied by 4.\n"
"You must only use the `double` function - no numbers or multiplication are allowed directly in the body\n"
"of `quadruple`."

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
msgid "pages.ReturningValuesFromFunctions.title"
msgstr "Returning Values From Functions"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise
msgid "pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise.hints.0.text"
msgstr "How should you define the string?"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise
msgid "pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise.hints.1.text"
msgstr "With single quotes, or with double quotes?"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise
msgid "pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise.hints.2.text"
msgstr "You only need one string."

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise
msgid "pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise.hints.3.text"
msgstr "No need to add strings together."

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid "pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise.text"
msgstr ""
"As you can see Python considers the same string defined by single or double quotes as the same.\n"
"\n"
"Now write a program that prints the following text from the Zen of Python:\n"
"\n"
"    __copyable__\n"
"    Special cases aren't special enough to break the rules.\n"
"\n"
"The program should be a single line using `print()`, no variables."

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid "pages.SingleAndDoubleQuotesInStrings.steps.double_quotes.text"
msgstr ""
"So we can't use an apostrophe as we like in a string with single quotes.\n"
"The apostrophe counts as a single quote and therefore acts as a *closing quote* of a string definition `'Alice'`.\n"
"Then the remaining text `s Diner'` is invalid syntax and Python does not understand it.\n"
"\n"
"Thankfully Python allows us to define strings in another way, using double quotes `\"` instead:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid "pages.SingleAndDoubleQuotesInStrings.steps.final_text.text"
msgstr ""
"Good job!\n"
"\n"
"In most cases you can use either single or double quotes to define your strings, however you like it.\n"
"But if your string contains `'` then use `\"` to define it and vice versa."

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid "pages.SingleAndDoubleQuotesInStrings.steps.single_double_quotes_equal.text"
msgstr ""
"Remember that quotes are just part of the human notation for strings.\n"
"They are not stored as an actual part of the string.\n"
"Try this in the shell:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise
msgid "pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise.hints.0.text"
msgstr "Think simple! How would you normally do this?"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise
msgid "pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise.hints.1.text"
msgstr "If a string contains a single quote, we must use double quotes to define it."

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise
msgid "pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise.hints.2.text"
msgstr "What if the string contains double quotes?"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid "pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise.text"
msgstr ""
"Excellent!\n"
"\n"
"Now print the following quote exactly (including the double quotes):\n"
"\n"
"    __copyable__\n"
"    \"Talk is cheap. Show me the code.\" - Linus Torvalds\n"
"\n"
"The program should be a single line using `print()`, no variables."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quotes_apostrophe
msgid "pages.SingleAndDoubleQuotesInStrings.steps.single_quotes_apostrophe.program"
msgstr "print('Alice's Diner')"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. 
#.     # __code0__:
#.     name = 'Alice'
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Alice%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.SingleAndDoubleQuotesInStrings.steps.single_quotes_apostrophe.text"
msgstr ""
"We have been defining strings using single quotes up until now, like:\n"
"\n"
"__code0__\n"
"\n"
"What happens if we want to define a string that contains an apostrophe? Try this:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid "pages.SingleAndDoubleQuotesInStrings.title"
msgstr "Single and Double Quotes in Strings"

#. https://futurecoder.io/course/#StoringCalculationsInVariables
msgid "pages.StoringCalculationsInVariables.steps.final_text.text"
msgstr ""
"Unlike a spreadsheet where formulas update automatically, a variable like `sentence` doesn't remember how it was "
"calculated and won't change if the underlying values `word` or `name` are changed."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
msgid "pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.output_prediction_choices.0"
msgstr ""
"Hello World\n"
"Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
msgid "pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.output_prediction_choices.1"
msgstr ""
"Hello World\n"
"Goodbye World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
msgid "pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.output_prediction_choices.2"
msgstr ""
"Goodbye World\n"
"Goodbye World"

#. https://futurecoder.io/course/#StoringCalculationsInVariables
msgid "pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.requirements"
msgstr "Run a program consisting of the four lines in the previous step followed by the two lines here."

#. https://futurecoder.io/course/#StoringCalculationsInVariables
#. 
#.     # __code0__:
#.     word = 'Goodbye'
#.     print(sentence)
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Goodbye%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.sentence
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
msgid "pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.text"
msgstr ""
"Now `sentence` has the value `'Hello World'` which can be used multiple times. Note that it will continue to have this value until it is directly reassigned, e.g. with another statement like `sentence = <something>`. For example, add these two lines to the end of the program:\n"
"\n"
"__code0__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid "pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.0"
msgstr "sentence"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid "pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.1"
msgstr "word + ' ' + name"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid "pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.2"
msgstr "Hello + ' ' + World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid "pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.3"
msgstr "'Hello' + ' ' + 'World'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid "pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.4"
msgstr "Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid "pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.5"
msgstr "'Hello World'"

#. https://futurecoder.io/course/#StoringCalculationsInVariables
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.text"
msgstr ""
"Often you will use variables to store the results of calculations. This will help to build more complex programs. For example, try this program:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#StoringCalculationsInVariables
msgid "pages.StoringCalculationsInVariables.title"
msgstr "Storing Calculations In Variables"

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
#. 
#.     # __code0__:
#.     if word.lower() == 'yes':
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27yes%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
msgid "pages.StringMethodsUnderstandingMutation.steps.final_text.text"
msgstr ""
"Observe that `sentence.upper()` does not change the original `sentence`.\n"
"\n"
"You can also use `word.lower()` immediately in a larger expression, e.g.\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.StringMethodsUnderstandingMutation.steps.mutation_string_append.text"
msgstr ""
"Again these two methods also work on strings similar to how they work on lists.\n"
"`index` returns the *beginning index* of the search word `'the'` in the longer string\n"
"`'feed the dog and the cat'`, which is `5`.\n"
"\n"
"|  0   |  1   |  2   |  3   |  4   | **5** |  6   |  7   |  8   | ...  |\n"
"| :--: | :--: | :--: | :--: | :--: | :---: | :--: | :--: | :--: | :--: |\n"
"|  f   |  e   |  e   |  d   |      | **t** |  h   |  e   |      | ...  |\n"
"\n"
"Note that in most cases, methods which *modify a list in place* (`append`, `insert`, `remove`) merely return `None`,\n"
"while the remaining functions/methods return a new useful value without changing the original argument.\n"
"The only exception is the `pop` method.\n"
"\n"
"Modifying a value directly is called *mutation* - types of values which can be mutated are *mutable*,\n"
"while those that can't are *immutable*. Lists are mutable.\n"
"Strings are immutable - they don't have any methods like `append` or even subscript assignment.\n"
"See for yourself:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_count_index
msgid "pages.StringMethodsUnderstandingMutation.steps.string_count_index.program"
msgstr ""
"string = 'feed the dog and the cat'\n"
"print(string.count('the'))\n"
"print(string.index('the'))"

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.StringMethodsUnderstandingMutation.steps.string_count_index.text"
msgstr ""
"`in` works on strings like it does on lists! The command returned `True` because `the` occurs in `feed the dog and the cat` as a *substring*.\n"
"How about `count` and `index`?\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_in_step
msgid "pages.StringMethodsUnderstandingMutation.steps.string_in_step.program"
msgstr "print('the' in 'feed the dog and the cat')"

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.StringMethodsUnderstandingMutation.steps.string_in_step.text"
msgstr ""
"You've already seen that `len` and subscripting work with strings, a bit as if strings are lists of characters.\n"
"Strings also support some of the new methods we've learned, not just for characters but for any substring.\n"
"For example, try the following:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
#. 
#.     # __code1__:
#.     __program_indented__
#. 
#.     # __code0__:
#.     word.lower()
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
msgid "pages.StringMethodsUnderstandingMutation.steps.string_lower_upper.text"
msgstr ""
"You simply can't change a string - you can only create new strings and use those instead.\n"
"That means that this is a useless statement on its own:\n"
"\n"
"__code0__\n"
"\n"
"The string referred to by `word` isn't modified, instead `word.lower()` returned a new string which was immediately discarded.\n"
"If you want to change the value that `word` refers to, you have to assign a new value to the variable:\n"
"\n"
"    __copyable__\n"
"__code1__"

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
msgid "pages.StringMethodsUnderstandingMutation.title"
msgstr "String Methods and Immutability"

#. https://futurecoder.io/course/#TestingFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.0.text"
msgstr "`string` should be surrounded by one space and `level` exclamation marks (`!`) on each side."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.1.text"
msgstr "Include the definition of `surround` from before in your program and call it in `alert`."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.10.text"
msgstr ""
"Think of how you would build up strings with `+=`. Repeatedly update the same variable, building up your result."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.11.text"
msgstr "That is, write `something = surround(something, '!')` in your loop."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.12.text"
msgstr "Make sure you `return` something at the end of `alert`."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.13.text"
msgstr "Make sure you don't `return` inside the loop, but after it. Check your indentation."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.14.text"
msgstr "Make sure that you don't call `alert` inside the function body of `alert`. Check your indentation."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.2.text"
msgstr "Use `surround` for the spaces."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.3.text"
msgstr "Use `surround` for the exclamation marks."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.4.text"
msgstr "You're not allowed to combine several exclamation marks into one string, so call `surround` several times."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.5.text"
msgstr "That is, call `surround` once for each pair of exclamation marks."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.6.text"
msgstr "So call `surround(..., '!')` several times."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.7.text"
msgstr "Use a loop to call it several times."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.8.text"
msgstr "Use `range(n)` to make your loop have `n` iterations."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.9.text"
msgstr "Make sure you use the return value from `surround`."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.messages.catch_return_inside_loop.text"
msgstr ""
"In the `alert` function, you placed your `return` statement at the wrong place!\n"
"Pay attention to your indentations in `alert`. You might be ending a loop too early with `return`."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.messages.used_format.text"
msgstr ""
"You cannot use string concatenation/formatting/interpolation/multiplication or f-strings in `alert`.\n"
"You must call `surround` to solve the problem."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#.     # __code0__:
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
#. 
#.     # __code1__:
#.     def alert(string, level):
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%21%21%21%21+DANGER+%21%21%21%21%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%21%21+Warning+%21%21%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22DANGER%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Warning%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.alert
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.level
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.string
msgid "pages.TestingFunctions.steps.alert_exercise.text"
msgstr ""
"Perfect! Now write a function `alert` that passes these tests:\n"
"\n"
"__code0__\n"
"\n"
"The body of `alert` is not allowed to contain `+`. Use `surround` instead. Your function should start like this:\n"
"\n"
"__code1__"

#. https://futurecoder.io/course/#TestingFunctions
msgid "pages.TestingFunctions.steps.complete_quadruple_tests.requirements"
msgstr ""
"Type in the program above.\n"
"Then change the last two lines by adding one argument to each `assert_equal` call to make the tests pass.\n"
"Don't touch the function definitions."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#.     # __code0__:
#.     def double(x):
#.         return x * 2
#. 
#.     def quadruple(x):
#.         return double(double(x))
#. 
#.     assert_equal(quadruple(2))
#.     assert_equal(quadruple(5))
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.double
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quadruple
msgid "pages.TestingFunctions.steps.complete_quadruple_tests.text"
msgstr ""
"Excellent! Our tests failed! Of course that's not usually a good thing, but it tells us that the tests are\n"
"doing their job. They will make sure that our implementation of `double` is correct.\n"
"\n"
"Let's practice this new concept. Below is the function `quadruple` from before with some incomplete tests.\n"
"Fix the program by adding the missing arguments to `assert_equal`.\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#TestingFunctions
msgid "pages.TestingFunctions.steps.final_text.text"
msgstr "Great work! These tools will be very helpful in coming chapters."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#.     # __code0__:
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22OK%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.actual
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.expected
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%22Error%21+%7Brepr%28actual%29%7D+%21%3D+%7Brepr%28expected%29%7D%22
msgid "pages.TestingFunctions.steps.introducing_assert_equal.text"
msgstr ""
"An important part of writing programs is testing that they work correctly. You can do this manually, e.g. by checking that\n"
"`print(double(5))` prints `10`, but this kind of thing can get tedious quickly.\n"
"It's helpful to actually write programs that test your programs. This is called *automated testing*,\n"
"and the programs are called *tests*.\n"
"\n"
"Here's a simple function `assert_equal` to help us write tests:\n"
"\n"
"__code0__\n"
"\n"
"\n"
"(What's that function `repr`? Try `print(f\"{'abc'} {repr('abc')}\")` to see one difference, but don't worry about it too much.)\n"
"\n"
"This isn't a standard part of python (although similar functions are), but we've added it to your coding environment\n"
"so you can always use it. Here's an example of using it for you to try out:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#TestingFunctions
msgid "pages.TestingFunctions.steps.make_tests_fail.requirements"
msgstr "Run the program from the previous step, but replace `x * 2` with `x * 3`. Keep the rest the same."

#. https://futurecoder.io/course/#TestingFunctions
msgid "pages.TestingFunctions.steps.make_tests_fail.text"
msgstr ""
"The OKs tell us that the tests passed. Our `double` function seems to be working correctly. Change it to return\n"
"`x * 3` instead and see what happens."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
msgid "pages.TestingFunctions.steps.surround_exercise.hints.0.text"
msgstr "The argument `sides` should be added before and after `string`."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
msgid "pages.TestingFunctions.steps.surround_exercise.hints.1.text"
msgstr "Use string concatenation to do this."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
msgid "pages.TestingFunctions.steps.surround_exercise.hints.2.text"
msgstr "Make sure the body is indented."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
msgid "pages.TestingFunctions.steps.surround_exercise.hints.3.text"
msgstr "Make sure you `return` something at the end."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
msgid "pages.TestingFunctions.steps.surround_exercise.hints.4.text"
msgstr "Make sure that you don't call `surround` inside the function body of `surround`. Check your indentation."

#. https://futurecoder.io/course/#TestingFunctions
#. 
#.     # __code0__:
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
#. 
#.     # __code1__:
#.     def surround(string, sides):
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%2B%2Bmore%2B%2B%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%3Dthe+same%3D%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22more%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22the+same%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.sides
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.string
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.surround
msgid "pages.TestingFunctions.steps.surround_exercise.text"
msgstr ""
"Another useful thing about the tests is that anyone can read them and see clear, unambiguous examples\n"
"of what the function does. This is helpful when a function is complicated and difficult to describe in English.\n"
"\n"
"For example, here are some tests:\n"
"\n"
"__code0__\n"
"\n"
"I don't need to explain what `surround` does, you can see for yourself.\n"
"\n"
"Write a function `surround` that passes these tests and starts like this:\n"
"\n"
"__code1__"

#. https://futurecoder.io/course/#TestingFunctions
msgid "pages.TestingFunctions.title"
msgstr "Testing Functions"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.equality_vs_assignment
msgid "pages.TheEqualityOperator.steps.equality_vs_assignment.program"
msgstr "print(1 + 2 = 3)"

#. https://futurecoder.io/course/#TheEqualityOperator
msgid "pages.TheEqualityOperator.steps.equality_vs_assignment.requirements"
msgstr "Run the program from the previous step, but replace any of the `==` with just `=`."

#. https://futurecoder.io/course/#TheEqualityOperator
msgid "pages.TheEqualityOperator.steps.equality_vs_assignment.text"
msgstr ""
"As you can see, if the values are equal, the equality expression evaluates to `True`,\n"
"otherwise it's `False`.\n"
"\n"
"Note the difference between the equality operator `==` and a single `=` which has different meanings,\n"
"particularly in assignment statements as you've seen them so far. What happens if you try\n"
"removing a single `=` from the previous program?"

#. https://futurecoder.io/course/#TheEqualityOperator
msgid "pages.TheEqualityOperator.steps.final_text.text"
msgstr "Well done!"

#. https://futurecoder.io/course/#TheEqualityOperator
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.TheEqualityOperator.steps.if_equals_replacing_characters.text"
msgstr ""
"Let's use `==` in an `if` statement. In this program, the `if` body runs only when `c` is the character `'s'`. See for yourself.\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#TheEqualityOperator
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters_exercise
msgid "pages.TheEqualityOperator.steps.if_equals_replacing_characters_exercise.hints.0.text"
msgstr "You just need to add a few lines of code that are very similar to existing ones."

#. https://futurecoder.io/course/#TheEqualityOperator
msgid "pages.TheEqualityOperator.steps.if_equals_replacing_characters_exercise.text"
msgstr "Now extend the program to also replace `e` with `3` and `a` with `@`."

#. https://futurecoder.io/course/#TheEqualityOperator
msgid "pages.TheEqualityOperator.steps.introducing_equality.text"
msgstr ""
"There are several ways to obtain booleans without assigning them directly,\n"
"which allows you to construct very useful `if` statements. In particular there\n"
"are many *comparison operators* which compare the values of two expressions.\n"
"The most common is the equality operator which checks if two values are equal.\n"
"It's denoted by two equals signs: `==`. Try running this:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#TheEqualityOperator
msgid "pages.TheEqualityOperator.title"
msgstr "The Equality Operator"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
msgid "pages.TheFullTicTacToeGame.steps.final_text.text"
msgstr ""
"### ***CONGRATULATIONS!!!***\n"
"\n"
"You did it!"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.0.text"
msgstr ""
"You should use all of the functions `winner`, `format_board` (not counting its use in `play_move`), `play_move`, "
"`make_board`, `print_winner`, and `print_draw` somewhere."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.1.text"
msgstr ""
"You only need to mention each of those functions once in your code, although some of them will be called several times"
" as the program runs."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.10.text"
msgstr "Whichever function is called, it must be called exactly once."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.11.text"
msgstr "One easy way to make sure you don't call a function multiple times is to call it outside of any loop."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.12.text"
msgstr "We've learned about two ways to make a loop stop."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.13.text"
msgstr "One way is `break`, which specifically ends one loop and no more."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.14.text"
msgstr "The second way ends not just the loop but the whole function call."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.15.text"
msgstr "The second way is `return`."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.16.text"
msgstr "Don't play moves in pairs like `play_move(board, player1)` and `play_move(board, player2)` in the sample code."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.17.text"
msgstr "Instead, each loop iteration should play one move."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.18.text"
msgstr "You need a variable to keep track of which player's turn it is."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.19.text"
msgstr "The player should be switched in each loop iteration."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.2.text"
msgstr "You will need a for loop to repeatedly play moves."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.20.text"
msgstr "An `if` statement is a good way to do this."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.21.text"
msgstr "Especially combined with an `else`."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.22.text"
msgstr "Make sure `player1` plays the first move."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.23.text"
msgstr "Only call `print_winner` after checking `winner` with an `if` statement."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.24.text"
msgstr "You need to check for the winner inside the loop since you don't know when a player might win."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.25.text"
msgstr "Once you call `print_winner`, you can use `return` to end the function."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.26.text"
msgstr "Just `return` by itself is fine, `play_game` isn't meant to return a value."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.27.text"
msgstr ""
"Don't use `else` after checking for a winner to call `print_draw` if there isn't a winner. Just because no one has won"
" yet doesn't mean it's a draw already."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.28.text"
msgstr "`print_draw` should only be called after all moves have been played and there's still no winner."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.29.text"
msgstr "So it should be called after the loop, outside of it."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.3.text"
msgstr ""
"You don't need to check if the board has been filled up, because you can always calculate how many moves it takes to "
"fill up the board."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.30.text"
msgstr "Check the indentation to make sure `print_draw` isn't in the body of the for loop."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.4.text"
msgstr ""
"So you can just use a loop that will run a fixed number of iterations, and inside the loop check if the loop needs to "
"be ended early."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.5.text"
msgstr "What's the maximum number of moves that can be played in a 3x3 board? 4x4?"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.6.text"
msgstr "A loop over a `range` is an easy way to iterate a fixed number of times."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.7.text"
msgstr "So you can use `for _ in range(N):` to play at most `N` moves."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.8.text"
msgstr "Once there's a winner, you need to end the loop and the game."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.9.text"
msgstr "Either `print_winner` or `print_draw` should be called, not both."

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. 
#.     # __code0__:
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#. 
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#. 
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#. 
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#. 
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or main_diagonal_winner(reversed(board))
#. 
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or diagonal_winner(board)
#. 
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in range(size))}\n{line.join(rows)}'
#. 
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#. 
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#. 
#.     def print_winner(player):
#.         print(f'{player} wins!')
#. 
#.     def print_draw():
#.         print("It's a draw!")
#. 
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#. 
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#. 
#.     play_game(3, 'X', 'O')
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22It%27s+a+draw%21%22
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board_size
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.col
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.column_winner
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal_winner
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27%5Cn++%7B%22%2B%22.join%28%22-%22+%2A+size%29%7D%5Cn%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27%7Bi+%2B+1%7D+%7B%22%7C%22.join%28row%29%7D%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27%7Bplayer%7D+to+play%3A%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27%7Bplayer%7D+wins%21%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27++%7B%22+%22.join%28str%28i+%2B+1%29+for+i+in+range%28size%29%29%7D%5Cn%7Bline.join%28rows%29%7D%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.line
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.main_diagonal_winner
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.make_board
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.play_game
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.play_move
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.player
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.player1
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.player2
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_draw
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_winner
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row_winner
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.rows
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.size
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.winner
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.winning_line
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.text"
msgstr ""
"It's time to put it all together! Below is some code to get started.\n"
"\n"
"It includes implementations of the various functions we defined in previous pages for solving parts\n"
"of the problem, using some tricks you haven't learned yet to make them shorter. Don't change them.\n"
"\n"
"Your task is to implement `play_game` correctly. The current implementation shows what\n"
"should happen at the start of the game, but it's obviously incomplete.\n"
"The solution should work for any board size and continue the game until it's finished.\n"
"The last thing that `play_game` should do is either call `print_winner(player)`\n"
"if `winner(board)` is true, or call `print_draw()` if the board is filled up with no winner.\n"
"\n"
"You can assume that the user will only enter valid inputs,\n"
"i.e. numbers from 1 to `board_size` to choose a cell on the board that isn't already taken.\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
msgid "pages.TheFullTicTacToeGame.title"
msgstr "The Full Tic-Tac-Toe Game"

#. https://futurecoder.io/course/#Types
msgid "pages.Types.steps.check_type_manually.text"
msgstr ""
"Python reports first that `type('Hello World')` is `<class 'str'>`. Don't worry about `class` for now.\n"
"`str` is short for *string*.\n"
"\n"
"Then `True` is a `bool` (short for *boolean*) and `[1, 2, 3]` has type `list`.\n"
"\n"
"Note that there are two types for numbers:\n"
"\n"
"- `int`, short for 'integer', is for whole numbers, meaning no fractions or decimal points.\n"
"- `float`, short for 'floating point number', is for numbers with a decimal point and maybe a fractional part\n"
"\n"
"In most cases you don't have to worry about the different types of number, as you can mix the two when doing maths.\n"
"\n"
"Types are values which can be used in various ways, just like other values.\n"
"For example, try this in the shell:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#Types
msgid "pages.Types.steps.common_type_errors.text"
msgstr ""
"What happens if you use an operator between a `str` and an `int`? Try in the shell:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#Types
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Types.steps.different_types_look_same.text"
msgstr ""
"Values with different types are usually quite different from each other, but they can look the same when printed,\n"
"which can be confusing. Try this:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"(You can use `print(repr(123))` and `print(repr('123'))` to tell the difference. What's `repr`? Google it!)"

#. https://futurecoder.io/course/#Types
msgid "pages.Types.steps.final_text.text"
msgstr ""
"Excellent!\n"
"\n"
"By the way, when you need to concatenate strings and numbers, remember that you can also\n"
"use f-strings. They often look nicer.\n"
"\n"
"You've learned about types in Python and how to avoid common errors by converting types.\n"
"Keep going with the rest of the project!"

#. https://futurecoder.io/course/#Types
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Types.steps.five_different_types.text"
msgstr ""
"So far we've seen various kinds of data: strings, lists, numbers and booleans.\n"
"These are called *types*. Every value has a type which affects how it behaves\n"
"and can be revealed with the `type` function:\n"
"\n"
"    __copyable__\n"
"__code0__"

msgid "pages.Types.steps.fixing_type_errors_with_conversion.disallowed.0.label"
msgstr "f-strings"

#. https://futurecoder.io/course/#Types
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.0.text"
msgstr "At what points is this code broken?"

#. https://futurecoder.io/course/#Types
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.1.text"
msgstr "There are values that need to be converted to a different type."

#. https://futurecoder.io/course/#Types
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.2.text"
msgstr "Specifically there's a `str` that needs to be converted to an `int`."

#. https://futurecoder.io/course/#Types
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.3.text"
msgstr "And an `int` that needs to be converted to a `str`."

#. https://futurecoder.io/course/#Types
#. 
#.     # __code0__:
#.     number = '3'
#.     for i in range(number):
#.         print('Starting... ' + i + 1)
#.     print('Go!')
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Go%21%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Starting...+%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.number
msgid "pages.Types.steps.fixing_type_errors_with_conversion.text"
msgstr ""
"Using a string instead of an integer in `range` like `range('5')`,\n"
"or in list subscripting like `list['3']` will also lead to an error.\n"
"\n"
"Most of these problems can be solved by converting the string to an integer by using `int` as a function:\n"
"`int('5')` will return the integer `5`.\n"
"Similarly an integer can be converted to a string by using `str` as a function:\n"
"`str(5)` will return the string `'5'`.\n"
"\n"
"Using this new knowledge, fix this broken program:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"The correct program should print:\n"
"\n"
"    Starting... 1\n"
"    Starting... 2\n"
"    Starting... 3\n"
"    Go!\n"
"\n"
"Your solution should work for any value of the variable `number`."

#. https://futurecoder.io/course/#Types
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.0.text"
msgstr ""
"You can start by using the ideas from your previous solution to `format_board`. Using `join` is highly recommended!"

#. https://futurecoder.io/course/#Types
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.1.text"
msgstr "The first line has to be treated separately from the rest."

#. https://futurecoder.io/course/#Types
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.2.text"
msgstr "Remember that `range` yields numbers in the way: 0, 1, 2, ..."

#. https://futurecoder.io/course/#Types
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.3.text"
msgstr "We want numbers on the first line like this: 1, 2, 3..."

#. https://futurecoder.io/course/#Types
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.4.text"
msgstr "Each number has to be converted to a string before being added to the first row!"

#. https://futurecoder.io/course/#Types
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.5.text"
msgstr "For the rows of the board itself, do something similar."

#. https://futurecoder.io/course/#Types
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.6.text"
msgstr "Start with a list consisting only of the first line that you built above."

#. https://futurecoder.io/course/#Types
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.7.text"
msgstr "Add each row's string to the list, then join the list with a newline character."

#. https://futurecoder.io/course/#Types
#. 
#.     # __code0__:
#.     def format_board(board):
#.         ...
#. 
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         ' 123\n1XOX\n2O  \n3 XO'
#.     )
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27+123%5Cn1XOX%5Cn2O++%5Cn3+XO%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
msgid "pages.Types.steps.format_board_with_numbers.text"
msgstr ""
"Write an improved version of `format_board` that has row and column numbers like this:\n"
"\n"
"     123\n"
"    1XOX\n"
"    2 OO\n"
"    3 X\n"
"\n"
"It should work for boards of any single-digit size. Here's a test case:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#Types
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Types.steps.less_than_has_two_meanings.text"
msgstr ""
"For two integers `+` acts as addition, whereas for two strings it acts as string concatenation.\n"
"Python automatically figures out the meaning of `+` from the types of the inputs.\n"
"Similarly `<` acts differently on two strings and two integers:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#Types
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Types.steps.less_than_sorting_strings.text"
msgstr ""
"So `<` acts as the usual 'less than' between two integers, because `13` is less than `120`,\n"
"but it acts as the dictionary ordering between two strings: `13` is 'alphabetically' after `120`\n"
"because `3` comes after `2`.\n"
"\n"
"See what difference this makes when sorting a list:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#Types
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Types.steps.plus_has_two_meanings.text"
msgstr ""
"Different types have different methods and support different operators.\n"
"The same method or operator can also mean different things.\n"
"For example, see how `+` has different meanings for `str` and `int`:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#Types
msgid "pages.Types.title"
msgstr "Types"

#. https://futurecoder.io/course/#UnderstandingProgramsWithPythonTutor
msgid "pages.UnderstandingProgramsWithPythonTutor.steps.final_text.text"
msgstr ""
"Note that the code runs twice separately: once here, once on pythontutor.com.\n"
"Depending on your program, the two runs may produce different results."

#. https://futurecoder.io/course/#UnderstandingProgramsWithPythonTutor
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.UnderstandingProgramsWithPythonTutor.steps.run_with_python_tutor.text"
msgstr ""
"It's time to learn about another tool to explore programs.\n"
"Copy the code below into the editor and then click the new \"Python Tutor\" button.\n"
"The button opens a new tab with a visualisation from [pythontutor.com](http://pythontutor.com).\n"
"There you can navigate through the program step by step with the \"Prev\" or \"Next\" buttons, or drag\n"
"the slider left or right. You can also see the values of variables on the right.\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#UnderstandingProgramsWithPythonTutor
msgid "pages.UnderstandingProgramsWithPythonTutor.title"
msgstr "Understanding Programs With Python Tutor"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
msgid "pages.UnderstandingProgramsWithSnoop.steps.final_text.text"
msgstr "Great job! You're working with increasingly complex programs."

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
msgid "pages.UnderstandingProgramsWithSnoop.steps.print_first_character.hints.0.text"
msgstr "The code should be almost exactly the same, just make a couple of small changes."

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
msgid "pages.UnderstandingProgramsWithSnoop.steps.print_first_character.hints.1.text"
msgstr "Make sure that the code inside `if include:` runs at the beginning of the loop, in the first iteration."

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
msgid "pages.UnderstandingProgramsWithSnoop.steps.print_first_character.hints.2.text"
msgstr "That means `include` should be `True` at that point."

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
msgid "pages.UnderstandingProgramsWithSnoop.steps.print_first_character.hints.3.text"
msgstr "Make sure that the code inside `if include:` *doesn't* run after the first iteration."

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
msgid "pages.UnderstandingProgramsWithSnoop.steps.print_first_character.hints.4.text"
msgstr "That means `include` should be `False` after the first iteration."

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
msgid "pages.UnderstandingProgramsWithSnoop.steps.print_first_character.text"
msgstr ""
"Tada! Scroll to the top of the terminal and let's walk through what `snoop` is showing you.\n"
"It starts out very straightforward:\n"
"\n"
"        1 | sentence = 'Hello World'\n"
"        3 | include = False\n"
"        4 | new_sentence = ''\n"
"        5 | for char in sentence:\n"
"     ...... char = 'H'\n"
"\n"
"The first lines are simply showing you the lines of the program that the computer ran.\n"
"On the left is the line number as seen in the editor.\n"
"\n"
"Running `for char in sentence:` assigns a value to the variable `char`, so `snoop` shows you that value.\n"
"Lines starting with `......` indicate a new variable or a change in the value of an existing variable.\n"
"Such lines will not be shown when they're redundant, which is why the `snoop` output doesn't start like this:\n"
"\n"
"        1 | sentence = 'Hello World'\n"
"     ...... sentence = 'Hello World'\n"
"        3 | include = False\n"
"     ...... include = False\n"
"        4 | new_sentence = ''\n"
"     ...... new_sentence = ''\n"
"        5 | for char in sentence:\n"
"     ...... char = 'H'\n"
"\n"
"The next two lines are:\n"
"\n"
"        6 |     if include:\n"
"        8 |     include = True\n"
"\n"
"What's important here is what's not showing: because `include` is `False`, line 7 (`new_sentence += char`) gets skipped. But then `include` is set to `True`, so the next iteration of the loop is different:\n"
"\n"
"        5 | for char in sentence:\n"
"     ...... char = 'e'\n"
"        6 |     if include:\n"
"        7 |         new_sentence += char\n"
"     .............. new_sentence = 'e'\n"
"\n"
"`new_sentence += char` runs for the first time and the variable `new_sentence` gets a new value.\n"
"\n"
"Now modify the program to do the opposite: only print the first character, leave out the rest."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
msgid "pages.UnderstandingProgramsWithSnoop.steps.print_tail.output_prediction_choices.0"
msgstr "Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
msgid "pages.UnderstandingProgramsWithSnoop.steps.print_tail.output_prediction_choices.1"
msgstr "ello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
msgid "pages.UnderstandingProgramsWithSnoop.steps.print_tail.output_prediction_choices.2"
msgstr "Hello Worl"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
msgid "pages.UnderstandingProgramsWithSnoop.steps.print_tail.output_prediction_choices.3"
msgstr "H"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
msgid "pages.UnderstandingProgramsWithSnoop.steps.print_tail.output_prediction_choices.4"
msgstr "d"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.UnderstandingProgramsWithSnoop.steps.print_tail.text"
msgstr ""
"Run this program:\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
msgid "pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop.requirements"
msgstr ""
"Run the same program from the previous step, but use the `snoop` button instead of the 'Run' button. Copy the program "
"again if you might have changed it."

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
msgid "pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop.text"
msgstr ""
"Programs are starting to get complicated!\n"
"It's time to introduce a new tool to help you understand programs. Click the `snoop` button to run the same program while also showing what's happening."

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
msgid "pages.UnderstandingProgramsWithSnoop.title"
msgstr "Understanding Programs With `snoop`"

#. https://futurecoder.io/course/#UsingBreak
#. 
#.     # __code0__:
#.     found = False
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#. 
#.     print(found)
#. 
#.     # __code1__:
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.             break
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.found
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.thing
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.thing_to_find
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.things
msgid "pages.UsingBreak.steps.final_text.text"
msgstr ""
"Nice!\n"
"\n"
"A typical solution looks something like this:\n"
"\n"
"__code0__\n"
"\n"
"Your solution is probably similar. It's fine, but it's a bit inefficient.\n"
"That's because it'll loop over the entire list even if it finds the element at the beginning.\n"
"You can stop any loop using a `break` statement, like so:\n"
"\n"
"__code1__\n"
"\n"
"This is just as correct but skips unnecessary iterations and checks once it finds the element.\n"
"You can use `snoop` to see the difference."

#. https://futurecoder.io/course/#UsingBreak
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.0.text"
msgstr "You will need a loop."

#. https://futurecoder.io/course/#UsingBreak
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.1.text"
msgstr "You will need an `if` statement."

#. https://futurecoder.io/course/#UsingBreak
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.2.text"
msgstr "You will need a comparison operator."

#. https://futurecoder.io/course/#UsingBreak
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.3.text"
msgstr "Specifically `==`."

#. https://futurecoder.io/course/#UsingBreak
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.4.text"
msgstr "You need a boolean variable that you print at the end."

#. https://futurecoder.io/course/#UsingBreak
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.5.text"
msgstr "If you find the element in the list you should set that variable to `True`."

#. https://futurecoder.io/course/#UsingBreak
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.6.text"
msgstr "Once you've found the element, you can't unfind it."

#. https://futurecoder.io/course/#UsingBreak
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.7.text"
msgstr "That means that once you set the variable to `True`, it should never be set to anything else after that."

#. https://futurecoder.io/course/#UsingBreak
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.8.text"
msgstr "Don't use an `else`."

#. https://futurecoder.io/course/#UsingBreak
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.9.text"
msgstr "There is no reason to ever set the variable to `False` inside the loop."

#. https://futurecoder.io/course/#UsingBreak
msgid "pages.UsingBreak.steps.list_contains_exercise.text"
msgstr ""
"Exercise: write a program which takes a list and a value and checks\n"
"if the list contains the value. For example, given:\n"
"\n"
"    __no_auto_translate__\n"
"    things = ['This', 'is', 'a', 'list']\n"
"    thing_to_find = 'is'\n"
"\n"
"it should print `True`, but for\n"
"\n"
"    __no_auto_translate__\n"
"    thing_to_find = 'other'\n"
"\n"
"it should print `False`."

#. https://futurecoder.io/course/#UsingBreak
msgid "pages.UsingBreak.title"
msgstr "Using `break` to end a loop early"

#. https://futurecoder.io/course/#UsingDictionaries
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.UsingDictionaries.steps.dna_part1.text"
msgstr ""
"Not bad! But you may have noticed that it looks a bit awkward. Why do we have to specify `'dog'` and `'box'` in both the `cart` and the `quantities`?\n"
"On the next page we'll look at how to loop directly over the keys of a dictionary,\n"
"so we can get rid of the `cart` argument.\n"
"\n"
"But first, let's practice what we've learned a bit more.\n"
"\n"
"[Earlier in the course](#IntroducingElif) we looked at converting one strand of DNA\n"
"into a new strand with matching nucleotides.\n"
"Here's a version of that code using a function. It substitutes each letter in the input `string`\n"
"with a different one.\n"
"\n"
"    __copyable__\n"
"__code0__"

#. https://futurecoder.io/course/#UsingDictionaries
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.0.text"
msgstr "This is still very similar to the previous exercises, but with strings instead of numbers."

#. https://futurecoder.io/course/#UsingDictionaries
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.1.text"
msgstr "You just have to think about the keys and values of `d`."

#. https://futurecoder.io/course/#UsingDictionaries
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.2.text"
msgstr "You need to obtain the correct values to build up a string to return."

#. https://futurecoder.io/course/#UsingDictionaries
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.3.text"
msgstr "You can basically replace the whole `if/elif` chain with a single line."

#. https://futurecoder.io/course/#UsingDictionaries
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.4.text"
msgstr "That line simply needs to use `d` to get the correct value."

#. https://futurecoder.io/course/#UsingDictionaries
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.5.text"
msgstr "Remember that the keys of `d` are the characters in `string`."

#. https://futurecoder.io/course/#UsingDictionaries
#. 
#.     # __code0__:
#.     def substitute(string, d):
#.         ...
#. 
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}), expected)
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27AGTAGCGTCCTTAGTTACAGGATGGCTTAT%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27TCATCGCAGGAATCAATGTCCTACCGAATA%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.expected
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.original
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.string
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.substitute
msgid "pages.UsingDictionaries.steps.dna_part2.text"
msgstr ""
"Now we can use dictionaries to make this code both shorter and more general so it can be used for other purposes.\n"
"\n"
"Your job is to add another argument to the `substitute` function: a dictionary called `d`.\n"
"The keys of `d` represent characters\n"
"in the first argument `string` that should be replaced by the corresponding values of `d`. For example, `'A': 'T'`\n"
"means that `'A'` should be replaced by `'T'`:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"This version of `substitute` should work for any arguments where all the characters in `string` are keys in `d`.\n"
"No more `if` statements needed!"

#. https://futurecoder.io/course/#UsingDictionaries
msgid "pages.UsingDictionaries.steps.final_text.text"
msgstr ""
"Nice! Here's an example of how this function can also be used to encrypt and decrypt secret messages:\n"
"\n"
"    __copyable__\n"
"    __no_auto_translate__\n"
"    def substitute(string, d):\n"
"        result = \"\"\n"
"        for letter in string:\n"
"            result += d[letter]\n"
"        return result\n"
"\n"
"    plaintext = 'helloworld'\n"
"    encrypted = 'qpeefifmez'\n"
"    letters = {'h': 'q', 'e': 'p', 'l': 'e', 'o': 'f', 'w': 'i', 'r': 'm', 'd': 'z'}\n"
"    reverse = {'q': 'h', 'p': 'e', 'e': 'l', 'f': 'o', 'i': 'w', 'm': 'r', 'z': 'd'}\n"
"    assert_equal(substitute(plaintext, letters), encrypted)\n"
"    assert_equal(substitute(encrypted, reverse), plaintext)\n"
"\n"
"The same function works in both directions, we just need to pass it different dictionaries.\n"
"\n"
"The two dictionaries are almost the same, we just swap around the key and value in each pair.\n"
"So to encrypt, we replace `e` with `p`, and to decrypt we change `p` back to `e`.\n"
"\n"
"Note that `'e'` is both a key and a value in `letters`.\n"
"\n"
"Looking up `letters['e']` means that we're asking about `'e'` as a *key*, so it gives `'p'`.\n"
"Remember, we can't use `letters` to ask which key is associated with `'e'` as a *value*.\n"
"But in this case we can use the other dictionary for that: `reverse['e']` gives `'l'`,\n"
"and `letters['l']` gives `'e'` again.\n"
"\n"
"Soon you'll write a function to create a dictionary like `reverse` automatically,\n"
"i.e. `reverse = swap_keys_values(letters)`."

#. https://futurecoder.io/course/#UsingDictionaries
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
msgid "pages.UsingDictionaries.steps.shopping_cart1.hints.0.text"
msgstr "Remember that `prices` is a dictionary."

#. https://futurecoder.io/course/#UsingDictionaries
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
msgid "pages.UsingDictionaries.steps.shopping_cart1.hints.1.text"
msgstr "To access a value in a dictionary, you need a key."

#. https://futurecoder.io/course/#UsingDictionaries
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
msgid "pages.UsingDictionaries.steps.shopping_cart1.hints.2.text"
msgstr "The keys for `prices` are the items in the `cart`."

#. https://futurecoder.io/course/#UsingDictionaries
#. 
#.     # __code2__:
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. 
#.     # __code0__:
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#. 
#.     # __code1__:
#.     prices = {'apple': 2, 'apple': 3}
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27box%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27cat%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27dog%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.cart
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.item
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.price
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.prices
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.result
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.total_cost
msgid "pages.UsingDictionaries.steps.shopping_cart1.text"
msgstr ""
"Let's see dictionaries in a real life problem. Imagine you're building an online shopping website.\n"
"You keep the prices of all your items in a dictionary:\n"
"\n"
"__code0__\n"
"\n"
"Here you can see one reason why looking up values in a dictionary could be a problem.\n"
"What would `prices[100]` be? `'dog'`? `'cat'`? `['dog', 'cat']`?\n"
"The same value can be repeated any number of times in a dictionary.\n"
"On the other hand, keys have to be unique. Imagine if your prices started like this:\n"
"\n"
"__code1__\n"
"\n"
"How much does an apple cost? We know it's `prices['apple']`, but is that `2` or `3`?\n"
"Clearly there should only be one price, so duplicate keys aren't allowed.\n"
"\n"
"Anyway, this is a normal shop where things have one price.\n"
"This normal shop has normal customers with normal shopping lists like `['apple', 'box', 'cat']`.\n"
"And even though your customers have calculators in their pockets, they still expect you to add up all the prices\n"
"yourself and tell them how much this will all cost, because that's what normal shops do.\n"
"\n"
"So let's write a function that does that. Complete the function below, particularly the line `price = ...`\n"
"\n"
"    __copyable__\n"
"__code2__"

#. https://futurecoder.io/course/#UsingDictionaries
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
msgid "pages.UsingDictionaries.steps.shopping_cart4.hints.0.text"
msgstr "Remember that the keys for `prices` and `quantities` are the same."

#. https://futurecoder.io/course/#UsingDictionaries
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
msgid "pages.UsingDictionaries.steps.shopping_cart4.hints.1.text"
msgstr "This is very similar to the previous exercise, we're just practicing."

#. https://futurecoder.io/course/#UsingDictionaries
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
msgid "pages.UsingDictionaries.steps.shopping_cart4.hints.2.text"
msgstr "`price` should be a value from `prices`, and similarly for `quantity`."

#. https://futurecoder.io/course/#UsingDictionaries
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
msgid "pages.UsingDictionaries.steps.shopping_cart4.hints.3.text"
msgstr "What key should be used to obtain each value?"

#. https://futurecoder.io/course/#UsingDictionaries
#. 
#.     # __code0__:
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#. 
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27box%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27cat%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27dog%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.cart
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.item
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.price
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.prices
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quantities
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quantity
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.result
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.total_cost
msgid "pages.UsingDictionaries.steps.shopping_cart4.text"
msgstr ""
"Perfect! You publish your website and start dreaming about how rich you're going to be.\n"
"\n"
"But soon you get a complaint from a customer who wants to buy 5 million dogs...and 2 boxes to put them in.\n"
"\n"
"Your website allows buying the same items several times, e.g. `total_cost(['box', 'box'], {...})` works,\n"
"but they have to add each item one at a time, and for some reason this customer doesn't want to click\n"
"'Add to Cart' 5 million times. People are so lazy!\n"
"\n"
"Here's the new code for you to fix:\n"
"\n"
"    __copyable__\n"
"__code0__\n"
"\n"
"We've added another parameter called `quantities` to `total_cost`.\n"
"Now `cart` is still a list of strings, but it doesn't have any duplicates.\n"
"`quantities` is a dictionary where the keys are the items in `cart` and the corresponding values are the quantity\n"
"of that item that the customer wants to buy."

#. https://futurecoder.io/course/#UsingDictionaries
msgid "pages.UsingDictionaries.title"
msgstr "Using Dictionaries in Practice"

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.steps.final_text.text"
msgstr ""
"Hooray! No more quotes! We'll break down what's happening in this code later. For now just know that "
"`print(<something>)` displays `<something>` in the shell. In particular it displays the actual content of strings that"
" we usually care about, instead of a representation of strings that's suitable for code which has things like quotes. "
"The word `print` here has nothing to do with putting ink on paper."

#. https://futurecoder.io/course/#UsingVariables
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.UsingVariables.steps.first_print.text"
msgstr ""
"Those quotes around strings are getting annoying. Try running this:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.steps.goodbye_plus_name.text"
msgstr "Now observe the effect of this change by running `__program__` again."

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.steps.hello_plus_name.text"
msgstr ""
"You can use variables in calculations just like you would use literals. For example, try:\n"
"\n"
"__program_indented__"

#. https://futurecoder.io/course/#UsingVariables
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
msgid "pages.UsingVariables.steps.name_assign.messages.assigned_something_else.text"
msgstr "Put `your_name` before the `=` to create a variable called `your_name`."

#. https://futurecoder.io/course/#UsingVariables
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
msgid "pages.UsingVariables.steps.name_assign.messages.empty_string.text"
msgstr "For this exercise, choose a non-empty string"

#. https://futurecoder.io/course/#UsingVariables
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
msgid "pages.UsingVariables.steps.name_assign.messages.name_equals_something_else.text"
msgstr "You've got the `your_name = ` part right, now put a string (use quotes) on the right of the `=`."

#. https://futurecoder.io/course/#UsingVariables
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
msgid "pages.UsingVariables.steps.name_assign.messages.starts_with_space.text"
msgstr "For this exercise, choose a name that doesn't start with a space."

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.steps.name_assign.requirements"
msgstr "Run something similar to `word = 'Hello'`, but replace `word` with `your_name`."

#. https://futurecoder.io/course/#UsingVariables
#. 
#.     # __code0__:
#.     word = 'Hello'
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Hello%27
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
msgid "pages.UsingVariables.steps.name_assign.text"
msgstr ""
"Previously we made a variable called `word` with the value `'Hello'` with this code:\n"
"\n"
"__code0__\n"
"\n"
"Now make a variable called `your_name` whose value is another string.\n"
"\n"
"(The character `_` in `your_name` is called an *underscore*. Use it to separate words when you want a variable name containing multiple words. You can type it on most keyboards by pressing Shift and hyphen/dash/minus (`-`).)"

#. https://futurecoder.io/course/#UsingVariables
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.UsingVariables.steps.word_assign_goodbye.text"
msgstr ""
"Perfect!\n"
"\n"
"Variables can also change their values over time. Right now `word` has the value `'Hello'`. You can change its value in the same way that you set it for the first time. Run this:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.steps.word_plus_name.special_messages.bad_word.text"
msgstr "Oops, you need to set `word = 'Hello'` before we can continue."

#. https://futurecoder.io/course/#UsingVariables
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.UsingVariables.steps.word_plus_name.text"
msgstr ""
"Or you can just add variables together. Try:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#UsingVariables
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name_with_space
msgid "pages.UsingVariables.steps.word_plus_name_with_space.hints.0.text"
msgstr "You will need to use `+` twice, like 1+2+3."

#. https://futurecoder.io/course/#UsingVariables
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name_with_space
msgid "pages.UsingVariables.steps.word_plus_name_with_space.hints.1.text"
msgstr "Your answer should contain a mixture of variables (no quotes) and string literals (quotes)."

#. https://futurecoder.io/course/#UsingVariables
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name_with_space
msgid "pages.UsingVariables.steps.word_plus_name_with_space.hints.2.text"
msgstr "You will need to have a space character inside quotes."

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.steps.word_plus_name_with_space.special_messages.bad_word.text"
msgstr "Oops, you need to set `word = 'Hello'` before we can continue."

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.steps.word_plus_name_with_space.text"
msgstr ""
"Oops...that doesn't look nice. Can you modify the code above so that there's a space between the word and your name?"

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.title"
msgstr "Using Variables and `print()`"

#. https://futurecoder.io/course/#WritingPrograms
#. 
#.     # __code0__:
#.     __program_indented__
#. 
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.WritingPrograms.steps.editor_hello_world.text"
msgstr ""
"It's time to stop doing everything in the shell. In the top right you can see the *editor*. This is a place where you can write and run longer programs. The shell is great and you should keep using it to explore, but the editor is where real programs live.\n"
"\n"
"Type the program below into the editor, then click the 'Run' button:\n"
"\n"
"__code0__"

#. https://futurecoder.io/course/#WritingPrograms
msgid "pages.WritingPrograms.steps.final_text.text"
msgstr ""
"Congratulations, you have run your first actual program!\n"
"\n"
"Take some time to understand this program. Python runs each line one at a time from top to bottom. You should try simulating this process in your head - think about what each line does. See how the value of `word` was changed and what effect this had. Note that when `print` is used multiple times, each thing (`Hello World` and `Goodbye World` in this case) is printed on its own line.\n"
"\n"
"Some things to note about programs in the editor:\n"
"\n"
"1. The program runs in the shell, meaning that the variables defined in the program now exist in the shell with the last values they had in the program. This lets you explore in the shell after the program completes. For example, `name` now has the value `'World'` in the shell.\n"
"2. Programs run in isolation - they don't depend on any previously defined variables. The shell is reset and all previous variables are cleared. So even though `word` currently exists in the shell, if you delete the first line of the program and run it again, you'll get an error about `word` being undefined.\n"
"3. If you enter code in the shell and it has a value, that value will automatically be displayed. That doesn't happen for programs in the editor - you have to print values. If you remove `print()` from the program, changing the two lines to just `word + ' ' + name`, nothing will be displayed.\n"
"\n"
"I recommend that you check all of these things for yourself."

#. https://futurecoder.io/course/#WritingPrograms
msgid "pages.WritingPrograms.title"
msgstr "Writing Programs"
